using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using Unity;

namespace NDO
{
	/// <summary>
	/// This class overrides the built in Metaclass, generated by the NDOEnhancer,
	/// in order to support resolving constructor parameters.
	/// </summary>
	class NDOMetaclass : IMetaClass
	{
		private readonly Type t;
		private readonly IMetaClass innerClass;
		private readonly IUnityContainer configContainer;
		private ConstructorInfo constructor = null;
		private bool isDefaultConstructor = false;

		public NDOMetaclass(Type t, IMetaClass innerClass, IUnityContainer configContainer)
		{
			this.t = t;
			this.innerClass = innerClass;
			this.configContainer = configContainer;
		}

		public IPersistenceCapable CreateObject()
		{
			if (isDefaultConstructor)
				return innerClass.CreateObject();

			List<object> parameters = new List<object>();

			if (this.constructor == null)
			{
				var registrations = this.configContainer.Registrations;
				foreach (var constr in t.GetConstructors())
				{
					bool canResolve = true;
					parameters.Clear();
					
					foreach (var p in constr.GetParameters())
					{
						if (!registrations.Any(r=>r.RegisteredType == p.ParameterType))
						{
							canResolve = false;
							break;
						}
					}

					if (canResolve)
					{
						this.constructor = constr;
						isDefaultConstructor = constr.GetParameters().Length == 0;
						break;
					}
				}
			}

			if (constructor == null)
				throw new NDOException( 116, $"Cant find a resolvable constructor for class '{t.FullName}'" );

			foreach (var p in this.constructor.GetParameters())
			{
				var o = this.configContainer.Resolve( p.ParameterType );
				parameters.Add( o );
			}

			return (IPersistenceCapable)this.constructor.Invoke( parameters.ToArray() );
		}

		public int GetRelationOrdinal( string fieldName )
		{
			return innerClass.GetRelationOrdinal( fieldName );
		}
	}
}
