using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using NDO.Configuration;

namespace NDO
{
	/// <summary>
	/// This class is the base class for the class MetaClass, generated by the NDOEnhancer,
	/// in order to support resolving constructor parameters.
	/// </summary>
	public abstract class MetaclassBase : IMetaClass2
	{
		private readonly Type t;
		private ConstructorInfo constructor = null;
		private bool isDefaultConstructor = false;

		/// <summary>
		/// Constructs a NDOMetaclass object
		/// </summary>
		/// <param name="t"></param>
		public MetaclassBase( Type t )
		{
			this.t = t;
		}

		// <summary>
		// Determines, if the underlying type has a default constructor.
		// </summary>
		//protected bool IsDefaultConstructor => isDefaultConstructor;

		/// <inheritdoc/>
		public virtual IPersistenceCapable CreateObject(INDOContainer configContainer)
		{
			if (isDefaultConstructor)
				return CreateObject();

			List<object> parameters = new List<object>();

			if (this.constructor == null)
			{
				var registrations = configContainer.Registrations;
				foreach (var constr in t.GetConstructors().OrderBy( c => c.GetParameters().Length ))
				{
					bool canResolve = true;
					parameters.Clear();
					
					foreach (var p in constr.GetParameters())
					{
						if (!registrations.Any(r=>r.Key == p.ParameterType))
						{
							canResolve = false;
							break;
						}
					}

					if (canResolve)
					{
						this.constructor = constr;
						isDefaultConstructor = constr.GetParameters().Length == 0;
						break;
					}
				}
			}

			if (constructor == null)
				throw new NDOException( 116, $"Cant find a resolvable constructor for class '{t.FullName}'" );

			foreach (var p in this.constructor.GetParameters())
			{
				var o = configContainer.Resolve( p.ParameterType );
				parameters.Add( o );
			}

			return (IPersistenceCapable)this.constructor.Invoke( parameters.ToArray() );
		}

		/// <inheritdoc/>
		public abstract IPersistenceCapable CreateObject();

		/// <inheritdoc/>
		public abstract int GetRelationOrdinal( string fieldName );

	}
}
