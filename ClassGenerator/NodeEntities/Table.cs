//
// Copyright (C) 2002-2008 HoT - House of Tools Development GmbH 
// (www.netdataobjects.com)
//
// Author: Mirko Matytschak
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License (v3) as published by
// the Free Software Foundation.
//
// If you distribute copies of this program, whether gratis or for 
// a fee, you must pass on to the recipients the same freedoms that 
// you received.
//
// Commercial Licence:
// For those, who want to develop software with help of this program 
// and need to distribute their work with a more restrictive licence, 
// there is a commercial licence available at www.netdataobjects.com.
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//


using System;
using System.Xml;
using System.ComponentModel;
using System.Text.RegularExpressions;

namespace ClassGenerator
{
	[Serializable]
#if DEBUG
	public enum TableMappingType
#else
	internal enum TableMappingType
#endif
	{
		NotMapped,
		MappedAsClass,
		MappedAsIntermediateTable,
		MappedAsIntermediateClass
	}

	/// <summary>
	/// Zusammenfassung für Table.
	/// </summary>
	[Serializable]
#if DEBUG
	public class Table : IXmlStorable
#else
	internal class Table : IXmlStorable
#endif
	{
		[NonSerialized]
		private EventHandler isMappedChangedHandler;

		public event EventHandler OnIsMappedChanged
		{
			add { isMappedChangedHandler += value; }
			remove { isMappedChangedHandler -= value; }
		}

		string name;

		[Description("Gets the table name.")]
		public string Name
		{
			get { return name; }
		}
		string primaryKey = string.Empty;

        [Description("This is a comment, which will be placed in the code.")]
        public string Summary
        {
            get { return summary; }
            set { summary = value; }
        }
        string summary;

		[ReadOnly(true), Description("Name of the primary key column")]
		public string PrimaryKey
		{
			get { return primaryKey; }
			set { primaryKey = value; }
		}

		[Description("The attributes and subnodes of this node will be treated as part of the parent node.")]
		bool skipped;
		public bool Skipped
		{
			get { return skipped; }
			set { skipped = value; }
		}

		[Browsable(false)]
		string xpathSearchPath;
		public string XpathSearchPath
		{
			get { return xpathSearchPath; }
			set { xpathSearchPath = value; }
		}


		string className;
		[Description("Determines the name of the class, which will be generated by the class generator.")]
		public string ClassName
		{
			get { return className; }
			set 
			{ 
				className = value; 
				ApplicationController.Instance.MappingChanged();
			}
		}


		string nameSpace;
		[Description("Determines the namespace, in which the generated class resides.")]
		public string Namespace
		{
			get { return nameSpace; }
			set { nameSpace = value; }
		}

		TableMappingType mappingType;
		[ReadOnly(true), Description("Gets information about how the table is mapped")]
		public TableMappingType MappingType
		{
			get { return mappingType; }
			set { mappingType = value; }
		}

		string ndoOidType = string.Empty;
		[Description("If the table doesn't work with autoincrement primary keys, enter the C# type name of the object id here.")]
		public string NdoOidType
		{
			get { return ndoOidType; }
			set { ndoOidType = value; }
		}

		public Table(string name, string primaryKey, string summary)
		{
			//Regex regex = new Regex("^[A-Za-z_][A-Za-z_0-9]*$");
			//Match match = regex.Match(name);
			string tableName = name;
			string className = name;
            this.summary = summary;
			//if (!match.Success)
			//{

			//    tableName = "[" + name + "]";
			//    regex = new Regex("[A-Za-z_0-9]");				
			//    className = string.Empty;
			//    for(int i = 0; i < name.Length; i++)
			//    {
			//        if (regex.Match(name.Substring(i, 1)).Success)
			//            className += name.Substring(i, 1);
			//    }
			//}

			if (name.Length > 1)
			{
				bool hasLower = false;
				for(int i = 0; i < name.Length; i++)
				{
					if (char.IsLower(className[i]))
					{
						hasLower = true;
						break;
					}
				}
				if (!hasLower)
				{
					className = className.Substring(0, 1) + className.Substring(1).ToLower();
				}
			}
			if (char.IsLower(className[0]))
			{
				if (name.Length > 1)
					className = className.Substring(0,1).ToUpper() + className.Substring(1);
				else
					className = name.ToUpper();
			}

			this.name = tableName;
			this.className = className;
			this.primaryKey = primaryKey;
			this.mappingType = TableMappingType.NotMapped;
		}

		/// <summary>
		/// Used by serialization only.
		/// </summary>
		public Table()
		{
		}

		public virtual void FromXml(XmlElement element)
		{
			this.className = element.Attributes["ClassName"].Value;
			this.mappingType = (TableMappingType) Enum.Parse(typeof(TableMappingType), element.Attributes["MappingType"].Value);
			this.name = element.Attributes["Name"].Value;
			this.nameSpace = element.Attributes["NameSpace"].Value;
			this.ndoOidType = element.Attributes["NdoOidType"].Value;
			this.primaryKey = element.Attributes["PrimaryKey"].Value;
		}

		public virtual void ToXml(XmlElement element)
		{
			element.SetAttribute("ClassName", this.className);
			element.SetAttribute("MappingType", this.mappingType.ToString());
			element.SetAttribute("Name", this.name);
			element.SetAttribute("NameSpace", this.nameSpace);
			element.SetAttribute("NdoOidType", this.ndoOidType);
			element.SetAttribute("PrimaryKey", this.primaryKey);
		}
	}
}
