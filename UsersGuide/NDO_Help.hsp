<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<HSProject ProjectType="0" Version="2.0.26" SaveDateTime="10.08.2007 10:08:54" DXPFileName="" TemplateName="NDO Template" SpellLastCheckDateTime="00:00:00" Title="NDOUsersGuide" SCCActivated="False" SCCProject="" HelpContextIDHeaderFile="" OutputDirectory="" AutoGenerateIndexEntries="True" AutoGenerateCategoryIndex="False" BuildDXProject="False" DefaultTopic="{A64AF16C-7A8A-4D25-8D4D-549F21DC1D6D}" Lite="True">
    <SpellIgnoreAllWordList/>
    <cat Name="NDO" Key="{565E01AE-8761-47D1-A143-735B0D33C363}" AutoIndex="True"/>
    <cat Name="About NDO" Key="C1" AutoIndex="True"/>
    <cat Name="AboutNDO:Motivation" Key="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}" AutoIndex="True"/>
    <cat Name="AboutNDO:Important Issues" Key="{33B9DA97-3F61-4F8D-A417-9FA47A791845}" AutoIndex="True"/>
    <cat Name="Tutorial" Key="C2" AutoIndex="True"/>
    <cat Name="Tutorial:Creating a persistent Class" Key="{1AB149F9-80B1-4984-91C6-BC16C737DECB}" AutoIndex="True"/>
    <cat Name="Tutorial:Value Types as Members of persistent Classes" Key="{8527B549-A34F-4428-B5EE-5046B8D9C848}" AutoIndex="True"/>
    <cat Name="Tutorial:1:1 Relation" Key="{2EA34642-8D15-4EEE-8279-F222635C579A}" AutoIndex="True"/>
    <cat Name="Tutorial:1:n Relation" Key="{D578490A-5086-476A-9E84-46C7F21FBDE3}" AutoIndex="True"/>
    <cat Name="Tutorial:n:n Relations" Key="{A6DE2B82-424F-40E2-8BA5-82BD7C0F19A5}" AutoIndex="True"/>
    <cat Name="Tutorial:Inheritance without Polymorphism" Key="{CFEDAD17-E450-426D-81DF-BE5A0C0421F4}" AutoIndex="True"/>
    <cat Name="Tutorial:Polymorphism" Key="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}" AutoIndex="True"/>
    <cat Name="Concepts" Key="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}" AutoIndex="True"/>
    <cat Name="Concept:An example" Key="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}" AutoIndex="True"/>
    <cat Name="Concepts:The Enhancer" Key="{713B6B8D-6B52-4CA6-A422-A7E550612B45}" AutoIndex="True"/>
    <cat Name="Concenpts:Collisison Detection" Key="{50681DFD-9AE9-46AE-8E8A-3766AAA434C9}" AutoIndex="True"/>
    <cat Name="Concepts:Hollow Objects and Prefetches" Key="{F9727735-3EFF-46C8-B2EE-F1913691CC28}" AutoIndex="True"/>
    <cat Name="Concepts:Queries with NDOql" Key="{C60F39B8-160B-4524-9214-85D3A6246C22}" AutoIndex="True"/>
    <cat Name="Concepts:Relations in NDO" Key="{A1F5277C-674A-417A-B689-2F698E370F5B}" AutoIndex="True"/>
    <cat Name="Concepts:Inheritance" Key="{044CD953-A0EB-4477-84F9-C779662810BC}" AutoIndex="True"/>
    <cat Name="Concepts:Transactions" Key="{70CB06CF-70C2-42CE-9A52-45E234886F31}" AutoIndex="True"/>
    <cat Name="Concepts:DataBinding in .NET 1.1" Key="{B3CF781C-1BB9-4E27-BF1F-761A7584D733}" AutoIndex="True"/>
    <cat Name="Microsoft Help 2.x Error Pages" Key="C5" AutoIndex="True"/>
    <VariableValue Name="SeeAlsoText">In this Section:</VariableValue>
    <VariableValue Name="FeedbackLink"><![CDATA[<a href="http://www.netdataobjects.de/Links/EmbeddedMail">Send comments</a> on this topic.]]></VariableValue>
    <file FileName="stopwordlist.txt" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="properties.xml" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="button.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="Images\Theme\Buttons and Icons\msnext.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="Images\Theme\Buttons and Icons\msprev.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_0.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_1.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_10.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_11.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_12.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_13.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_14.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_15.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_16.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_17.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_18.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_19.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_2.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_20.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_21.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_22.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_23.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_24.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_25.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_26.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_27.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_3.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_4.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_5.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_6.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_7.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_8.png" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\image9_9.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="LinksExt\NDO-English.css" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="LinksExt\NDO_HTML.css" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="Theme\lf.css" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="Theme\nav.css" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="ImagesExt\MySqlSettings.gif" CaptureInfo="" IncludeInOutput="True"/>
    <Topic Key="{95CA4353-34B0-4493-B8AB-FF7BF1C9352E}" Name="_index_entry_not_found" Title="Empty Index Entry" ContentsTitle="Empty Index Entry" Status="In Progress" CreatedOn="23-09-2005 00:00:00" ModifiedOn="23-09-2005 00:00:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C5">
        <Notes/>
        <K Value="@_vsipsample_index_entry_not_found"/>
        <s k="BodyText"><![CDATA[<H1>Empty Index Entry</H1>
<P>The index entry you selected has no target topics associated with it.</P>
<P>If you have chosen a parent entry, please select a child entry.</P>
<xml><MSHelp:NoSearch/></xml>]]></s>
    </Topic>
    <Topic Key="{11A66232-56ED-4B86-A42C-835E93506F4A}" Name="_topic_not_found" Title="Topic Not Found" ContentsTitle="Topic Not Found" Status="In Progress" CreatedOn="23-09-2005 00:00:00" ModifiedOn="23-09-2005 00:00:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C5">
        <Notes/>
        <s k="BodyText"><![CDATA[<script type="text/javascript">
// ****************************************************************************
// *                       NavFailPage Parameter Insertion                    *
// ****************************************************************************

function navfailpageparam() {
        var keyString = "keywords=";
        var idxString = "index=";
        var urlString = "url=";
        var query = window.location.search;
        var j = 0;
        var delim;
        var i = query.indexOf(keyString);

        if (i >= 0) {
                i += keyString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("keywordsSpan").innerText = query.substring(i, j+1);
        }

        i = query.indexOf(idxString);
        if (i >= 0) {
                i += idxString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("indexSpan").innerText = query.substring(i, j+1);
        }

        i = query.indexOf(urlString);
        if (i >= 0) {
                i += urlString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("urlSpan").innerText = query.substring(i, j+1);
        }
}
</script>

<h1>Topic Not Found</h1>

<p>The link you just clicked was not able to connect to the target page.</p>

<p>Some possible reasons and remedies are as follows:</p>

<table class="msdn" cellspacing="0">
    <tbody>
        <tr valign="top">
            <th width="47%">Reason</th>

            <th width="53%">Remedy</th>
        </tr>

        <tr valign="top">
            <td width="47%">Destination topic is not part of the area you specified in the <b>Filtered by</b>
            field.</td>

            <td width="53%">Either select another filter or select <b>(no filter)</b>.</td>
        </tr>

        <tr valign="top">
            <td width="47%">The URL of the destination topic is incorrect or has changed.</td>

            <td width="53%">Use the index or the search function instead.</td>
        </tr>

        <tr valign="top">
            <td width="47%">Problems with the help installation.</td>

            <td width="53%">Rerun Setup for the product this help is related to and select the 'Repair'
            option.</td>
        </tr>
    </tbody>
</table>

<p>Additional help is available for filters, search, and the index.</p>

<p>Click <a href="javascript:history.back(-1)">Back</a> to return to the page you were on.</p>
<hr>

<p>The target parameters are:</p>
<p>Keyword: <span id="keywordsSpan"></span><br>
Index Moniker: <span id="indexSpan"></span><br>
URL: <span id="urlSpan"></span></p>
<script type="text/javascript">
    navfailpageparam()
</script>
<xml><MSHelp:NoSearch/></xml>]]></s>
    </Topic>
    <Topic Key="{A64AF16C-7A8A-4D25-8D4D-549F21DC1D6D}" Name="aboutndo" Title="About NDO" ContentsTitle="About NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:10" ModifiedOn="30-01-2007 12:48:36" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{565E01AE-8761-47D1-A143-735B0D33C363}">
        <Notes/>
        <r t="{97E54BD9-31FB-49F7-B24C-20E242B4F48B}" cat="" Title="" rt="0" URL=""/>
        <r t="{983EB61B-95A5-4A5E-A772-0EEAE387E9B6}" cat="" Title="" rt="0" URL=""/>
        <r t="{0C5D5106-9C65-4080-974E-7F0D456F502F}" cat="" Title="" rt="0" URL=""/>
        <r t="{9CCCE3B5-9C1E-4F42-9C3B-9D5650CBBEA8}" cat="" Title="" rt="0" URL=""/>
        <r t="{C3849DE4-CBE0-4011-A289-704A9581D65B}" cat="" Title="" rt="0" URL=""/>
        <r t="{5104EA05-E848-4115-96C6-ED07807F14F5}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H1>About NDO</H1></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Thank you very much for purchasing or evaluating NET Data Objects (NDO). NDO is a powerful tool&nbsp;that allows storing the state and relationships of your .NET objects in relational databases. NDO takes care&nbsp;of building the database structure and storing and retrieving the objects. The developer can focus on his problem domain and does not have to worry about data tables, columns and rows or complicated SQL queries.</P>
<P class=MsoBodyText><B>Just write classes representing your application logic and let NDO handle the persistence</B></P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{3E1262B0-1825-491B-A941-FB9EA951AF80}" Name="tutorial1" Title="Tutorial" ContentsTitle="Tutorial" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 14:17:07" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{565E01AE-8761-47D1-A143-735B0D33C363}">
        <Notes/>
        <r t="{47D30916-7B76-43D5-8C8C-19D99CCA9B4D}" cat="" Title="" rt="0" URL=""/>
        <r t="{E5747C42-813B-4C53-A569-0AF6622EE5D0}" cat="" Title="" rt="0" URL=""/>
        <r t="{4EB139AB-AD0B-4CE8-B121-60C046117303}" cat="" Title="" rt="0" URL=""/>
        <r t="{41B3C2A1-2593-4C05-BFB5-0A393C2EAB67}" cat="" Title="" rt="0" URL=""/>
        <r t="{C4AF0CEB-4401-4290-910A-D2D8C05CEB99}" cat="" Title="" rt="0" URL=""/>
        <r t="{A95CCE4D-9CF5-4846-A541-58209A9E4988}" cat="" Title="" rt="0" URL=""/>
        <r t="{E718119F-E71C-431F-B85C-0D525523EBD8}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H1><A name=Tutorial></A>Tutorial</H1></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In the tutorial we will work out the travel expenditure accounting system described in the chapter <A href="anexample.html">An Example</A>. Actually we’re not going to implement a full blown application. But we will use classes from this problem domain to demonstrate the different capabilities of NDO which&nbsp;include </P>
<P class=MsoBodyText>-&nbsp;&nbsp;&nbsp;&nbsp; storing objects,</P>
<P class=MsoBodyText>-&nbsp;&nbsp;&nbsp;&nbsp; handling various types of relations,</P>
<P class=MsoBodyText>-&nbsp;&nbsp;&nbsp;&nbsp; working with polymorphic and non polymorphic inheritance,</P>
<P class=MsoBodyText>-&nbsp;&nbsp;&nbsp;&nbsp; implementing sophisticated queries with robust code.</P>
<P class=MsoBodyText><B>Tip:</B> The tutorial samples are installed as projects ready to run&nbsp;for Visual Studio 2005. You can find them in <EM>&lt;NDOInstallationDirectory&gt;\Tutorial</EM> where <EM>&lt;NDOInstallationDirectory&gt;</EM> is the directory name you chose during installation of NDO. Parts of the tutorial are available as video files on our website. The direct link is&nbsp;<A href="http://www.netdataobjects.com/Links/Videos"><EM>http://www.netdataobjects.com/Links/Videos</EM></A>.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{97E54BD9-31FB-49F7-B24C-20E242B4F48B}" Name="motivation" Title="Motivation" ContentsTitle="Motivation" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 12:49:34" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <r t="{B0ACA8A6-BE86-451A-A387-0D185F8186AA}" cat="" Title="" rt="0" URL=""/>
        <r t="{81CD2675-546B-4FB2-982E-4E14A9A3BD60}" cat="" Title="" rt="0" URL=""/>
        <r t="{8A2C15DC-27CA-4C87-BA49-03FF28B4AC07}" cat="" Title="" rt="0" URL=""/>
        <r t="{FA4D23ED-0B97-411C-88D8-1F0169D549EA}" cat="" Title="" rt="0" URL=""/>
        <r t="{DA210BBB-5061-49BD-A0FA-8C59E371532F}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Motivation</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Do you want to write object oriented code that works as&nbsp;expected and can be easily maintained and adapted to changing needs? Would you rather like to&nbsp;take a vacation&nbsp;instead of coding thousands of lines of code for data access? Do you prefer to work with innovative technologies over working with the methodologies of yesterday? Whatever applies to you, NDO is the right solution.</P>
<P class=MsoBodyText>You don't believe it? Well, here are some facts:</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{B0ACA8A6-BE86-451A-A387-0D185F8186AA}" Name="ndomakespersistencesimple" Title="NDO makes Persistence simple" ContentsTitle="NDO makes Persistence simple" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="01-02-2007 14:19:46" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>NDO makes Persistence simple</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Business applications always work with data. So there&nbsp;always has to be a means to store and retrieve data, preferably using databases&nbsp;that allow querying data rows according to certain criteria. On the other hand, the best way to code business applications is to use object systems. Storing an object system in a database and retrieving it again is a laborious and error-prone task. Every navigation path between different classes needs a query to fetch the state of the related objects. The effort for accomplishing data access (in lines of code, time and money) explodes exponentially with the complexity of a system, in proportion to the numbers of classes involved. The <A href="anexample.html">example</A> shows this in detail.</P>
<P class=MsoBodyText>Here NDO and it’s concept of transparent persistence enters the stage. Transparent persistence means that nearly all of the code normally written for data access just disappears. Objects are stored and reloaded automatically; they are just there when you need them. The aspect of persistence is only visible if you wish so, for example in transaction management or in queries for certain objects. </P>
<P class=MsoBodyText>The&nbsp;benefit of using NDO is&nbsp;generally 40% to 70% less code for business applications.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{81CD2675-546B-4FB2-982E-4E14A9A3BD60}" Name="ndosupportsdistributedapplications" Title="NDO supports distributed applications" ContentsTitle="NDO supports distributed applications" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 12:54:46" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>NDO supports distributed applications</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Have you ever asked yourself how orders from your web store could be directly transferred to order processing? Or how objects can be transferred between applications and Web Services? This is no problem at all with the object container concept of NDO Enterprise Edition. Just wrap a set of objects in an object container and send it to wherever they are needed. An offline PersistenceManager allows tracking the changes to the objects. After doing a sequence of work, a change set container can be sent back to the part of the application&nbsp;that has a connection to the database and can be stored using an online PersistenceManager.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{8A2C15DC-27CA-4C87-BA49-03FF28B4AC07}" Name="sqlqueriesarereplacedbyasimplequerylanguageandsyntaxchecking" Title="SQL queries are replaced by a simple query language and syntax checking" ContentsTitle="SQL queries are replaced by a simple query language and syntax checking" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 12:55:51" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>SQL queries are replaced by a simple query language&nbsp;with syntax checking</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In order to retrieve objects instead of data rows, NDO implements its own query language. The syntax is similar to the syntax of WHERE clauses in SQL, but can be checked by the VB or C# Compiler. SQL queries are no longer necessary although they are still available as a SQL pass through option. You probably won’t miss typing erroneous SELECT statements and the run time errors and support phone calls they cause, won’t you?</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{FA4D23ED-0B97-411C-88D8-1F0169D549EA}" Name="ndoallowsyoutostoreobjectsinrelationaldatabases" Title="NDO allows you to store objects in relational databases" ContentsTitle="NDO allows you to store objects in relational databases" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 12:57:13" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>NDO allows you to store objects in relational databases</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Relational databases like Oracle, MySQL or MS SQL Server have a big advantage: The data model is easy to understand and to analyze. Stored data can be evaluated independently from the application that generated it. This is a core demand of IT strategy in bigger companies. The disadvantage of using relational databases is a huge code overhead for persistence because relational databases are not well suited for storing objects. NDO eliminates this overhead with the concept of transparent persistence, but maintains the advantage of relational database systems. One of the key goals in developing NDO was to generate database structures which are easy to understand and to analyze. Wherever possible the class and field names are used as table and column names in the database structure.</P>
<P class=MsoBodyText>With respect to IT strategy, the combination of relational databases and NDO is superior to Object Oriented Databases (OODBMS),&nbsp;an alternative&nbsp;to object persistence solution. Under certain circumstances, OODBMS are faster but they behave like a black box. The preference for relational systems is clearly visible in the market size (13 billion US $ in 2003 for RDBMS compared to less than 1 billon for OODBMS in 2003 according to Gartner Research).</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{DA210BBB-5061-49BD-A0FA-8C59E371532F}" Name="persistenceseemstohavelowpriorityformicrosoft" Title="Persistence seems to have low Priority for Microsoft" ContentsTitle="Persistence seems to have low Priority for Microsoft" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="01-02-2007 14:12:57" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{FA5580C2-78CB-40E1-9E6E-C49289D0E7AC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Persistence seems to have low Priority for Microsoft</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Microsoft does not seem to see a necessity to provide an object relational mapping system&nbsp;on their own. There was an attempt to build such a technology, called Object Spaces, but this project has been cancelled. Another attempt was scheduled to be implemented together with the new file system WinFS. WinFS was first planned for Windows Vista and is now delayed to the successor, currently called Vienna. First studies show that the planned solution is not an O/R mapping system. </P>
<P class=MsoBodyText>Another interesting project in this area is Linq (Language Integrated Queries), providing a general purpose query language with C# 3.0 and VB 9.0. Microsoft’s DLinq implementation is essentially the old Object Spaces project using Linq as the query language. DLinq appears to be no more than a study of how to work with the Linq language constructs. This leads to the conclusion that Microsoft will not have their own O/R mapping solution in the next years to come, leaving it to independent tool manufacturers to write their solutions based on Linq. Future versions of NDO will definitely support Linq queries.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{983EB61B-95A5-4A5E-A772-0EEAE387E9B6}" Name="howthisdocumentisorganized" Title="How this Document is organized" ContentsTitle="How this Document is organized" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 12:59:59" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>How this Document is organized</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>If you just installed NDO, you should work through the Chapters <A href="importantissues.html">Important Issues</A> and the <A href="tutorial1.html">Tutorial</A>. The tutorial shows how to work with the core concepts of NDO.</P>
<P class=MsoBodyText>This way you obtain a good overview of what is discussed later on in the section <A href="whatisndo.html">Concepts</A>. That chapter describes all the different tools and technologies in NDO in detail. We encourage you to read this section entirely, as it enables you to make the most out of using NDO.</P>
<P class=MsoBodyText>A separate Programmers Reference describes all classes, functions and interfaces of NDO in detail.</P>
<P class=MsoBodyText>On our web site <I><A href="http://www.netdataobjects.com">http://www.netdataobjects.com</A></I> you find news about NDO, further code samples, an extended knowledge base, white papers, and the support and user forums.</P>
<P class=MsoBodyText>NDO and this documentation are updated regularly. If you purchased NDO or have subscribed to our email newsletter, you will be informed about new releases right away.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0C5D5106-9C65-4080-974E-7F0D456F502F}" Name="conventionsinthisdocument" Title="Conventions in this document" ContentsTitle="Conventions in this document" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="14-07-2006 16:25:10" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Conventions in this document</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The following font conventions are used in this book:</P>
<P class=MsoBodyText><I>Italic</I> is used for:</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pathnames, filenames, and program names.</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Internet addresses, such as domain names and URLs.</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New terms where they are defined.</P>
<P class=MsoBodyText><B>Bold</B> is used for commands, menu items, and dialog options.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{9CCCE3B5-9C1E-4F42-9C3B-9D5650CBBEA8}" Name="systemrequirements" Title="System Requirements" ContentsTitle="System Requirements" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="11-07-2006 19:08:09" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>System Requirements</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO 1.1 has been tested in the following development environment:</P>
<P class=MsoBodyText>.NET 1.1, Service Pack 1</P>
<P class=MsoBodyText>Microsoft ILAsm 1.1.4322.573</P>
<P class=MsoBodyText>Microsoft ILDasm 1.1.4322.573</P>
<P class=MsoBodyText>Microsoft Visual Studio .NET 2003 7.1.3088 (at least Professional Edition) </P>
<P class=MsoBodyText>NDO 1.2 has been tested in the following development environment:</P>
<P class=MsoBodyText>.NET 2.0</P>
<P class=MsoBodyText>Microsoft (R) .NET Framework IL Assembler&nbsp; Version 2.0.50727.42</P>
<P class=MsoBodyText>Microsoft (R) .NET Framework IL Disassembler&nbsp; Version 2.0.50727.42</P>
<P class=MsoBodyText>Microsoft Visual Studio .NET 2005 8.0.50727.42 (at least Professional Edition) </P>
<P class=MsoBodyText>For all NDO versions applies:</P>
<P class=MsoBodyText>Pentium IV or Centrino, 512 MByte RAM minimum</P>
<P class=MsoBodyText>NDO might work in different environments but without warranty. NDO does not work with ILAsm- or ILDasm-versions of other .NET-implementations like mono.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C3849DE4-CBE0-4011-A289-704A9581D65B}" Name="trademarks" Title="Trademarks" ContentsTitle="Trademarks" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="11-07-2006 19:08:07" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>Trademarks</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO (.NET Data Objects) is a registered trademark of HoT – House of Tools Development GmbH. All rights reserved.</P>
<P class=MsoBodyText>All other trademarks and copyrights are the property of their respective owners.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{5104EA05-E848-4115-96C6-ED07807F14F5}" Name="importantissues" Title="Important Issues" ContentsTitle="Important Issues" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="16-08-2006 16:27:34" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C1">
        <Notes/>
        <r t="{6A2038E2-EF08-4274-A9A6-A5A00976525C}" cat="" Title="" rt="0" URL=""/>
        <r t="{3EFB59E3-0B72-448B-9728-25543E2AE962}" cat="" Title="" rt="0" URL=""/>
        <r t="{2511F58D-C193-4186-A704-F7DF3000E008}" cat="" Title="" rt="0" URL=""/>
        <r t="{E8BD3373-1D1E-4951-BA05-D83661E6C3C7}" cat="" Title="" rt="0" URL=""/>
        <r t="{E5273F50-991B-4BEC-A26C-1E468EE82A34}" cat="" Title="{Deployment}" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>Important Issues </H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Following is a list of important issues to check before starting to work with NDO.</P>








</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{6A2038E2-EF08-4274-A9A6-A5A00976525C}" Name="setthepathenvironmentvariable1" Title="Set the Path Environment Variable" ContentsTitle="Set the Path Environment Variable" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="13-07-2006 12:47:36" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{33B9DA97-3F61-4F8D-A417-9FA47A791845}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Set the Path Environment Variable</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO uses two Microsoft programs that are installed as part of the Visual Studio .NET installation. These are <I>ILAsm.exe</I> and <I>ILDasm.exe</I>.</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoBodyText><B>NDO 1.1:</B></P>
<P class=MsoBodyText>ILAsm is part of .NET and can be found in the directory <I>&lt;Windows directory&gt;\Microsoft.NET\Framework\v1.1.4322. &lt;Windows directory&gt;</I> must be replaced with the actual directory of your Windows installation.</P>
<P class=MsoBodyText>ILDasm is part of the.NET Framework SDK. If you accepted the defaults during setup of Visual Studio it can be found in the directory: <I>&lt;Program Files&gt;\Microsoft Visual Studio .NET 2003\SDK\v1.1\Bin</I></P>
<P class=MsoBodyText><B>NDO 1.2:</B></P>
<P class=MsoBodyText>ILAsm is part of .NET and can be found in the directory <I>&lt;Windows directory&gt;\Microsoft.NET\Framework\v2.0.50727. &lt;Windows directory&gt;</I> must be replaced with the actual directory of your Windows installation.</P>
<P class=MsoBodyText>ILDasm is part of the.NET Framework SDK. If you accepted the defaults during setup of Visual Studio it can be found in the directory: <I>&lt;Program Files&gt;\Microsoft Visual Studio 8\SDK\v2.0\Bin . </I>Replace <I>&lt;Program Files&gt;</I> with the drive and directory, in which program files are installed (German: Programme).</P>
<P class=MsoBodyText>NDO tries to find the named applications automatically. If it fails, you will get an error message in the Visual Studio IDE. If this occurs, make sure that the directories containing the above named programs are included in the path environment variable:</P>
<P class=C1HNumber><B>1.&nbsp;&nbsp; </B>On the desktop, right-click on <B>My Computer</B> and choose <B>Properties</B>.</P>
<P class=C1HNumber><B>2.&nbsp;&nbsp; </B>Click the <B>Advanced</B> tab, and then click <B>Environment Variables</B>. </P>
<P class=C1HNumber><B>3.&nbsp;&nbsp; </B>Look for Path in the User Variables. If it does not exit, click New and enter Path in the <B>Variable Name</B> edit field. If it exists, select it and click <B>Edit</B> </P>
<P class=C1HNumber><B>4.&nbsp;&nbsp; </B>Add the two directories in the <B>Variable Value</B> edit field, each separated with a semicolon.</P>
<P class=C1HNumber><B>5.&nbsp;&nbsp; </B>Click <B>Ok</B></P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{3EFB59E3-0B72-448B-9728-25543E2AE962}" Name="checktheinstallation1" Title="Check the Installation" ContentsTitle="Check the Installation" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="13-07-2006 12:47:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{33B9DA97-3F61-4F8D-A417-9FA47A791845}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Check the Installation</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Start Visual Studio. With the command <B>Tools / Add-In-Manager</B> you can check if NDO Enhancer is installed correctly.</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_0.jpg"></P>
<P class=MsoBodyText>The Add-In shows its own toolbar:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_1.jpg"></P>
<P class=MsoBodyText>In Visual Studio 2003 it looks a little bit different:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_2.png">&nbsp;&nbsp;&nbsp; </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{2511F58D-C193-4186-A704-F7DF3000E008}" Name="alwaysinitializepersistentfields1" Title="Always Initialize Persistent Fields" ContentsTitle="Always Initialize Persistent Fields" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 13:04:04" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{33B9DA97-3F61-4F8D-A417-9FA47A791845}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Always Initialize Persistent Fields</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Initializing strings and DateTime values in the constructor helps avoiding problems with databinding. An uninitialized string and DateTime.MinValue are stored as DBNull values in the database and converted back to null respective DateTime.MinValue while reading an object.</P>
<P class=MsoBodyText>Note that Datetime values are ValueTypes and will always be initialized by .NET with the value DateTime.MinValue.</P>
<P class=MsoBodyText>Databases normally allow Null values to be written in numeric columns. But since .NET initializes numbers with 0, numeric columns will always have valid values after an object is stored by NDO. </P>
<P class=MsoBodyText>NDO supports the nullable&lt;T&gt; type, allowing assignment of Null to numeric values. These Null values will then be stored in and retrieved from the database. For&nbsp;most applications assignment of Null to numeric values does not make much sense.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E8BD3373-1D1E-4951-BA05-D83661E6C3C7}" Name="createpersistentclassesinseparatedassemblies" Title="Create Persistent Classes in Separated Assemblies" ContentsTitle="Create Persistent Classes in Separated Assemblies" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="14-07-2006 15:44:13" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{33B9DA97-3F61-4F8D-A417-9FA47A791845}">
        <Notes/>
        <s k="BodyText"><![CDATA[<script language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</script>

<div class=d2h_main_nsbanner id=nsbanner>
<div class=d2h_main_titlerow id=TitleRow>

<div id=_d2hTitleNavigator>
<h3>Create Persistent Classes in Separated Assemblies</h3></div></div></div>
<div class=d2h_main_nstext id=nstext valign="bottom">
<div class=d2h_main_topic>
<p class=MsoBodyText>We recommend putting your persistent classes into their own assemblies that are separated from the accessing code. This is because these classes will be changed by the enhancer. They implement the interface IPersistenceCapable after enhancing, thus getting new methods and properties.</p>
<p class=Msocaption><img src="ImagesExt/image9_3.jpg"></p>
<p class=Msocaption>Picture 2: Application assemblies and business class assemblies should be separated.</p>
<p class=MsoBodyText>If you need to use the properties and functions of IPersistenceCapable in the same assembly as the persistent class, you can do this with the ObjectHelper class:</p>
<p class=Codebase>[NDOPersistent] </p>
<p class=Codebase>class Employee </p>
<p class=Codebase>{ </p>
<p class=Codebase>&nbsp;&nbsp;&nbsp; void foo() </p>
<p class=Codebase>&nbsp;&nbsp;&nbsp; { </p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Causes an error since NDOObjectId</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // does not exist before the Enhancer went through</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectId oid = this.NDOObjectId;</p>
<p class=Codebase>&nbsp;</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // calms the compiler:</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectId oid = &nbsp;</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ObjectHelper.GetObjectId(this));</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // alternatively use:</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectId oid = </p>
<p class=Codebase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IPersistenceCapable)this).NDOObjectId;</p>
<p class=Codebase>&nbsp;&nbsp;&nbsp; } </p>
<p class=CodeBase>}</p></div></div>]]></s>
    </Topic>
    <Topic Key="{47D30916-7B76-43D5-8C8C-19D99CCA9B4D}" Name="creatingapersistentclass" Title="Creating a persistent Class" ContentsTitle="Creating a persistent Class" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 14:21:54" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{C26A992A-F3DA-4837-9FC7-3945652D84D4}" cat="" Title="" rt="0" URL=""/>
        <r t="{0CB4A5F9-F875-437A-843D-C715583D50A5}" cat="" Title="" rt="0" URL=""/>
        <r t="{94A3D7CE-7824-4D7C-84D9-C12C36F6BA39}" cat="" Title="" rt="0" URL=""/>
        <r t="{7DDA8A89-C01B-482A-BFB6-7BA5E9536FBF}" cat="" Title="" rt="0" URL=""/>
        <r t="{A232FB56-868D-4D04-B80E-D2AB851189B6}" cat="" Title="" rt="0" URL=""/>
        <r t="{D239DA4A-98D5-4B58-894D-B3B1FC58C335}" cat="" Title="" rt="0" URL=""/>
        <r t="{607CFB17-7FBF-4E64-908E-E3F5CA33F62A}" cat="" Title="" rt="0" URL=""/>
        <r t="{D3BD4891-0E58-4F79-AFCE-BEE9835F5DDD}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Creating a persistent Class</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The first tutorial will show you how to create a simple persistent class, how to activate the Enhancer and how to write code that </P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stores&nbsp;a persistent&nbsp;object in the database, </P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reads the object from the database,</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deletes it at the end.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C26A992A-F3DA-4837-9FC7-3945652D84D4}" Name="creatinganewcsolution" Title="Creating a new C# Solution" ContentsTitle="Creating a new C# Solution" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="13-07-2006 14:57:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Creating a new C# Solution</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=C1HNumber><B>1.&nbsp; </B>Start Visual Studio </P>
<P class=C1HNumber><B>2.&nbsp; </B>From the <B>File</B> menu in Microsoft Visual Studio .NET, select Blank <B>New</B> and click <B>Blank Solution</B>. The <B>New</B><B>Project</B> dialog box opens.</P>
<P class=C1HNumber><B>3.&nbsp; </B>Insert Solution1 under the solution name </P>
<P class=C1HNumber><B>4.&nbsp; </B>You can accept the defaults or select another directory by clicking on the <B>Browse</B> button to specify the location for your application in the <B>Location</B> field. Then click <B>OK</B>.</P>
<P class=C1HNumber><B>5.&nbsp; </B>From the <B>File</B> menu in Microsoft Visual Studio .NET, select <B>New</B> again. Now click on <B>Project</B>. The <B>New</B><B>Project</B> dialog box opens.</P>
<P class=C1HNumber><B>6.&nbsp; </B>Under ProjectTypes choose either VisualBasicProjects or Visual C# Projects, and select <B>Windows Application</B> from the list of Templates in the right pane.</P>
<P class=C1HNumber><B>7.&nbsp; </B>Create a new solution with <B>EmptySolution</B> (German: <EM><B>Leere Projektmappe</B></EM>).</P>
<P class=C1HNumber><B>8.&nbsp; </B>Enter the name TravelAccounting</P>
<P class=C1HNumber><B>9.&nbsp; </B>Inside the solution create a new project of type C# Class Library. </P>
<P class=MsoBodyText>Start Visual Studio and create a new solution (<B>Empty Solution</B>, German: <B>Leere Projektmappe</B>).The solution receives the name <B>NDOTravelExpenses</B>. (In Visual Studio 2005 choose <B>File / New Project…</B>, unfold <B>Other Project Types</B>, select <B>Visual Studio Solutions / Blank Solution</B>).</P>
<P class=MsoBodyText>In the Solution Explorer right click on the solution and select <B>Add / New Project</B>. Choose the C# class library project type. We’ll give it the name <B>BusinessClasses</B>. You can delete the automatically generated file Class1.cs in the Solution Explorer.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0CB4A5F9-F875-437A-843D-C715583D50A5}" Name="createtheclassemployee" Title="Create the class Employee." ContentsTitle="Create the class Employee." Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="01-02-2007 14:11:24" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Create the class Employee.</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO offers a simple way to create a new persistent class. In the <B>Solution Explorer</B> (German: <B>Projektmappen-Explorer</B>) right-click on the project <B>BusinessClasses</B>. In the context menu choose <B>AddPersistentClass</B>.</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_4.jpg"></P>
<P class=MsoBodyText>You can also press the button with the corresponding icon in the NDO tool bar. In the following dialog enter <B>Employee</B> as class name. NDO generates a skeleton of the class which looks like this:</P>
<P class=CodeBase>using System;</P>
<P class=CodeBase>using System.Collections;</P>
<P class=CodeBase>using System.Collections.Generic;</P>
<P class=CodeBase>using NDO;</P>
<P class=CodeBase>namespace BusinessClasses</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent]</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Employee</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Now add two private fields to the class:</P>
<P class=CodeBase>string firstName;</P>
<P class=CodeBase>string lastName;</P>
<P class=MsoBodyText>With a right-click on one of these code lines a context menu is displayed where you can select <B>Add Accessor:</B></P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_5.jpg"></P>
<P class=MsoBodyText>NDO automatically creates an accessor property for the field. An accessor property is a property with a getter and a setter, which is simply wrapped around a variable. After that the code looks like this:</P>
<P class=CodeBase>string firstName;</P>
<P class=CodeBase>public string FirstName</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return firstName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { firstName = value; }</P>
<P class=CodeBase>}</P>
<P class=CodeBase>string lastName;</P>
<P class=CodeBase>public string LastName</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return lastName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { lastName = value; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The Add Accessor feature simplifies the coding of class models significantly, since accessor properties are needed very often in object oriented programming.</P>
<P class=MsoBodyText>Now the Employee class is ready. It is just an ordinary .NET class. The status of the employee objects is kept in private member variables which can be accessed with properties. Note that NDO does not use the properties for persistence purposes. You can omit the properties, name it, or code it at will.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{94A3D7CE-7824-4D7C-84D9-C12C36F6BA39}" Name="thendopersistentattribute" Title="The NDOPersistent Attribute" ContentsTitle="The NDOPersistent Attribute" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 14:24:54" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>The NDOPersistent Attribute</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Not every class of a system is persistent. The NDO enhancer needs&nbsp;information which classes&nbsp;are persistent and which&nbsp;are not. NDO provides this information using the custom attribute NDOPersistent. This attribute resides in the namespace NDO, so a class file for a persistent class should provide the statement</P>
<P class=CodeBase>using NDO;</P>
<P class=MsoBodyText>at the beginning. The NDOPersistent attribute should appear directly above the class definition:</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class Employee</P>
<P class=CodeBase>...</P>
<P class=MsoBodyText>The <B>Add Persistent Class</B> feature of NDO has already taken care of these steps for you.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{7DDA8A89-C01B-482A-BFB6-7BA5E9536FBF}" Name="activatingtheenhancer" Title="Activating the Enhancer" ContentsTitle="Activating the Enhancer" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="25-05-2007 13:24:56" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Activating the Enhancer</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>You find a new toolbar in Visual Studio after the installation of NDO. Usually the toolbar can be found directly under the file menu.</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_1.png" border=0></P>
<P class=MsoBodyText>If you cannot find the toolbar, it has to be activated. This happens with a right click on the existing toolbars or the menu bar. Then the context menu shows all available toolbars. The NDO toolbar is named <B>.<EM>NET Data Objects Add in</EM></B><EM>.</EM></P>
<P class=MsoBodyText>After clicking on the <B>Configuration</B> button <IMG src="ImagesExt/image9_6.png">&nbsp;in the NDO toolbar the following dialog appears:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_7.png"></P>
<P class=MsoBodyText>You should set the options exactly as&nbsp;shown in the screenshot. This can be easily achieved by pressing the button <B>Preset for Library</B>.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A232FB56-868D-4D04-B80E-D2AB851189B6}" Name="creatingtheclient" Title="Creating the Client" ContentsTitle="Creating the Client" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 15:16:49" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Client</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now add a new project to the solution called <B>TestApp</B>. The project is of type C# console application.</P>
<P class=MsoBodyText>Right-click on the <B>References</B> entry of the <B>TestApp</B> project in the <B>Solution Explorer</B>.</P>
<P class=MsoBodyText>Select <B>Add Reference</B>.</P>
<P class=MsoBodyText>In the Add Reference dialog select the tab <B>Projects</B> and add a reference to <B>BusinessClasses</B>. Close the dialog&nbsp;by pressing <STRONG>OK</STRONG>.</P>
<P class=MsoBodyText>Right-click on the <B>TestApp</B> Entry in the Solution Explorer and select <B>Set as Startup Project</B>.</P>
<P class=MsoBodyText>Open the NDO configuration dialog for the TestApp project and select <B>Access</B> as the SQL dialect of the database.</P>
<P class=MsoBodyText>Press <B>Preset for Applications</B>.</P>
<P class=MsoBodyText>You are asked to select a database connection. Since we did not create a database yet, close the database connection dialog by pressing <B>Cancel</B>.</P>
<P class=MsoBodyText>Press the <B>New</B> button next to the edit field for the <B>Default Connection String</B>. In the next dialog press the <B>Browse</B> button (<B>...</B>). You get a standard file dialog where you can enter an Access database filename. Choose a directory where you want the database to be created and type the name <I>NDOTestDB</I>.</P>
<P class=MsoBodyText>Click <B>Store</B> and in the Create Access Database dialog click <B>OK</B>. The connection string to the new database is inserted in the <B>Default Connection String</B> edit box. Now close the NDO Configuration Dialog&nbsp;by pressing <STRONG>OK</STRONG>.</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_8.png"></P>
<P class=Msocaption>Picture 1: NDO configuration for the test application.</P>
<P class=MsoBodyText>Now open the file <I>Class1.cs</I> (or <I>Program.cs</I> in VS 2005) in the Solution Explorer that was created by Visual Studio and insert this code:</P>
<P class=CodeBase>using System;</P>
<P class=CodeBase>using System.Collections;</P>
<P class=CodeBase>using BusinessClasses;</P>
<P class=CodeBase>using NDO;</P>
<P class=CodeBase>namespace Client</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; class Class1</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Employee e = new Employee();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.FirstName = "Mirko";</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.LastName = "Matytschak";</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.BuildDatabase();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.MakePersistent(e);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.Save();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The first three lines of Main() would work without NDO. The interesting part starts with the fourth line. The PersistenceManager is created here. It is the central class with which&nbsp;applications interact with the persistence layer.</P>
<P class=MsoBodyText>The call to MakePersistent() registers the object at the persistence layer. Before this call, the code added by the NDO Enhancer does not come into effect. Among other things the enhanced code reports every access to private variables to NDO, so that NDO can load object data if necessary or mark an object as dirty after a write access.</P>
<P class=MsoBodyText>pm.Save() stores created or changed objects to the database. Objects marked for deletion will also be deleted from the database. In the case of our example the call to Save() simply stores the new object.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D239DA4A-98D5-4B58-894D-B3B1FC58C335}" Name="firstbuildandtestcycle" Title="First Build and Test Cycle" ContentsTitle="First Build and Test Cycle" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="01-02-2007 14:19:34" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>First Build and Test Cycle</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Build the solution. If all things worked well, the output window of Visual Studio should look&nbsp;as shown below. The Enhancer creates a mapping file <I>NDOMapping.xml</I> for each project which is visible in the Solution Explorer.</P>
<P class=MsoBodyText>An additional file <I>&lt;Assemblyname&gt;.ndo.sql</I> is created in the <I>bin</I> directory of the TestApp project. This file can be used for creating database tables. The line pm.BuildDatabase() uses this file to build the database structure in the mdb file we just created using the configuration dialog. This function is very handy for test applications. It makes sure that the database is always in a defined, empty condition.</P>
<P class=MsoBodyText>In the executable directory you can find a schema file with the file extension <I>.ndo.xsd</I>. In our sample the file is called TestApp.ndo.xsd. NDO does not use this file, it is for your convenience to manipulate the data stored in the database using ADO.NET DataSets.</P>
<DIV>
<P class=Note><B>Important:</B> The .ndo.sql script deletes existing tables and recreates them. Use the <I>.ndodiff.sql</I> script files to change existing databases.</P></DIV>
<P class=MsoBodyText>After a change to the persistent classes, an additional file <I>&lt;Assemblyname&gt;.&lt;Schema Version&gt;.ndodiff.sql</I> is created by NDO to allow changing the database structure without losing existing data. The &lt;Schema Version&gt; part of the file name will be taken from the NDO configuration. This value can be changed in the NDO configuration dialog.</P>
<P class=berschr4nichtDTH-Inhalt>Starting the application</P>
<P class=MsoBodyText>Nothing exciting happens on the screen if you execute the application. But if you take a look in the sample database you will note that there is a new table, named Employee, with a single&nbsp;entry. The entry reflects our saved object:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_9.jpg">&nbsp;</P>
<P class=MsoBodyText>The next step following the compiler output section shows how to load the object from the database.</P>
<P class=berschr4nichtDTH-Inhalt>The compiler output generated by the sample project:</P>
<P class=CodeBase>------ Build started: Project: BusinessClasses, Configuration: Debug Any CPU ------</P>
<P class=CodeBase>...</P>
<P class=CodeBase>Compile complete -- 0 errors, 0 warnings</P>
<P class=CodeBase>BusinessClasses -&gt; .\BusinessClasses.dll</P>
<P class=CodeBase>NDO: 10.01.2006 (V. 1.2)</P>
<P class=CodeBase>Generating class mapping for class 'BusinessClasses.Employee'</P>
<P class=CodeBase>Generating field mapping: BusinessClasses.Employee.firstName -&gt; FirstName</P>
<P class=CodeBase>Generating field mapping: BusinessClasses.Employee.lastName -&gt; LastName</P>
<P class=CodeBase>Enhancing Assembly</P>
<P class=CodeBase>Generating Binary</P>
<P class=CodeBase>Saving mapping file</P>
<P class=CodeBase>Generating schema file</P>
<P class=CodeBase>Enhancer ready</P>
<P class=CodeBase>------ Build started: Project: TestApp, Configuration: Debug Any CPU ------</P>
<P class=CodeBase>...</P>
<P class=CodeBase>Compile complete -- 0 errors, 0 warnings</P>
<P class=CodeBase>TestApp -&gt; ...\TestApp.exe</P>
<P class=CodeBase>NDO: 10.01.2006 (V. 1.2)</P>
<P class=CodeBase>Saving mapping file</P>
<P class=CodeBase>Generating schema file</P>
<P class=CodeBase>Generating sql file</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>========== Build: 2 succeeded or up-to-date, 0 failed, 0 skipped ==========</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{607CFB17-7FBF-4E64-908E-E3F5CA33F62A}" Name="queryingsaveddata" Title="Querying Saved Data" ContentsTitle="Querying Saved Data" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 15:31:14" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <K Value="NDOql"/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Querying Saved Data</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In the client console application replace the code with the following code:</P>
<P class=CodeBase>static void Main(string[] args) </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; PersistenceManager pm = new PersistenceManager(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Query q = pm.NewQuery(typeof(Employee), null); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList lstEmployee = q.Execute(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; foreach(Employee e in lstEmployee) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(e.FirstName + " " + e.LastName); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>A query object is used for querying the database. The PersistenceManager is the factory for the query objects that are created with NewQuery(). The parameters of NewQuery()&nbsp; are: The type of the objects we are asking for and a condition string that resembles a&nbsp; Where clause of SQL. If the condition string is null, all stored objects of the given type are fetched. In the case of our test database there exists only one object. More information about queries can be found in the Chapter <A href="querieswithndoql.html">Queries with NDOql</A>.</P>
<P class=MsoBodyText>Note that NDO also provides a generic query object for use with .NET 2.0:</P>
<P class=CodeBase>using System.Collections.Generic;</P>
<P class=CodeBase>...</P>
<P class=CodeBase>NDOQuery&lt;Employee&gt; q = new NDOQuery&lt;Employee&gt;(pm);</P>
<P class=CodeBase>List&lt;Employee&gt; lstEmployee = q.Execute();</P>
<P class=CodeBase>Console.WriteLine(lstEmployee[0].FirstName + " " + lstEmployee[0].LastName);</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D3BD4891-0E58-4F79-AFCE-BEE9835F5DDD}" Name="deletingobjects" Title="Deleting Objects" ContentsTitle="Deleting Objects" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="13-07-2006 14:58:08" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{1AB149F9-80B1-4984-91C6-BC16C737DECB}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Deleting Objects</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Add the following lines at the end of the code in the last step:</P>
<P class=CodeBase>pm.Delete(lstEmployee); </P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoBodyText>This deletes all Employee objects in the list. You can check it by querying all employees once more:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee));</P>
<P class=CodeBase>IList lstEmployee = q.Execute();</P>
<P class=CodeBase>if (lstEmployee.Count == 0)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine("Employees deleted"); </P>
<P class=MsoBodyText>The next short section shows how to store a value type.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E5747C42-813B-4C53-A569-0AF6622EE5D0}" Name="valuetypesasmembersofpersistentclasses" Title="Value Types as Members of persistent Classes" ContentsTitle="Value Types as Members of persistent Classes" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="14-07-2006 12:59:01" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{A47E5E17-5F69-44A6-83BD-6AD7116AD301}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Value Types as Members of persistent Classes</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This section covers a small step: The handling of ValueTypes in persistent objects. Details about that matter can be found in the chapter <A href="valuetypes1.html">Value Types</A>.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A47E5E17-5F69-44A6-83BD-6AD7116AD301}" Name="handlingvaluetypes" Title="Handling Value Types" ContentsTitle="Handling Value Types" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="13-04-2007 11:47:53" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{8527B549-A34F-4428-B5EE-5046B8D9C848}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Handling Value Types</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In this step we extend the class Employee a little bit. The new lines are typed in bold font.</P>
<P class=CodeBase>using System;</P>
<P class=CodeBase>using NDO;</P>
<P class=CodeBase><B>using System.Drawing;</B></P>
<P class=CodeBase>namespace TravelExpenses</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent]</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Employee</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string FirstName;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string LastName;</P>
<P class=CodeBase><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Drawing.Point position;</B></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public Employee()</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string FirstName</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return FirstName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { FirstName = value; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string LastName</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return LastName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { LastName = value; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;</P>
<P class=CodeBase><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void SetPosition(int x, int y)</B></P>
<P class=CodeBase><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</B></P>
<P class=CodeBase><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; position = new Point(x, y);</B></P>
<P class=CodeBase><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</B></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>In all companies around the world employees ask themselves the same question: »What is my position in the company?« Hence it makes sense to&nbsp;define a position field&nbsp;in the class Employee, doesn’t it? (Although in this case it is just for describing the technique.)</P>
<P class=MsoBodyText>Please note that the assembly <EM>System.Drawing</EM> needs to be added to the references so that the namespace is available.</P>
<P class=MsoBodyText>The Enhancer detects if an element is a ValueType. It maps public member variables and public properties that can be read and written to separate database fields. This applies as long as they are primitive types like int, bool and likewise. NDO cannot store complex field types like classes (with the exception of System.String).</P>
<P class=MsoBodyText>In our case the field position is of type System.Drawing.Point. This ValueType has two public properties X and Y, which are readable and writable. They are automatically mapped by NDO to the two columns Position_X and Position_Y in the Employee table of the database.</P>
<P class=MsoBodyText>The following client code creates an Employee object, whose position will be stored in the database after the program is started.</P>
<P class=CodeBase>Employee e = new Employee();</P>
<P class=CodeBase>e.FirstName = "Mirko";</P>
<P class=CodeBase>e. FirstName = "Matytschak";</P>
<P class=CodeBase>e.SetPosition(10, 5);</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>pm.MakePersistent(e);</P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory <I>NDOTravelExpenses-Step 1</I>.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{4EB139AB-AD0B-4CE8-B121-60C046117303}" Name="11relation" Title="1:1 Relation" ContentsTitle="1:1 Relation" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="14-07-2006 13:00:02" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{07B40D19-D7A6-4144-8DDA-BC3639F6A976}" cat="" Title="" rt="0" URL=""/>
        <r t="{6CAD4D24-EBC5-489D-B01E-F07A637A04A9}" cat="" Title="" rt="0" URL=""/>
        <r t="{083F1180-BE6A-46FC-BD2F-FD2B9C70F9B7}" cat="" Title="" rt="0" URL=""/>
        <r t="{443EA5E7-23D9-40A5-B214-B3825F0A59C1}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>1:1 Relation</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This tutorial section is based on the code that is created in the previous sections. It shows how relations to other persistent objects are handled. </P>








</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{07B40D19-D7A6-4144-8DDA-BC3639F6A976}" Name="creatingtheaddressclass" Title="Creating the Address Class" ContentsTitle="Creating the Address Class" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="30-01-2007 15:39:36" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{2EA34642-8D15-4EEE-8279-F222635C579A}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Address Class</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Add a new class with the name Address to the travel expense accounting project. Insert the following code:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses</P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Address </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string countryCode; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string zip;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string street; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string city;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Address()</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string CountryCode </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return countryCode; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { countryCode = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Zip</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return zip; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { zip = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Street</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return street; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { street = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string City </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return city; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { city = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>As you can see, this class is built the same way as the class Employee. It has four private fields. Objects of this class are saved in&nbsp;their own database table.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{6CAD4D24-EBC5-489D-B01E-F07A637A04A9}" Name="referencinganaddressintheemployeetable" Title="Referencing an Address in the Employee Table" ContentsTitle="Referencing an Address in the Employee Table" Status="In Progress" CreatedOn="06-07-2006 18:40:11" ModifiedOn="01-02-2007 14:14:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{2EA34642-8D15-4EEE-8279-F222635C579A}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Referencing an Address in the Employee Table</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now the Employee class needs a reference to the Address class and a property for public access. The following code creates the relation to the address objects.</P>
<P class=CodeBase>[NDORelation(RelationInfo.Composite)] </P>
<P class=CodeBase>Address address; </P>
<P class=MsoBodyText>As you can see, it is not enough to create a member variable of the correct type. It must also be declared that this is a relation. This is done with the attribute NDORelation. The attribute parameter specifies that the lifetime of the address object is coupled to the lifetime of the employee object.&nbsp;It is deleted from the database if the employee object is deleted or if the address variable is nulled.</P>
<P class=MsoBodyText>The property for accessing the address looks like this:</P>
<P class=CodeBase>public Address Address </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return address; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { address = value; } </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>After rebuilding the assembly, the database structure has to be adjusted. The SQL script in the <I>bin</I> directory and the BuildDatabase() function take care of that. Note that you can use the diff-script residing in the <I>bin</I> directory too. Either execute it by hand or place the path to the diff script as parameter to the BuildDatabase function.</P>
<DIV>
<P class=Note><B>Note:</B> If you press the <B>Add Relation</B> button, NDO shows a dialog helping you to produce the code necessary for a relation. If you exit the dialog with OK, the code will be inserted at the current cursor position. <BR><BR><IMG src="ImagesExt/image9_10.png" border=0></P></DIV></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{083F1180-BE6A-46FC-BD2F-FD2B9C70F9B7}" Name="creatingtheclientapplication" Title="Creating the Client Application" ContentsTitle="Creating the Client Application" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 15:44:10" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{2EA34642-8D15-4EEE-8279-F222635C579A}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Client Application</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In your client you use the following code:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using System.Collections; </P>
<P class=CodeBase>using BusinessClasses; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace TestApp </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; class Class1 </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [STAThread] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Employee e = new Employee(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.FirstName = "Scott"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.LastName = "Lion"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Address a = new Address(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.CountryCode = "USA"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.Zip = "CA 94065"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.Street = "501 NDO Parkway"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.City = "Redwood Shores"; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.Address = a; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PersistenceManager pm = new PersistenceManager(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.BuildDatabase();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.MakePersistent(e); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm.Save(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>The objects Employee and Address are created as expected in object oriented programming. With the help of the property Address, the address is attached to the employee object. After that the Employee object is made persistent. The call to Save() stores both objects into the database.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{443EA5E7-23D9-40A5-B214-B3825F0A59C1}" Name="queryingthesaveddata" Title="Querying the saved Data" ContentsTitle="Querying the saved Data" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-04-2007 11:47:37" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{2EA34642-8D15-4EEE-8279-F222635C579A}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Querying the saved Data</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Querying the data we just saved is done with this code:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>NDOQuery&lt;Employee&gt; q = new NDOQuery&lt;Employee&gt;(pm);</P>
<P class=CodeBase>IList lstEmployee = q.Execute();</P>
<P class=CodeBase>Employee e = lstEmployee[0];</P>
<P class=CodeBase>Console.WriteLine(e.FirstName + " " + e.LastName);</P>
<P class=CodeBase>Console.WriteLine(e.Address.Street);</P>
<P class=CodeBase>Console.WriteLine(e.Address.City + ", " + e.Address.Zip);</P>
<P class=CodeBase>Console.WriteLine(e.Address.CountryCode);</P>
<P class=MsoBodyText>The query only has to account for the employee object; the address is retrieved automatically. But this does not happen immediately when the employee is loaded. NDO normally creates so-called hollow objects that contain no data but&nbsp;instead have only an ObjectId.&nbsp;The first time one&nbsp;of the private persistent fields of a hollow object is accessed, the actual address data are loaded. In the example this happens as soon as the field street gets touched in the property Street. Note that you can override this behavior using prefetches.</P>
<P class=berschr4nichtDTH-Inhalt>Deleting the Data</P>
<P class=MsoBodyText>Now you can add this line at the end of the code above:</P>
<P class=CodeBase>pm.Delete(e);</P>
<P class=MsoBodyText>It deletes not only the data row for the employee but also for the address. The parameter RelationInfo.Composite that was specified for the attribute NDORelation is responsible for that.</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory <I>NDOTravelExpenses-Step 2</I>.</P>
<P class=MsoBodyText>The next section covers relations with cardinality n.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{41B3C2A1-2593-4C05-BFB5-0A393C2EAB67}" Name="1nrelation" Title="1:n Relation" ContentsTitle="1:n Relation" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 15:48:49" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{90BFA9B4-5D2E-47BA-8A37-0C60789BE24A}" cat="" Title="" rt="0" URL=""/>
        <r t="{9C8C2AC0-7DCB-4DA5-B712-66D8B19D3646}" cat="" Title="" rt="0" URL=""/>
        <r t="{B153BB03-6A55-40D3-B294-61615684A0DE}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>1:n Relation</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This tutorial section is based on the code that is created in the previous sections. We will add a new class Travel and change the class Employee, so that it will have a relation to the new class. It is a 1:n relation (in other words: it has a cardinality of n) since an Employee will probably take more than one business&nbsp;trip in his life.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{90BFA9B4-5D2E-47BA-8A37-0C60789BE24A}" Name="createtheclasstravel" Title="Create the Class Travel" ContentsTitle="Create the Class Travel" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="01-02-2007 14:17:48" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{D578490A-5086-476A-9E84-46C7F21FBDE3}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Create the Class Travel</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using System.Collections; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Travel </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string purpose; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Purpose </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return purpose; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { purpose = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Travel() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>This class follows the same pattern as the class Employee. Again the property Purpose can be created with the <B>Add Accessor </B>tool.</P>
<P class=berschr4nichtDTH-Inhalt>The Relation between Employee and Travel</P>
<P class=MsoBodyText>Now the class Employee needs a reference to the class Travel and a property for public access. </P>
<P class=MsoBodyText>You also have to make sure that the namespace System.Collections (System.Collections.Generic if you use the .NET generics) is included since you will work with ArrayLists and the interface IList. The namespace statement is created automatically by the <B>Add Persistent Class</B> feature of NDO. The relation to the travel objects is implemented as follows:</P>
<P class=CodeBase>[NDORelation(typeof(Travel), RelationInfo.Composite)] </P>
<P class=CodeBase>IList travels = new ArrayList();</P>
<P class=MsoBodyText>In .NET 2.0 you can use the generic containers:</P>
<P class=CodeBase>[NDORelation(RelationInfo.Composite)] </P>
<P class=CodeBase>List&lt;Travel&gt; travels = new List&lt;Travel&gt;();</P>
<P class=MsoBodyText>Meanwhile you know the attribute NDORelation. The declaration RelationInfo.Composite is also known from the relation between Employee and Address.</P>
<DIV>
<P class=Note><B>Important:</B>&nbsp;Be sure to initialize the list variable with a new list, either in the constructor or in the declaration as shown above. If the initialization is done in the declaration, it takes effect in all constructors. Not initializing the list may result in a null pointer exception.</P></DIV>
<P class=MsoBodyText>The class IList needs a slightly different accessor property than what we got to know so far. It is not sufficient to simply pass on the list to the outside using a property. This would allow adding or removing elements outside the class Employee. But the NDO framework would not be able to detect such changes. The following code is generated if you right-click on the declaration of the variable travels and select <B>Add Accessor</B>:</P>
<P class=CodeBase>public IList Travels </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return ArrayList.ReadOnly(travels); } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { travels = value; } </P>
<P class=CodeBase>}</P>
<P class=CodeBase>public Travel NewTravel() </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Travel t = new Travel(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; travels.Add(t); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; return t; </P>
<P class=CodeBase>} </P>
<P class=CodeBase>public void RemoveTravel(Travel t) </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; if (travels.Contains(t)) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; travels.Remove(t); </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>The factory method NewTravel() is generated, because the relation is a composite relation. Composite means that the life cycle of child objects (Travels in this case) is coupled to the life cycle of the parent object (Employee in this case). So it makes sense to create them inside the class Employee to force the attachment to the right parent object. In such situations the Factory Method pattern is applied. It ensures that the Travel object is always assigned to the right parent. Once a travel object is created, it is also visible outside the class Employee, as it is supposed to be. The function RemoveTravel() allows removal of travel objects from the list. As we have a composite relation here, NDO deletes the objects from the database if they&nbsp;were removed from the list.</P>
<P class=MsoBodyText>The get property exposes a ReadOnly version of the Travel list to the outside. This allows displaying the Travel objects in a user interface. The attempt to delete or to add a Travel object from the ReadOnly list causes an exception.</P>
<P class=MsoBodyText>The set property allows assigning a ready prepared list of travel objects. The objects in the list must not be persistent themselves. This would be contrary to the logic of the composite relation. The situation would be inverted if the relation is not of type composite. Here an exception would be thrown if the objects were not persistent. This behavior ensures the integrity of the database and is further explained in the chapter <A href="relationsinndo.html">Relations in NDO</A>.</P>
<P class=MsoBodyText>If the travels list is a generic list, the accessor property looks like this:</P>
<P class=CodeBase>public List&lt;Travel&gt; Travels </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return new NDOReadOnlyGenericList (travels); } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { travels = value; } </P>
<P class=CodeBase>}</P>
<P class=CodeBase>// The NewTravel and RemoveTravel methods remain the same.</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoBodyText>Do not forget to&nbsp;update the database with the SQL script after rebuilding the assemblies.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{9C8C2AC0-7DCB-4DA5-B712-66D8B19D3646}" Name="creatingtheclientapplication1" Title="Creating the Client Application" ContentsTitle="Creating the Client Application" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 15:54:52" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{D578490A-5086-476A-9E84-46C7F21FBDE3}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Client Application</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Paste this code into your client project:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();<BR><BR></P>
<P class=CodeBase>// Make sure to build the database<BR>pm.BuildDatabase();</P>
<P class=CodeBase><BR>Employee e = new Employee();<BR>e.FirstName = "John";&nbsp;<BR>e.LastName = "Doe";&nbsp;<BR><BR>Travel t = e.NewTravel();<BR>t.Purpose = "Inhouse Training";<BR>t = e.NewTravel();<BR>t.Purpose = "TechEd 2006";<BR><BR>Address a = new Address();&nbsp;<BR>a.CountryCode="USA";&nbsp;<BR>a.Zip="CA 12345";&nbsp;<BR>a.Street="10, Wonderway";&nbsp;<BR>a.City="Dreamcity";&nbsp;<BR>e.Address = a;<BR>pm.MakePersistent(e);&nbsp;<BR>pm.Save();</P>
<P class=MsoBodyText>Two travels are created and assigned to the object, representing Mr. Doe. These travels are stored in the table travels. </P>
<P class=MsoBodyText>At this point you might be interested in watching the database structure that results from the two relations of the Employee class to Address and Travel. NDO creates a schema file <I>&lt;Assemblyname&gt;.ndo.xsd</I>, which is very helpful to examine the database structure. For our sample it looks like this:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_11.jpg" border=0></P>
<P class=MsoBodyText>As expected, three tables have been generated. Every table has an id column of type int. This is the standard in NDO. Other types are also possible, have a look at the chapter <A href="objectsandobjectidentity.html">Objects and Object Identity</A>. The relations between the tables are also visible. The 1:1 relation is realized with a foreign key column IDAddress in the Employee table. This foreign key refers to the key ID in the Address table. The 1:n relation is implemented with a foreign key column IDEmployee in the table Travels. This key refers to the column ID in the Employee table. The tables and relations generated by NDO comply with the common design rules for relational databases. This allows mapping the classes to existing databases also following these rules. </P>
<P class=MsoBodyText>While the picture above represents the DataSet description in the .xsd file, NDO generates the DDL code for exactly the same database structure.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{B153BB03-6A55-40D3-B294-61615684A0DE}" Name="queryingthesaveddata1" Title="Querying the saved Data" ContentsTitle="Querying the saved Data" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-04-2007 11:48:57" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{D578490A-5086-476A-9E84-46C7F21FBDE3}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Querying the saved Data</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The objects can be retrieved from the database with the following code:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee));<BR>IList l = q.Execute();<BR>foreach (Employee e in l)<BR>{<BR>&nbsp;&nbsp;&nbsp; Console.WriteLine(e.FirstName + " " + e.LastName + ", " + e.Address.City);<BR>&nbsp;&nbsp;&nbsp; foreach (Travel t in e.Travels)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(" Travel: " + t.Purpose);<BR>}</P>
<P class=MsoBodyText>You receive the following output:</P>
<P class=CodeBase>John Doe, Dreamcity</P>
<P class=CodeBase>&nbsp; Travel: Inhouse-Training</P>
<P class=CodeBase>&nbsp; Travel: TechEd 2006</P>
<P class=CodeBase>Press any key to continue</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory <EM>NDOTravelExpenses-Step 3</EM>.</P>
<P class=MsoBodyText>The next tutorial section covers n:n relations.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C4AF0CEB-4401-4290-910A-D2D8C05CEB99}" Name="nnrelations" Title="n:n Relations" ContentsTitle="n:n Relations" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="14-07-2006 13:02:57" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{4A3F7A4A-E752-48B2-B0D2-5C3AF7FB22FB}" cat="" Title="" rt="0" URL=""/>
        <r t="{F88A3441-8BCC-4516-9824-5B2836E6BE69}" cat="" Title="" rt="0" URL=""/>
        <r t="{C1F0B7DA-2770-4703-BFE2-CD75D477D350}" cat="" Title="" rt="0" URL=""/>
        <r t="{3E790B88-2B8A-406C-8CB7-D67638CD90F2}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>n:n Relations</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>








</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{4A3F7A4A-E752-48B2-B0D2-5C3AF7FB22FB}" Name="creatingthecountryclass" Title="Creating the Country Class" ContentsTitle="Creating the Country Class" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="01-02-2007 14:18:26" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A6DE2B82-424F-40E2-8BA5-82BD7C0F19A5}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Country Class</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Add a new class with the name Country to the traveling expenses accounting project. Insert this code:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using System.Collections; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Country </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string name; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Name </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { name = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel))] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList travels = new ArrayList(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void AddTravel(Travel t) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; travels.Add(t); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void RemoveTravel(Travel t) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (travels.Contains(t)) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; travels.Remove(t); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public IList Travels </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return ArrayList.ReadOnly(travels); } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { travels = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Country() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=CodeBase>// Note: you can use the generic list </P>
<P class=CodeBase>// classes as well if you wish.</P>
<P class=MsoBodyText>Once again you find the common structure of persistent classes here. Please note that the relation to the class Travel is not a composite this time. Hence the Add Accessor function produces&nbsp;different code. Instead of NewTravel() there is a function AddTravel().&nbsp;NDO assumes that the travel object already exists as an independent persistent object. Before calling AddTravel() the travel object has to be made persistent with the PersistenceManager function MakePersistent().</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{F88A3441-8BCC-4516-9824-5B2836E6BE69}" Name="relationtothecountryclassinthetravelclass" Title="Relation to the Country Class in the Travel Class" ContentsTitle="Relation to the Country Class in the Travel Class" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-07-2006 15:05:29" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A6DE2B82-424F-40E2-8BA5-82BD7C0F19A5}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Relation to the Country Class in the Travel Class</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now the Travel class needs a reference to the Country class and a property for public access:</P>
<P class=CodeBase>[NDORelation(typeof(Country))] </P>
<P class=CodeBase>IList countries = new ArrayList(); </P>
<P class=CodeBase></P>
<P class=CodeBase>public void AddCountry(Country l) </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; countries.Add(l); </P>
<P class=CodeBase>} </P>
<P class=CodeBase>public void RemoveCountry(Country l) </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; countries.Remove(l); </P>
<P class=CodeBase>} </P>
<P class=CodeBase>public IList Countries </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return ArrayList.ReadOnly(countries); } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { countries = value; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Again, this is not a composite relation.</P>
<P class=MsoBodyText>Don’t forget to adapt the database with the SQL script after rebuilding the assemblies.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C1F0B7DA-2770-4703-BFE2-CD75D477D350}" Name="creatingtheclientapplication2" Title="Creating the Client Application" ContentsTitle="Creating the Client Application" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-07-2006 15:05:41" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A6DE2B82-424F-40E2-8BA5-82BD7C0F19A5}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Creating the Client Application</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In your client insert the following code:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager(); </P>
<P class=CodeBase>// pm.BuildDatabase(); // Make sure to build the database</P>
<P class=CodeBase></P>
<P class=CodeBase>Country c1 = new Country(); </P>
<P class=CodeBase>c1.Name = "Germany"; </P>
<P class=CodeBase>pm.MakePersistent(c1); </P>
<P class=CodeBase>Country c2 = new Country(); </P>
<P class=CodeBase>c2.Name = "USA"; </P>
<P class=CodeBase>pm.MakePersistent(c2); </P>
<P class=CodeBase></P>
<P class=CodeBase>Employee e = new Employee(); </P>
<P class=CodeBase>e.FirstName = "John"; </P>
<P class=CodeBase>e.LastName = "Doe";&nbsp;&nbsp; </P>
<P class=CodeBase>Travel t = e.NewTravel(); </P>
<P class=CodeBase>t.Purpose = "Inhouse-Training"; </P>
<P class=CodeBase>t.AddCountry(c1); </P>
<P class=CodeBase>t.AddCountry(c2); </P>
<P class=CodeBase></P>
<P class=CodeBase>t = e.NewTravel(); </P>
<P class=CodeBase>t.Purpose = "TechEd 2006"; </P>
<P class=CodeBase>t.AddCountry(c1); </P>
<P class=CodeBase></P>
<P class=CodeBase>Address a = new Address(); </P>
<P class=CodeBase>a.CountryCode = "USA"; </P>
<P class=CodeBase>a.Zip = "CA 12345"; </P>
<P class=CodeBase>a.Street = "10, Wounderway"; </P>
<P class=CodeBase>a.City="Dreamcity"; &lt; DD&gt;&nbsp; </P>
<P class=CodeBase>e.Address = a; &lt; DD &gt;&nbsp;&nbsp; </P>
<P class=CodeBase>pm.MakePersistent(e); </P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoBodyText>Two countries are created, Germany and USA. Please note that the countries are immediately made persistent because they are independent objects. The countries are assigned to the two travels from the last example. The first travel went to Germany and USA, the second to Germany.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{3E790B88-2B8A-406C-8CB7-D67638CD90F2}" Name="playingaroundwithqueries" Title="Playing around with Queries" ContentsTitle="Playing around with Queries" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-04-2007 11:49:38" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A6DE2B82-424F-40E2-8BA5-82BD7C0F19A5}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Playing around with Queries</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>As a first approach you can use the code from the last chapter for querying the data:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee));</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>foreach (Employee e in l)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(e.FirstName + " " + e.LastName + ", " + e.Address.City);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; foreach (Travel t in e.Travels)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(" Travel: " + t.Purpose);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach(Country country in t.Countries)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(" &nbsp;Country:" + country.Name);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>This results in the following output:</P>
<P class=CodeBase>John Doe, Dreamcity</P>
<P class=CodeBase>&nbsp; Travel: Inhouse-Training</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Country:Germany</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Country:USA</P>
<P class=CodeBase>&nbsp; Travel: TechEd 2006</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Country:Germany</P>
<P class=CodeBase>Press any key to continue</P>
<P class=MsoBodyText>But you can also search for countries:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Country));</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>foreach (Country country in l)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(country.Name);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; foreach (Travel t in country.Travels)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(" Travel: " + t.Purpose);</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>This results in the output:</P>
<P class=CodeBase>Germany</P>
<P class=CodeBase>&nbsp; Travel: Inhouse-Training</P>
<P class=CodeBase>&nbsp; Travel: TechEd 2006</P>
<P class=CodeBase>USA</P>
<P class=CodeBase>&nbsp; Travel: Inhouse-Training</P>
<P class=CodeBase>Press any key to continue</P>
<P class=MsoBodyText>Now wouldn’t it be nice to see not only the list of travels but also who attended them? Up to now we did not provide a way to navigate from Travel objects to Employee objects. To make up for it, insert the following code into the Travel class:</P>
<P class=CodeBase>// In the Travel class</P>
<P class=CodeBase>[NDORelation]</P>
<P class=CodeBase>Employee employee;</P>
<P class=CodeBase>public Employee Employee</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return employee; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { employee = value; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Now the relation between the classes Employee and Travel becomes bidirectional. But in contrast to the relation pair between Country and Travel, in this case we have a 1:n relation combined with a 1:1 relation in the opposite direction (or, in other words: a relation with Cardinality n combined with a relation with cardinality 1). Please note that the two relations can share the same foreign key (IDEmployee), residing in the Travel table. That means that you don’t have to adapt the database for this new relation.</P>
<P class=MsoBodyText>Now change the query code like that:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Country));</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>foreach (Country country in l)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(country.Name);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; foreach (Travel t in country.Travels)</P>
<P class=CodeBase>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(" Employee: " + t.Employee.LastName + ", Travel: " + t.Purpose);</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Starting the application results in this output:</P>
<P class=CodeBase>Germany</P>
<P class=CodeBase>&nbsp; Employee: Doe, Travel: Inhouse-Training</P>
<P class=CodeBase>&nbsp; Employee: Doe, Travel: TechEd 2006</P>
<P class=CodeBase>USA</P>
<P class=CodeBase>&nbsp; Employee: Doe, Travel: Inhouse-Training</P>
<P class=CodeBase>Press any key to continue</P>
<P class=MsoBodyText>Now we want to go further into detail. Let’s query all Employees who traveled to USA. For that we create the following query:</P>
<P class=CodeBase>Employee.QueryHelper qh = new Employee.QueryHelper();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), qh.travels.countries.name + " LIKE 'USA'");</P>
<P class=CodeBase>Console.WriteLine(q.GeneratedQuery);</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>foreach(Employee e in l)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(e.FirstName + " " + e.LastName);</P>
<P class=MsoBodyText>This time we use the second parameter of NewQuery() to indicate a condition. The condition is formulated using a QueryHelper object. The nested QueryHelper classes make sure that names used in queries are checked during compilation so name changes do not cause runtime errors. Note that the condition could have been written as a string like that:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), "travels.countries.name LIKE 'USA'");</P>
<P class=MsoBodyText>A detailed description of the QueryHelpers can be found in the chapter <A href="queryhelperclasses.html">QueryHelper Classes</A>. We navigate through the relation chain with the names of the member variables implementing the relations. Finally we reach the class with the persistent field to evaluate in the condition expression. Except for the names given by the QueryHelper classes, the syntax conforms to the WHERE clauses in SQL.</P>
<P class=MsoBodyText>The property GeneratedQuery returns the resulting SQL query that is displayed on the console together with the query result. The output looks like this:</P>
<P class=CodeBase>SELECT [Employee].* FROM [Employee], [Travel], [relCountryTravel], [Country] WHERE</P>
<P class=CodeBase>([Travel].[IDEmployee] = [Employee].[ID] AND [relCountryTravel].[IDTravel] =</P>
<P class=CodeBase>[Travel].[ID] AND [relCountryTravel].[IDCountry] = [Country].[ID]) AND [Country].[Name] LIKE</P>
<P class=CodeBase>'USA'</P>
<P class=CodeBase>John Doe</P>
<P class=CodeBase>Press any key to continue</P>
<P class=MsoBodyText>Such a SQL query is really not the type of code we like to type by hand – NDO makes it very easy to express queries spanning over multiple relations. Note: The SQL code given back by q.GeneratedQuery is a simplified representation of the query. An exact representation of all queries is delivered by the NDO logging capabilities.</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory <EM>NDOTravelExpenses-Step 4</EM>.</P>
<P class=MsoBodyText>The next chapter is about inheritance.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A95CCE4D-9CF5-4846-A541-58209A9E4988}" Name="inheritancewithoutpolymorphy" Title="Inheritance without Polymorphism" ContentsTitle="Inheritance without Polymorphism" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="25-05-2007 13:03:40" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{E3E77222-7B8E-4508-8B33-982183F60B22}" cat="" Title="" rt="0" URL=""/>
        <r t="{0CE2B9BB-179B-464B-80B6-0FCC50C40784}" cat="" Title="" rt="0" URL=""/>
        <r t="{7D1B406F-9E25-470B-8367-FA42D3E7CA39}" cat="" Title="" rt="0" URL=""/>
        <r t="{EB990F72-8E03-4B41-AE5E-0302B1407EF7}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Inheritance without Polymorphy</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Normally inheritance is considered tightly coupled with polymorphy. This is just fine from the view of object oriented programming languages. But in conjunction with object relational mapping polymorphy is an expensive feature. Because of that NDO makes a fine distinction between polymorphic and non-polymorphic inheritance.</P>
<P class=MsoBodyText>What should the latter actually be used for? In most cases non-polymorphic inheritance is used if we have to map tables with a lot of columns or tables with columns containing big BLOBs (binary large objects). Inheritance allows mapping parts of these columns to different classes.</P>
<P class=MsoBodyText>In our example we have a table where bitmaps are stored together with header data. Let’s assume you want to write a user interface with a grid, listing header data for pictures. Now you do not want to load the pictures from all data rows, just because you need to list the header data.</P>
<P class=MsoBodyText>Here is a possible solution that uses inheritance without polymorphy:</P>
<UL>
<UL>
<LI>
<DIV class=C1HBullet>Write a class PictureHeader.</DIV></LI>
<LI>
<DIV class=C1HBullet>Derive the class Picture from PictureHeader. Picture contains the field that can hold the picture.</DIV></LI>
<LI>
<DIV class=C1HBullet>Map Picture and PictureHeader to the same table.</DIV></LI>
<LI>
<DIV class=C1HBullet>Load several PictureHeader objects to fill the grid</DIV></LI>
<LI>
<DIV class=C1HBullet>If a picture is selected, load the picture object using the ObjectId of the PictureHeader object.</DIV></LI></UL></UL>
<P class=MsoBodyText>The sample does not really belong to the problem domain of travel expense accounting. This will not deter us&nbsp;from coding it in the same project.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E3E77222-7B8E-4508-8B33-982183F60B22}" Name="creatingtheclasspictureheader" Title="Creating the Class PictureHeader" ContentsTitle="Creating the Class PictureHeader" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-07-2006 15:06:45" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{CFEDAD17-E450-426D-81DF-BE5A0C0421F4}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Creating the Class PictureHeader</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Add a new class PictureHeader to the project. Insert the following code:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class PictureHeader </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string name; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Name </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { name = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DateTime creationDate; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DateTime CreationDate </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return creationDate; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { creationDate = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PictureHeader() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The class contains the two information items name and creationDate for selecting the pictures.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0CE2B9BB-179B-464B-80B6-0FCC50C40784}" Name="creatingtheclasspicture" Title="Creating the Class Picture" ContentsTitle="Creating the Class Picture" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="01-02-2007 13:11:15" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{CFEDAD17-E450-426D-81DF-BE5A0C0421F4}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Class Picture</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now we add a new class Picture. You’ll find the code below.</P>
<P class=MsoBodyText>The class has a persistent field of type byte[] that holds the picture data and passes it on to the database. Normally pictures are encapsulated in the .NET class System.Drawings.Image. But there is no automatic conversion available for image objects to database fields. We have to take care of the conversion by ourselves.</P>
<P class=MsoBodyText>To the outside the class seems to accept Image objects. But if a picture is assigned to the property Image, it is converted into raw byte data. Vice versa, if someone retrieves the property, the raw byte array is converted to an image. The particular image is stored in the member variable image so that it is converted just once and not for every request. It is marked with the attribute NDOTransient to avoid NDO&nbsp;management of&nbsp;this variable.</P>
<P class=berschr4nichtDTH-Inhalt>Adapting the Mapping File</P>
<P class=MsoBodyText>After building the application the file <I>NDOMapping.xml</I> in the project <B>BusinessClasses</B> needs to be opened. You can do this with the visual mapping tool, available with this button: <IMG src="ImagesExt/image9_12.jpg" border=0></P>
<P class=MsoBodyText>Look for the Class element with the name <B>BusinessClasses.PictureHeader</B>. For this element change the attribute TableName from PictureHeader to Picture (see the Picture below).&nbsp; </P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_13.jpg" border=0></P>
<P class=MsoBodyText>After that, delete the file <I>NDOMapping.xml</I> from the project TestApp (you can do this in the Solution Explorer) and start a rebuild.</P>
<P class=berschr4nichtDTH-Inhalt>Preparing the Database</P>
<P class=MsoBodyText>Each database handles the storing of raw data with another data type. Have a look at your documentation of how a picture can be stored. In Access the type is Oleobject and in Sql Server you can use the data type Image. Which type applies is determined by the NDO provider dll for the database.</P>
<P class=berschr4nichtDTH-Inhalt>The Class Code</P>
<P class=MsoBodyText>Now here is the source code for the class Picture: </P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using System.Drawing; </P>
<P class=CodeBase>using System.Drawing.Imaging; </P>
<P class=CodeBase>using System.IO; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Picture : PictureHeader </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] rawbytes = null; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NDOTransient] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cannot be stored directly</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Image image = null; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Image Image </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rawbytes == null) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;return null; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (image == null) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.IO.MemoryStream ms = new MemoryStream(rawbytes); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image = Image.FromStream(ms); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return image; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image = value; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (image == null) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rawbytes = null; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // horizontal align to 4 bytes </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int horsize = image.Size.Width * 3; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int rest = horsize % 4; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rest &gt; 0) rest = 1; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; horsize = horsize / 4; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; horsize = (horsize + rest) * 4; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int vertsize = image.Size.Height; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rawbytes = new byte[horsize * vertsize + 56]; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.IO.MemoryStream ms = new MemoryStream(rawbytes); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.Save(ms, ImageFormat.Bmp); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Picture() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;} </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{7D1B406F-9E25-470B-8367-FA42D3E7CA39}" Name="storingapicture" Title="Storing a Picture" ContentsTitle="Storing a Picture" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-07-2006 15:07:05" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{CFEDAD17-E450-426D-81DF-BE5A0C0421F4}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Storing a Picture</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>For testing the code we just load a picture from the file system into an image object and assign it to an object of class Picture. Then the picture object is made persistent.</P>
<P class=CodeBase>using System.Drawing;</P>
<P class=CodeBase>...</P>
<P class=CodeBase>Image image = Image.FromFile(@"..\..\..\Building.bmp");</P>
<P class=CodeBase>Picture p = new Picture();</P>
<P class=CodeBase>p.Name = "Our first testpicture";</P>
<P class=CodeBase>p.CreationDate = DateTime.Now.Date;</P>
<P class=CodeBase>p.Image = image;</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>pm.BuildDatabase();</P>
<P class=CodeBase>pm.MakePersistent(p);</P>
<P class=CodeBase>pm.Save();</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{EB990F72-8E03-4B41-AE5E-0302B1407EF7}" Name="queryingheaderandpicturedata" Title="Querying Header and Picture Data" ContentsTitle="Querying Header and Picture Data" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-04-2007 11:50:13" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{CFEDAD17-E450-426D-81DF-BE5A0C0421F4}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Querying Header and Picture Data</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>First we get the Header data:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(PictureHeader), null);</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>foreach (PictureHeader ph in l)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(ph.Name);</P>
<P class=MsoBodyText>You can bind IList directly to a DataGrid for&nbsp;user interface integration. After selecting a PictureHeader object that has the Name ph you get the picture with the following code:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(PictureHeader), null);</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>// Normally we'd show the headers in an UI</P>
<P class=CodeBase>foreach (PictureHeader ph in l)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(ph.Name);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>// Select a PictureHeader and find the corresponding Picture</P>
<P class=CodeBase>Picture p = (Picture) pm.FindObject(typeof(Picture), ((PictureHeader)l[0]).NDOObjectId.Id.Value);</P>
<P class=CodeBase>Image image = p.Image;</P>
<P class=CodeBase>Console.WriteLine("Picture: " + p.Name + ": " + image.Height.ToString() + "x" + image.Width.ToString());</P>
<P class=MsoBodyText>Note that this scenario only works because the two classes PictureHeader and Picture are mapped to the same table.</P>
<P class=MsoBodyText>If you want to map the two classes to different tables, you need polymorphy. The same task could also be solved&nbsp;such that the PictureHeader class holds a relation with cardinality 1 to the Picture class. This approach also ensures that the picture is only loaded if it is really needed.</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory&nbsp; <EM>NDOTravelExpenses-Step 5</EM>.</P>
<P class=MsoBodyText>The next and last tutorial section is about polymorphy.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E718119F-E71C-431F-B85C-0D525523EBD8}" Name="polymorphism" Title="Polymorphism" ContentsTitle="Polymorphism" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="25-05-2007 13:04:12" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <r t="{383B0965-7929-4D43-8E0F-1D5A90215D3A}" cat="" Title="" rt="0" URL=""/>
        <r t="{385E8981-F662-4200-AE03-E162E086B051}" cat="" Title="" rt="0" URL=""/>
        <r t="{C6ECFBC9-DB12-46F6-B3C9-AC7B9BE66E00}" cat="" Title="" rt="0" URL=""/>
        <r t="{40499301-F09D-4B05-A858-F22DAE2E9CB3}" cat="" Title="" rt="0" URL=""/>
        <r t="{96F95DA7-5F68-4971-8600-4058ED63E08B}" cat="" Title="" rt="0" URL=""/>
        <r t="{D80D6EBB-5F7D-430C-A06F-6464A6442FE6}" cat="" Title="" rt="0" URL=""/>
        <r t="{1770BFC2-D76D-4AE9-8761-EDBAF788FF68}" cat="" Title="" rt="0" URL=""/>
        <r t="{ABFEB38D-5612-4439-B7A6-F7F115891BFF}" cat="" Title="" rt="0" URL=""/>
        <r t="{94AD1DF1-BB1B-493E-8C51-D0D9207101CF}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>Polymorphy</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>


















</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{383B0965-7929-4D43-8E0F-1D5A90215D3A}" Name="polymorphismandtypecodes" Title="Polymorphism and Typecodes" ContentsTitle="Polymorphism and Typecodes" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="10-08-2007 10:08:25" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Activating Polymorphism</H3></DIV></DIV></DIV>
<P class=MsoBodyText valign="bottom">In the NDO versions up to 1.2 it was necessary to enable polymorphism in the NDO configuration dialog. This is no longer necessary with NDO 2.0. It was also necessary to enter a type list file name. NDO now creates the type list file automatically, if polymorphic types exist.</P>
<P class=MsoBodyText valign="bottom">If polymorphic types exist, you havt to deploy&nbsp;a type list file together with your application.&nbsp;This&nbsp;is an XML file&nbsp;which assigns an integer&nbsp;value&nbsp;to every polymorphic persistent type used in the project. The&nbsp;integer value is used in the database as a type selector and must not be changed after data are stored in the database.</P>
<P class=MsoBodyText valign="bottom">The type list file must be located in the same directory as the mapping file of an application;&nbsp;in the most cases&nbsp;this is the directory of the executable file. The type list file must be named <I>NDOTypes.xml</I>. Even if you use several mapping files in one directory, you have to use one and only one NDOTypes.xml. If you open different mapping files in different directories using the mappingFile parameter of the PersistenceManager constructor, you have to provide a NDOTypes.xml in each directory containing a mapping file. Your setup program has to transfer the file to the according folders on the end user’s machine.</P>
<H3 class=d2h_main_nstext valign="bottom">Typecodes</H3>
<P class=MsoBodyText valign="bottom">Assume, you have two assemblies&nbsp;containing polymorphic&nbsp;persistent types (AssyA and AssyB) and two applications (AppA and AppB). Let's&nbsp;further assume, that AppA references AssyA and AppB references both AssyA and AssyB. Both applications work against the same database connection. In this case you must make sure, that both applications use the same typecodes. </P>
<P class=MsoBodyText valign="bottom">If you only have one application, you don't have to bother about the type codes. NDO generates a typecode file automatically. But in the above mentioned case NDO will generate two NDOTypes.xml files, one for each application. The typecodes stored in this two files will be used by the two applications&nbsp;in the same database. That means, that the typecodes for the polymorphic types defined in AssyA (which is&nbsp;referenced by both applications) have to be the same in both NDOTypes.xml files. </P>
<P class=MsoBodyText valign="bottom">To ensure, that this is the case, NDO uses a hash algorithm to compute the typecode from the FullName of the persistent class. That way, the type code for a given type is always the same.&nbsp;The NDO developers made sure that the algorithm produces well distributed hash codes in a reasonable amount of time to avoid situations, where two types produce the same hash code.&nbsp;They tested the algorithm with the .NET Framework 2.0 and found, that the 22,175 fully qualified&nbsp;type names didn't produce a single collision. </P>
<P class=MsoBodyText valign="bottom">To get some information about the collision probability,&nbsp;the NDO developers&nbsp;generated additional symbols&nbsp;using the concatination of the type names with all member names of the given type (typeName + '.' + memberName). The resulting 1,274,653 symbols produced 167 collisions, which is about 1 collision per 7,600 symbols. So, why didn't the 22,175 symbols of the .NET types produce some 2-4 collisions? The hash algorithm distributes better, if the symbols don't get too long. With the concatenation, the average string length per generated symbol was 62, while the average length of the full type names in the .NET framework is 44. Having said that, you may expect about 1 collision per 10,000-15,0000 polymorphic types in your system.</P>
<P class=MsoBodyText valign="bottom">If a collision occurs, NDO starts incrementing the computed hashvalue until an unused typecode is found. This means, that in the above mentioned sample NDO might produce two different typecodes for one and the same type in the&nbsp;two typecode files of the two applications,&nbsp;if two polymorphic types&nbsp;residing in two different assembies produce the same hashvalue.</P>
<P class=MsoBodyText valign="bottom">Keep this in mind, because you know: If the probability, that&nbsp;something evil can occur, is very low, it will happen in your project...&nbsp;So, if you have a scenario with several applications using different but overlapping sets of assemblies with polymorphic persistent types and working against the same database, make sure that your typecode files are consistent, which means that they&nbsp;assign always the same type code to&nbsp;a certain&nbsp;type.</P>
<H3 valign="bottom">Importing type codes into the database</H3>
<P class=MsoBodyText valign="bottom">You can import the typecodes into the database. Check the option <EM>Include type codes into the script</EM> in the NDO configuration dialog. NDO creates the Sql statements to create an additional table NDOTypes. It contains the type full name, the typecode and the table name, the type is mapped to. NDO doesn't use the imported type codes. NDO always uses the NDOTypes.xml.</P>
<P class=MsoBodyText valign="bottom">&nbsp;</P>]]></s>
    </Topic>
    <Topic Key="{385E8981-F662-4200-AE03-E162E086B051}" Name="creatingtheclassexpense" Title="Creating the class Expense" ContentsTitle="Creating the class Expense" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:01:25" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the class Expense</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Add a new class to your project with the name Expense. The code for this is:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public abstract class Expense </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DateTime date; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DateTime Date </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return date; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { date = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract string Text </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract decimal Amount </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Expense() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Since the class Expense is abstract, it differs from the classes used so far. Classes derived from an abstract class have to implement the abstract properties. The subclasses inherit the date field (and the corresponding accessor) from the Expense class. The tables the subclasses are mapped to will provide a column to hold that date value.</P>
<P class=MsoBodyText>If you take a look at the schema file <I>TestApp.ndo.xsd</I>, you will notice that there is no table for the class Expense. This makes sense because an abstract class will never have objects so no table in the database is needed.</P>
<P class=MsoBodyText>If you start a build now and review <I>NDOMapping.xml</I> afterwards, you will note that there is a mapping entry for the Expense class; but the string <B>unused</B> is entered for most of the attributes. The reason why there is a mapping entry at all is that subclasses can inherit relations from abstract classes. All subclasses use the same intermediate table for a given relation. The name of the intermediate table is defined in the mapping entry of the base class.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C6ECFBC9-DB12-46F6-B3C9-AC7B9BE66E00}" Name="creatingtheclassesreceiptmileageallowanceandperdiemallowance" Title="Creating the Classes Receipt, MileageAllowance and PerDiemAllowance" ContentsTitle="Creating the Classes Receipt, MileageAllowance and PerDiemAllowance" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:22:54" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Creating the Classes Receipt, MileageAllowance and PerDiemAllowance</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>All three subclasses of Expense follow the same design pattern. They are derived from Expense and implement the abstract properties. Let’s begin with the class Receipt:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Receipt : Expense </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string text; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string ReceiptText </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return text; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { text = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decimal sum; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public decimal Sum </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return sum; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { sum = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Receipt() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override decimal Amount </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return sum; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override string Text </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return text; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The class needs the two properties ReceiptText and Sum for the manipulation of your data – for example in a user interface. They encapsulate the two persistent fields. Furthermore the class inherits the persistent field date. The two properties Amount and Item are needed for the polymorphic specification of costs with items. It seems as if the logic is implemented twice here. But the polymorphic façade of the class consists of read-only-properties, while the specific properties ReceiptText and Sum are also writable.</P>
<P class=MsoBodyText>This is the source of the class MileageAllowance. 40 cents per mile is reimbursed in this simplified business example:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class MileageAllowance : Expense </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int milesDriven; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int MilesDriven </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return milesDriven; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { milesDriven = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public MileageAllowance() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override decimal Amount </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //TODO: call accountant and get correct values ;-) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return (decimal) milesDriven * (decimal) 0.4; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override string Text </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return "Mileage Allowance"; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Note that you could easily implement the class with the reimbursement rate read from the database or a configuration file. The structure and logic of the MileageAllowance class is totally different from&nbsp;the structure and logic of the Receipt class. The class only needs the mileage driven as an integer value.</P>
<P class=MsoBodyText>The class PerDiemAllowance is similar to the MileageAllowance; not only in its structure, but in the simplification of the logic too:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>using NDO; </P>
<P class=CodeBase>namespace BusinessClasses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOPersistent] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class PerDiemAllowance : Expense </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decimal hours; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public decimal Hours </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return hours; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { hours = value; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PerDiemAllowance() </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override decimal Amount </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //TODO: call accountant once more&nbsp; ;-) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hours &lt;= 8) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hours &lt;= 10) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 5; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hours &lt;= 12) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 10; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 20; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase></P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override string Text </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return "Per Diem Allowance"; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{40499301-F09D-4B05-A858-F22DAE2E9CB3}" Name="relationoftraveltoexpense" Title="Relation of Travel to Expense" ContentsTitle="Relation of Travel to Expense" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:30:30" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Relation of Travel to Expense</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Here we are back on well known territory. A 1:n composite relation is created: </P>
<P class=CodeBase>// In the class Travel</P>
<P class=CodeBase>[NDORelation(typeof(Expense), RelationInfo.Composite)] </P>
<P class=CodeBase>IList expenses = new ArrayList(); </P>
<P class=CodeBase>public IList Expenses </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return ArrayList.ReadOnly(expenses); } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set { expenses = value; } </P>
<P class=CodeBase>} </P>
<P class=CodeBase>public void RemoveExpense(Expense ex) </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; if (expenses.Contains(ex)) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expenses.Remove(ex); </P>
<P class=CodeBase>}</P>
<P class=CodeBase>public void AddExpense(Expense ex)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; expenses.Add(ex);</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Maybe you noticed that there is no function NewExpense(). This factory function would not be useful here because we cannot instantiate objects of the type Expense. Rather, we want to create instances of concrete classes like Receipt and MileageAllowance. The problem that arises here is typical for situations with polymorphy involved. This is why we take care of it with a pattern, which can be used in similar situations.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{96F95DA7-5F68-4971-8600-4058ED63E08B}" Name="afactoryforexpenseitems" Title="A Factory for Expense Items" ContentsTitle="A Factory for Expense Items" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="01-02-2007 14:11:02" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>A Factory for Expense Items</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>There are several subclasses of the class Expense in our system. In a real life application the user would select an expense type in the UI before he’d create an expense item. So the UI should provide a list of the expense types to choose from (maybe in a ComboBox); preferably the UI should not know anything about the concrete classes. After a list entry has been chosen we somehow should be able to input the choice into a black box, which creates an object of the right type. Those black boxes are called factories.</P>
<P class=MsoBodyText>If we implement the factory class right, it is the only place in our system in which the knowledge about the available subclasses of the class Expense is stipulated. For each type there exists a description string which can be used to select the type in the UI. The factory class has a property Types which gives us a list containing all those description strings. A description string can be used as a key telling the factory, which object has to be created. (In a multi language system the string is probably a resource name string.) It is passed as a parameter to the factory method NewExpense.</P>
<P class=MsoBodyText>Now let’s see, how the factory is implemented:</P>
<P class=CodeBase>using System; </P>
<P class=CodeBase>namespace BusinessClasses</P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class ExpenseFactory </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] theTypes = new string[]{"Receipt", "Milage Allowance", "Per Diem Allowance"}; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string[] Types </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return theTypes; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Expense NewExpense(string type) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (type) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case "Receipt": </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Receipt(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case "Milage Allowance": </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new MileageAllowance(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case "Per Diem Allowance": </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new PerDiemAllowance (); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default: </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Exception </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (String.Format("Unknown Expense Type: {0}", type)); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Note that this is a very simple implementation of a factory. In real life systems we would probably use .NET Reflection to determine the available subtypes of Expense automatically. With the help of custom attributes we could specify the description strings for the subclasses:</P>
<P class=CodeBase>&nbsp;[NDOPersistent, DescriptionString("Per Diem Allowance")]</P>
<P class=CodeBase>public class PerDiemAllowance {...}</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoBodyText>It should be clear now, why the Travel class does not provide a factory method. We simply follow the design principle of separation of concerns and delegate the task of creating Expense objects to a dedicated class. So the Travel class simply has an AddExpense method.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D80D6EBB-5F7D-430C-A06F-6464A6442FE6}" Name="usingthefactory" Title="Using the Factory" ContentsTitle="Using the Factory" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:40:42" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Using the Factory</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The following code shows, how to work with the factory.</P>
<P class=CodeBase>Employee e = new Employee(); </P>
<P class=CodeBase>e.FirstName = "John"; </P>
<P class=CodeBase>e.LastName = "Becker"; </P>
<P class=CodeBase>Travel t = e.NewTravel(); </P>
<P class=CodeBase>t.Purpose = "NDO Workshop"; </P>
<P class=CodeBase>ExpenseFactory exf = new ExpenseFactory(); </P>
<P class=CodeBase>Console.WriteLine("Suppose we have selected the first entry of the Expense type list in the UI: " + exf.Types[0]); </P>
<P class=CodeBase>Expense ex = exf.NewExpense(exf.Types[0]); </P>
<P class=CodeBase>Console.WriteLine("The new Expense has the type: " + ex.GetType().FullName);</P>
<P class=MsoBodyText>In a console application the scenario seems a little bit quixotic, but in an application with a UI it makes perfect sense. And here comes the next challenge: Somehow the UI must show the right controls to enter the information for the concrete Expense type. Remember that for a Receipt object we have to enter the ReceiptText and the Sum, while for a PerDiemAllowance we have to enter the amount of time the traveller was on the road. We spent some efforts to keep the concrete Expense classes away from the creating context. We don't want to get&nbsp;them back again for the purpose of showing the right UI for the Expenses. But the solution is obvious: We need a factory, which is able to create Views in which we can manipulate the object data.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{1770BFC2-D76D-4AE9-8761-EDBAF788FF68}" Name="generatingdatafortesting" Title="Generating Data for Testing" ContentsTitle="Generating Data for Testing" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-07-2006 15:08:39" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Generating Data for Testing</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now we can generate some test data. Don’t forget to update the database after the build. Let’s generate three cost items to test the Expense classes:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>pm.BuildDatabase();</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Employee e = new Employee();</P>
<P class=CodeBase>e.FirstName = "John";</P>
<P class=CodeBase>e.LastName = "Becker";</P>
<P class=CodeBase>pm.MakePersistent(e);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Travel t = e.NewTravel();</P>
<P class=CodeBase>t.Purpose = "NDO Workshop";</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Receipt ev = new Receipt();</P>
<P class=CodeBase>ev.ReceiptText = "Taxi";</P>
<P class=CodeBase>ev.Sum = 30;</P>
<P class=CodeBase>ev.Date = DateTime.Now.Date;</P>
<P class=CodeBase>t.AddExpense(ev);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>MileageAllowance ma = new MileageAllowance();</P>
<P class=CodeBase>ma.MilesDriven = 200;</P>
<P class=CodeBase>ma.Date = DateTime.Now.Date;</P>
<P class=CodeBase>t.AddExpense(ma);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>PerDiemAllowance pda = new PerDiemAllowance();</P>
<P class=CodeBase>pda.Hours = (decimal)12.5;</P>
<P class=CodeBase>pda.Date = DateTime.Now.Date;</P>
<P class=CodeBase>t.AddExpense(pda);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>pm.Save();</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{ABFEB38D-5612-4439-B7A6-F7F115891BFF}" Name="queringthedata" Title="Querying the data" ContentsTitle="Querying the data" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="08-08-2006 09:55:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Querying the data</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Now we want to list all cost items:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager(); </P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee)); </P>
<P class=CodeBase>Employee e = (Employee) q.ExecuteSingle(); </P>
<P class=CodeBase>Travel t = (Travel) e.Travels[0]; </P>
<P class=CodeBase>Console.WriteLine("Costs of the travel with the purpose " + t.Purpose + ":"); </P>
<P class=CodeBase>foreach(Expense ex in t.Expenses) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Console.WriteLine(ex.Date.ToShortDateString() + " " + ex.Text + " " + ex.Amount.ToString());</P>
<P class=MsoBodyText>The inherited and derived functions of the base class Expense allow us to display the objects of the different classes in the same way.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{94AD1DF1-BB1B-493E-8C51-D0D9207101CF}" Name="unleashingthebusinesslogic" Title="Unleashing the Business Logic" ContentsTitle="Unleashing the Business Logic" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="13-04-2007 11:50:41" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F6EBE7DE-8C6D-4729-80FD-D2B631E34062}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Unleashing the Business Logic</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Suppose there were a business rule stating that the amount of the per diem allowance depends on the income of the employee. How can we implement this rule in our application? We have to add a field income with an associated property to the Employee class.</P>
<P class=MsoBodyText>Now we can simply add the logic into the PerDiemAllowance class:</P>
<P class=CodeBase>if (travel.Employee.Income &gt; 50000)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp; // apply higher rates</P>
<P class=CodeBase>}</P>
<P class=CodeBase>else</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp; // apply lower rates</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>We don't have to worry about how we can retrieve the Employee object this PerDiemAllowance object belongs to. We just write down the business logic of our objects and let NDO do the rest.</P>
<P class=MsoBodyText>This solution is part of the tutorial samples. You can find the tutorial source code in the Tutorial folder beneath your NDO installation folder. The code up to here is placed in the Directory <EM>NDOTravelExpenses-Step 6</EM>.</P>
<P class=berschr4nichtDTH-Inhalt>Next Step</P>
<P class=MsoBodyText>Now it’s your turn: Have fun with writing your own NDO based applications!</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{7CCE3975-EFDD-48CD-8920-4BFE044214AD}" Name="Concepts" Title="Concepts" ContentsTitle="Concepts" Status="In Progress" CreatedOn="11-07-2006 18:27:42" ModifiedOn="14-07-2006 14:53:24" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{565E01AE-8761-47D1-A143-735B0D33C363}">
        <Notes/>
        <r t="{1A86CE48-472B-4AD6-96C0-6EEA7EB99B30}" cat="" Title="" rt="0" URL=""/>
        <r t="{C8BABDEF-652D-4460-901A-FE26327BEE4E}" cat="" Title="" rt="0" URL=""/>
        <r t="{734884AE-34C0-4CAD-B0C2-62F5D22B7987}" cat="" Title="" rt="0" URL=""/>
        <r t="{BD56E54D-CF18-4666-9282-917B385C7D1D}" cat="" Title="" rt="0" URL=""/>
        <r t="{C1ED5BB7-6527-4678-ACA1-3A828ED8BA69}" cat="" Title="" rt="0" URL=""/>
        <r t="{0BFAB05F-38B6-488A-84DB-457471E69F0A}" cat="" Title="" rt="0" URL=""/>
        <r t="{D5BBDD16-A5EF-41B2-A528-0CADE31FCEBC}" cat="" Title="" rt="0" URL=""/>
        <r t="{15F7641D-62FC-4FB1-BE41-8241050A616A}" cat="" Title="" rt="0" URL=""/>
        <r t="{3A25E819-3AE0-4E4E-9ADE-63E0376029A3}" cat="" Title="" rt="0" URL=""/>
        <r t="{0BD01A70-1D46-4703-8873-AAD0C6FD799F}" cat="" Title="" rt="0" URL=""/>
        <r t="{023AACBE-6BD0-4C97-89EA-5943E521B9AB}" cat="" Title="" rt="0" URL=""/>
        <r t="{D316A3D7-7F59-4C9A-8A11-D3D041805B66}" cat="" Title="" rt="0" URL=""/>
        <r t="{5C3C1634-A385-4303-A2DF-95D8B7880DF2}" cat="" Title="" rt="0" URL=""/>
        <r t="{5C27FB2B-7408-4136-BAE2-7CA6019B635F}" cat="" Title="" rt="0" URL=""/>
        <r t="{AC07719D-D273-4797-AFF3-97AF012ADE1E}" cat="" Title="" rt="0" URL=""/>
        <r t="{964874DF-33AE-400F-B098-6B1D75EF2B0D}" cat="" Title="" rt="0" URL=""/>
        <r t="{552415C5-8FAF-4F04-84AC-64FBF3B026BA}" cat="" Title="" rt="0" URL=""/>
        <r t="{8CE69BE4-9E7A-45F2-BBDC-A3F65A84EAA2}" cat="" Title="" rt="0" URL=""/>
        <r t="{214635B8-8227-47F7-B2BF-51280980D471}" cat="" Title="" rt="0" URL=""/>
        <r t="{05F1B4AB-F06C-4573-95A2-3C14279B95D5}" cat="" Title="" rt="0" URL=""/>
        <r t="{F1B3AF6D-02E1-47AF-BC08-7288E00B2FC4}" cat="" Title="" rt="0" URL=""/>
        <r t="{25288E74-AEFA-4841-83A7-2237DDACEAF4}" cat="" Title="" rt="0" URL=""/>
        <r t="{C211EF2B-A518-4EB7-97E6-36EFA8FA4C77}" cat="" Title="" rt="0" URL=""/>
        <r t="{F8DC8A75-32F0-43A1-93A1-4743420F2ADE}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator></DIV></DIV></DIV>
<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H1>Concepts</H1></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<P class=MsoBodyText>This&nbsp;section describes all the different tools and technologies in NDO in detail. We encourage you to read this section entirely, as it enables you to make the most out of using NDO.</P></DIV></DIV></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{1A86CE48-472B-4AD6-96C0-6EEA7EB99B30}" Name="whatisndo" Title="What is NDO?" ContentsTitle="What is NDO?" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:45:36" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>What is NDO?</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO is a development tool for object relational mapping (OR-Mapping) on the Microsoft .NET platform. It is based completely on ADO.NET. With the help of NDO, persistent classes can be created. Their instances are stored transparently in a relational database; no special code is needed for that. All persistence functionality is created by an Enhancer after compilation in the target assembly. The Enhancer works both as an Add-In for Visual Studio .NET 2003 and 2005 and as a stand-alone application for automated builds.</P>
<P class=MsoBodyText>A mapping file in XML format defines the mapping of classes to database tables and fields to database columns. By changing this file you can adapt the mapping without recompilation. If a new assembly is created, the Enhancer creates a new mapping file with entries complying with certain naming standards. This file can be easily aligned to the actual requirements of your target database.</P>
<P class=MsoBodyText>NDO shows some similarities to the JDO standard in the Java world. But there are major differences too. NDO is kept much simpler than the JDO standard. This is partly because of the powerful ADO.NET functionality below NDO. There is no need to implement things like transaction management in the NDO layer. Another difference is the use of .NET custom attributes, which allow easy and efficient control of the persistence behavior in any .NET language.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C8BABDEF-652D-4460-901A-FE26327BEE4E}" Name="anexample" Title="An Example" ContentsTitle="An Example" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:46:11" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{0FB5CC69-6E64-4FEE-A8B8-954D939EE1F4}" cat="" Title="" rt="0" URL=""/>
        <r t="{87D9AD44-46DA-4602-8572-B0CD1AD9B4BC}" cat="" Title="" rt="0" URL=""/>
        <r t="{DF5DAAFC-E2EB-414D-8E7C-B7112661A999}" cat="" Title="" rt="0" URL=""/>
        <r t="{A6C46484-BCB1-4FD7-9997-BA5EC6D567A6}" cat="" Title="" rt="0" URL=""/>
        <r t="{F908E9C6-DD33-4EE5-8A31-31FDEFC7FA57}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>An Example</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The example in the tutorial models the simplified core of a typical business applicatoin, a travel expense accounting system. It’s a good example to show the adavantages of using objects and an O/R Mapping solution like NDO.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0FB5CC69-6E64-4FEE-A8B8-954D939EE1F4}" Name="atravelexpenseaccountingsystem" Title="A Travel Expense Accounting System" ContentsTitle="A Travel Expense Accounting System" Status="In Progress" CreatedOn="06-07-2006 18:40:12" ModifiedOn="30-01-2007 17:48:58" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>A Travel Expense Accounting System</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Suppose your company had some employees traveling around the world to do their business.&nbsp;While traveling they produce all kinds of expenditures for which they would like to get reimbursed from the company. But--as you might know-- the gods have put the travel expense report between the production of&nbsp;expenses and their reimbursement.</P>
<P class=MsoBodyText>Basically a travel expense report is just a list of&nbsp;items with a sum at the bottom, which represents the total return requested. On the surface (façade) an expense is some text and a date combined with an amount of money. Behind this surface there are several kinds of expenses, all with their own logic. In the case of&nbsp;a mileage allowance, the costs are calculated by the number of kilometers multiplied with a rate per kilometer or mile. If you bought a flight ticket, the user requests the actual ticket costs. In the case of&nbsp;a PerDiemAllowance the user enters the hours he has been on the road on a certain day. That’s a classical polymorphic scenario.</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_15.jpg" border=0></P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{87D9AD44-46DA-4602-8572-B0CD1AD9B4BC}" Name="howtoimplementabusinessrule" Title="How to implement a Business Rule?" ContentsTitle="How to implement a Business Rule?" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="30-01-2007 17:54:20" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>How to implement a Business Rule?</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>For now the model is only static. Business rules bring life into it. A business rule could be »The amount of the per diem allowance depends on the employee’s salary«. To implement this business rule, we need a navigation path from the class PerDiemAllowance to the class Employee. We will hear more about these navigation paths in a moment.</P>
<P class=MsoBodyText>How do we implement such business rules? The best way, we think, is to use objects. With the classes in our system we build a kind of domain language, which we can use to state business rules in a formal way, so that a computer system can understand it. But not only should the computer understand our intents, we as developers should be able to understand our own intents, after some time has passed. The following peace of code is easy to read. We can easily understand the intents behind it:</P>
<P class=CodeBase>if this.Travel.Employee.Salary &gt; 50000</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; return hoursOnRoad * .6;</P>
<P class=CodeBase>else</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; return hoursOnRoad * .4;</P>
<P class=MsoBodyText>Furthermore the code resides in the class PerDiemAllowance, just the place where you would look for it. If we use a data-driven approach with data sets or XML nodes, the question is: where to put the logic of the application? Classes are a natural way of keeping our code well organized.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{DF5DAAFC-E2EB-414D-8E7C-B7112661A999}" Name="problemswithobjectsystems" Title="Problems with Object Systems" ContentsTitle="Problems with Object Systems" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:24:52" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Problems with Object Systems</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>If you analyze your software system you will find various classes. And while you formulate the business rules more and more navigation paths are created between the classes. This is shown in the following picture:</P>
<P class=MsoBodyText><IMG alt="" src="ImagesExt\image9_16.png" border=0></P>
<P class=MsoBodyText>Actually each of these navigation paths represents a query – a consideration about how you get hold of the objects that belong to a certain relation. For example if you have an Employee object and want to navigate to the travels of that employee you have to fetch the travel data from the database and construct travel objects from it. Even worse, the number of queries increases exponentially with the complexity of your system. </P>
<P class=MsoBodyText>Now, how should we store such object systems? As we know, Microsoft believes in all things which have rows and columns. In former days we had ODBC, OleDb, ADO, now we have ADO.NET.</P>
<P class=MsoBodyText>With that kind of stuff it is difficult to implement relations between objects. If we don’t care, the code of our business classes gets crowded with persistence code, just to fetch child objects of a relation. So we are not able to read the business rules as easily as we want to. </P>
<P class=MsoBodyText>A first approach to a solution of that problem is to write Data Access Layers. Thus we can isolate the query code and keep it out of our business classes. But the main disadvantages remain in our system. We need lots of code to build our data layer. We still have to solve the problem of building our objects out of mere data over and over again.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A6C46484-BCB1-4FD7-9997-BA5EC6D567A6}" Name="transparentobjectpersistence" Title="Transparent Object Persistence" ContentsTitle="Transparent Object Persistence" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:25:49" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Transparent Object Persistence</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>At this point transparent object persistence comes into play. It allows storing the status of objects and the relations between them. You don't need any code to reload the objects. It happens automatically and is invisible. That’s why it is called <I>transparent persistence</I>.</P>
<P class=MsoBodyText>The concept has existed&nbsp;for a while now. But it has reached new dimensions with the intermediate code technologies in .NET and Java. <I>Enhancers</I> add additional functionality to the generated components. This allows a persistence system to keep track of all access to our persistent objects. For example, if a variable holding a relation is »touched« by the code, the data will be loaded automatically if it is not yet there. If a persistent field is changed, the object can be marked as PersistentDirty to make sure it will be written to the database during the next save.</P>
<P class=MsoBodyText>The term »transparent« is intentionally used instead of »invisible«. There are aspects of persistence which need to be visible, for example the search for objects according to certain criteria or transaction management.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{F908E9C6-DD33-4EE5-8A31-31FDEFC7FA57}" Name="conclusion" Title="Conclusion" ContentsTitle="Conclusion" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 11:53:27" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{68EA9F1D-3DD7-45A7-81E3-12F3D3EED91E}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Conclusion </H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>As seen above higher complexity causes an exponential increase of navigation paths. They in turn increase the development costs for software. This is one of the causes which make software development so expensive (red curve):</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_17.png" border=0></P>
<P class=MsoBodyText>An object oriented approach with careful analysis in combination with transparent object persistence based on NDO makes vast amounts of code unnecessary and helps to realize the green curve. Its logarithmic form is much more favorable, the increased effort in the beginning of a project pays back very fast. Examples of other valuable practices helping to realize the green curve are requirements management, source code control and unit testing.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{734884AE-34C0-4CAD-B0C2-62F5D22B7987}" Name="architecture" Title="Architecture" ContentsTitle="Architecture" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 16:36:51" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Architecture</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The NDO architecture is completely transparent. It's not visible&nbsp;to the developer that the NDO classes are persistent. The only sign is the persistence attribute.</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class employee</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string first_name;&nbsp; // persistent field</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string last_name; // persistent field</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ....</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>But your application needs some central point which you can use to save or retrieve objects and manage the persistence concerns. The class PersistenceManager is responsible for all these activities. It is the most important of the few NDO classes you need to know. The Persistence-Manager communicates with a persistence handler which basically encapsulates a data adapter. There is one standard Persistence-Handler for all persistent classes and one for all intermediate tables that might be necessary in conjunction with relations.</P>
<P class=MsoBodyText>If you have some experience with ADO.NET, you can also write your own Persistence Handler. Such a handler must implement the IPersistenceHandler interface. Furthermore an implementation of IMappingTableHandler is needed to read and write relation table entries.</P>
<P class=MsoBodyText>The persistence handler uses a NDO Provider to instantiate concrete implementations of DbDataAdapter, IDbCommand, IDbConnection, and so on. It connects NDO with a specific ADO.NET provider. It is very easy to write a NDO Provider for a certain database product. NDO ships providers for Sql Server*, Oracle*, Access*, Firebird*, and MySql*. (* These product names are registered trademarks of their respective owners.)</P>
<P class=MsoBodyText>You can find the source code of some of our providers in the download section of our web site&nbsp;(<EM><A href="http://www.netdataobjects.com/Links/Download">http://www.netdataobjects.com/Links/Download</A></EM><I><A href="http://www.netdataobjects.com/download" target=_blank></A></I>).</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_18.png" border=0></P>
<P class=MsoCaption>Picture 1: The application code communicates via the persistence manager with the persistence layer</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{BD56E54D-CF18-4666-9282-917B385C7D1D}" Name="thendotoolbar" Title="The NDO Toolbar" ContentsTitle="The NDO Toolbar" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="25-05-2007 13:29:07" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>The NDO Toolbar</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>After successful installation of NDO you find a new toolbar in Visual Studio. It opens the Enhancer configuration, generates context dependent C# or VB Code and opens the mapping properties.</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_2.png" border=0></P>
<P class=MsoCaption>Picture 1: The NDO toolbar</P>
<P class=MsoBodyText>From left to right, the toolbar contains the following commands:</P>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Enhancer Configuration</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Opens the Enhancer Configuration dialog. For details see the Chapter <A href="theenhancerconfigurationdialog.html">The Enhancer Configuration Dialog.</A></P></TD></TR>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Add Relation</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Opens a wizard to generate a relation to another class.</P></TD></TR>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Add Accessor Property</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Adds an accessor property for the variable declaration the cursor is located on. </P></TD></TR>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Persistent class</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Creates a new persistent class.</P></TD></TR>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Mapping Tool</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Opens the mapping tool for the active Project.</P></TD></TR>
<TR>
<TD vAlign=top width=223>
<P class=MsoBodyText><B>Class Generator</B></P></TD>
<TD vAlign=top width=220>
<P class=MsoBodyText>Opens the NDO Class Generator, which helps in producing class systems from existing databases.</P></TD></TR></TBODY></TABLE></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C1ED5BB7-6527-4678-ACA1-3A828ED8BA69}" Name="thendocomponents" Title="The NDO Components" ContentsTitle="The NDO Components" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="08-08-2006 11:23:07" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<h2>The NDO Components</h2>
    <p class="MsoBodyText" valign="bottom">NDO is made up of two
    components:</p>
	<div style="MARGIN-LEFT: 2em">
    <ul>
        <li>
            <div class="C1HBullet" valign="bottom">
                The Enhancer
            </div>
        </li>
        <li>
            <div class="C1HBullet" valign="bottom">
                The NDO Framework
            </div>
        </li>
    </ul>
    </div>
    <p class="MsoBodyText" valign="bottom">The enhancer adds additional code to
    your assembly providing additional functionality. After that all persistent
    classes implement a new Interface IPersistenceCapable . The framework holds
    all the classes and attributes necessary for managing persistence
    concerns.</p>
    ]]></s>
    </Topic>
    <Topic Key="{0BFAB05F-38B6-488A-84DB-457471E69F0A}" Name="theenhancer" Title="The Enhancer" ContentsTitle="The Enhancer" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 12:18:05" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{AA1BDEEF-EBCD-4225-AD6F-29A0A2EC687D}" cat="" Title="" rt="0" URL=""/>
        <r t="{90EB6B22-92B1-450F-B69B-6EA13347A699}" cat="" Title="" rt="0" URL=""/>
        <r t="{EA447247-AD07-441D-B802-5CD280ED0DC9}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>The Enhancer</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The Enhancer converts your existing assembly to a new one with additional elements. </P>






</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{AA1BDEEF-EBCD-4225-AD6F-29A0A2EC687D}" Name="mappingfileandschemafile" Title="Mapping file and schema file" ContentsTitle="Mapping file and schema file" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="25-05-2007 14:03:23" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{713B6B8D-6B52-4CA6-A422-A7E550612B45}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Mapping file and schema file</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The Enhancer creates a mapping file, a SQL script, and an Xsd schema (see picture 1).</P>
<P class=MsoBodyText>The mapping file is stored in the source directory of your assembly and is integrated into the Visual Studio project where you can directly edit it. After compilation and enhancement the file is copied to the exe directory of the assembly, which is typically <I>bin\debug</I> or <I>bin\release</I>.</P>
<P class=MsoBodyText>The schema is created as an XSD file in a format that allows using it as an ADO.NET DataSet. The schema's filename always consists of the assembly name and the extension '<EM>.ndo.xsd'</EM>. It is stored in the executable directory of the assembly, which is typically bin\debug or bin\release.</P>
<P class=MsoBodyText>The sql script generator uses the sql dialect of the NDO Provider chosen in the NDO configuration dialog. The script file is located in the executable directory of the assembly.&nbsp;NDO generates&nbsp;difference scripts too, allowing the change of existing databases according to changes of your classes.</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_19.jpg" border=0></P>
<P class=MsoCaption>Picture 1: Information flow in the Enhancer</P>
<P class=MsoBodyText>If your assembly contains references to another assembly that itself includes persistent classes, the Enhancer combines the information from this base assembly and your new assembly. In this case the mapping and the schema files contain information&nbsp;about the classes of both assemblies.</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_20.jpg" border=0></P>
<P class=MsoCaption>Picture 2: Information flow for more than one assembly</P>
<P class=MsoBodyText>This method ensures that the files <I>NDOMapping.xml</I> and <I>&lt;Assemblyname&gt;.ndo.xsd</I> are created in the <I>exe</I> directory of the application assembly.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{90EB6B22-92B1-450F-B69B-6EA13347A699}" Name="theenhancerconfigurationdialog" Title="The Enhancer Configuration Dialog" ContentsTitle="The Enhancer Configuration Dialog" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="25-05-2007 13:57:47" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{713B6B8D-6B52-4CA6-A422-A7E550612B45}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>The Enhancer Configuration Dialog</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Using the NDO Configuration button <IMG src="ImagesExt/image9_6.png" border=0>&nbsp;in the NDO toolbar, the NDO configuration dialog field is opened:</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_7.png" border=0></P>
<P class=MsoCaption>Picture 1: Enhancer configuration for assemblies with persistent classes</P>
<P class=MsoBodyText>Please note: If the option <B>Generate new mapping file</B> is selected, the enhancer recreates the file from scratch at every build, discarding any changes previously made to the file. This setting is useful in the beginning of the development phase, when the most changes in the business classes and their relations occur. You can also use this setting, if you decide to&nbsp;control the mapping entries in your source code using the attributes in NDO.Mapping.Attributes.</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_8.png" border=0></P>
<P class=MsoCaption>Picture 2: Configuration for applications having references to assemblies with persistent classes.</P>
<P class=MsoBodyText><B>The Dialog Elements explained</B></P>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Activate NDO AddIn</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Activates the NDO AddIn if selected. Per default this option is unchecked. If the option is unchecked, NDO doesn't anything during the build of the given project.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Activate Enhancer</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Activates the Enhancer if selected. To accelerate compilation&nbsp;leave this option unchecked if you are creating an assembly that uses persistent classes but does not contain persistent classes itself.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Add-in Verbose Mode</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>If this&nbsp;option is checked the enhancer produces more output which might be useful for diagnostic purposes.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Always generate a new Mapping File</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>If this&nbsp;option is checked the mapping information is completely recreated. Any hand coded table- or field names are lost. This option should not be used if you have imported the structure of an existing database using the Class Generator.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Owner / Schema Name</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Enter a name, if you have to use qualified tablenames in your database like shopUser.Product. Useful for Oracle users.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Generate&nbsp;Time Stamp Columns for each Class</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>This option adds an additional column NDOTimeStamp to each table in the mapping file. The time stamps are Guids that allow recognizing collisions. The NDOTimeStamp-columns can also be created individually for each class with the help of the TimeStampColumn attribute. Please refer to the chapter <A href="collisiondetection.html">Collision Detection</A>&nbsp; for details.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Generate Change Events with Add Accessor</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>With this option selected an event is generated in the Set-Property section if an accessor property is created. This event is needed for data binding. It signals that the object content has changed.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Generate SQL Script</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>If selected, a SQL script in the selected dialect is generated. This script allows creating a database which is compatible to the current mapping file.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Sql Dialect</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Selects&nbsp;the NDO provider&nbsp;to produce the&nbsp;SQL script&nbsp;code.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>UTF-8 Encoding</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>If selected, the SQL script is UTF-8 encoded. This is recommended with the most databases. If you use BuildDatabase to build the database structure, you should&nbsp;choose the UTF-8 encoding, since the translation from Unicode to the database specific character sets is done by the ADO.NET provider in this case.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Default Encoding</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>The SQL script will be encoded using the current ANSI code page.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Include Typecodes in the script</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>The SQL script will contain statements to create an additional&nbsp;table <EM>NDOTypes</EM>, containing the typecodes of&nbsp;polymorphic types. NDO doesn't use this information, it is only provided for the user's convenience.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Schema Version</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>All changes to a database structure are collected in a SQL script, which can be used to change the database without losing data. The naming convention for the script is <I>AssemblyName</I>.<I>SchemaVersion</I>.ndodiff.sql. In this edit field you can provide the SchemaVersion part of the file name. This information is also written to the mapping file. This allows to determine the currently installed version of a mapping schema and to perform an automated upgrade to the newest schema version.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Default Connection String (...)</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Opens a database connection dialog. The OleDb connection dialog is used for SQL Server, Oracle and Access. But that does not mean, that NDO uses OleDb connections. NDO always uses the ADO.NET providers except in the case of Access which can only be accessed with the OleDb Jet Provider.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>New</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>After selecting the SQL dialect a new database can be created. The connection string to the new database is entered as default connection string into the edit filed. Since the Oracle does not know the concept of databases this option is not available for Oracle databases and new schema areas must be defined in the Enterprise manager.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Preset for Library</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Sets all options to default values that are most commonly used for creating an assembly with persistent classes.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Preset for Application</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>Sets all options to default values that are most commonly used for creating an application with persistent classes.</P></TD></TR>
<TR>
<TD vAlign=top width=153>
<P class=MsoBodyText><B>Save as ...</B></P></TD>
<TD vAlign=top width=290>
<P class=MsoBodyText>The current configuration is stored in an Xml file. This file can be used in the command line version of the enhancer (see next chapter for details). Note that NDO always creates an Xml file called <I>VSProjectName.ndoproj</I>.</P></TD></TR></TBODY></TABLE></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{EA447247-AD07-441D-B802-5CD280ED0DC9}" Name="thecommandlineenhancer" Title="The Command Line Enhancer" ContentsTitle="The Command Line Enhancer" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="25-05-2007 14:04:46" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{713B6B8D-6B52-4CA6-A422-A7E550612B45}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>The Command Line Enhancer</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The enhancer is also available as an application for an automatic build outside the Visual Studio environment. The functionality is the same as with the Visual Studio add-in.&nbsp;The command line version expects one parameter, pointing to a NDO project file. These files are produced automatically if the Enhancer is activated or can be stored manually under a name and path of your choice using the <STRONG>Save as…</STRONG> button in the NDO configuration dialog. The project files are Xml files, which you can easily adapt using a text editor or an automated tool. </P>
<P class=MsoBodyText>Note: All paths in the NDO project file are stored relative to the project directory of your assembly to make sure that your projects can be moved into other directories. This does not apply to paths, which are part of the <I>DefaultConnectionString</I> entry. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D5BBDD16-A5EF-41B2-A528-0CADE31FCEBC}" Name="objectsandobjectidentity" Title="Objects and Object Identity" ContentsTitle="Objects and Object Identity" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="15-04-2007 18:46:24" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Objects and Object Identity</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=Formatvorlageberschr3nichtDTH-Inhalt>Overview</P>
<P class=MsoBodyText>The identity of objects is a very important matter in OO systems and all the more in object persistence systems. So it’s worth&nbsp;elaborating on this for a short while.</P>
<P class=berschr4nichtDTH-Inhalt>Identity of Objects</P>
<P class=MsoBodyText>Each object oriented software development system needs to determine if two object references indicate the same object. (This is not to be confused with the test for identity as with the Equals() function in .NET.) C++ or .NET and many other implementations use pointer comparison for this task. In these systems the pointer (which is mostly equivalent to the object’s memory address) is an unambiguous object id. </P>
<P class=Formatvorlageberschr3nichtDTH-Inhalt>Identity in Databases</P>
<P class=MsoBodyText>A similar situation occurs when we’re working with relational databases. There are relationships between rows in different tables. For these relations to be consistent, each table participating in the relationship needs a column with a unique value (often called Primary Key Column) so that different rows of the table can be distinguished. This value is called the <I>database identity</I>.</P>
<P class=berschr4nichtDTH-Inhalt>Identity of persistent Objects</P>
<P class=MsoBodyText>The identity of persistent objects cannot be based on memory addresses. Persistent objects survive the generating processes and are recreated (possibly on another machine) by new processes with the help of information stored in a database. The objects reside at totally different memory positions after reloading. Furthermore different instances of the same project can exist in different processes or on different machines. NDO even makes it possible to have several persistence managers in a single application domain, each of them managing its own instance of the same persistent object.</P>
<P class=berschr4nichtDTH-Inhalt>The ObjectId in NDO</P>
<P class=MsoBodyText>To cope with that NDO works with an <I>ObjectId </I>class. Ideally the ObjectId encapsulates a value that is equivalent to the database Id. Often database Ids are 32 bit integer values, but strings and Guids can be used as well. The NDO ObjectId class encapsulates these data types with the help of the classes StringKey, Int32Key, and GuidKey. Per default NDO tries to use autonumbered integer ids generated by the database. </P>
<P class=MsoBodyText>While autonumbered ids are very handy, they have some drawbacks compared with client generated ids. So you might decide to use client generated ids.</P>
<P class=berschr4nichtDTH-Inhalt>Client Generated ObjectIds</P>
<P class=MsoBodyText>There are certain situations where Client Generated ObjectIds make sense. Suppose you had a class Topic, such that each Topic could have Subtopics of the same type. Suppose further, you want to create subtrees of that Topic tree and make the subtrees persistent. With autonumbered ids you have to store each level of the tree in its own transaction. You’d need a lot of code to manage that. With client generated ids you can store the whole tree in one transaction.</P>
<P class=MsoBodyText>Note that there are databases, which don’t support autonumbered ids, like Oracle or Firebird. In these cases you have to use client generated ids.</P>
<P class=MsoBodyText>The easiest way to&nbsp;implement a client generated id is to use the NDOOidType attribute:</P>
<P class=CodeBase>[NDOPersistent, NDOOidType(typeof(Guid))] </P>
<P class=CodeBase>public class Employee </P>
<P class=CodeBase>{...}</P>
<P class=MsoBodyText>NDO uses Guid ids for this class and generates the ids for you. It is possible to assign this attribute to all persistent classes in an assembly. Just write the following line into the assemblyinfo.cs:</P>
<P class=CodeBase>[assembly: NDOOidType(typeof(Guid))];</P>
<P class=MsoBodyText>Note that in this case you need using declarations for the <I>System</I> and <I>NDO</I> namespaces in the assemblyinfo.cs.</P>
<P class=MsoBodyText>There are cases where the application should generate the id by itself. In that case you can use the IdGenerationEvent of the PersistenceManager:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>pm.IdGenerationEvent += new IdGenerationHandler(this.OnNewId);</P>
<P class=CodeBase>...</P>
<P class=CodeBase>private OnNewId(Type t, ObjectId oid)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ((Int32Key)oid.Id).Key = GetNewKeyFromSequence(); </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>The parameter t makes it possible to use different key sources for different types.</P>
<P class=MsoBodyText>In some cases, the key values have to do with the business logic and therefore have to be coded in the class.</P>
<P class=MsoBodyText>Then you have the possibility to map fields of your class to the ObjectId. Just declare a private persistent variable of an applicable type. NDO supports&nbsp;four data types:</P>
<P class=CodeBase>System.Int64 </P>
<P class=CodeBase>System.Int32 </P>
<P class=CodeBase>System.String </P>
<P class=CodeBase>System.Guid </P>
<P class=MsoBodyText>Guids are stored as string values if a database does not provide a Guid column type.</P>
<P class=MsoBodyText>If the id should be mapped to a field, the name of the field should be entered in the FieldName attribute of the oid entry. You can force the Enhancer to create the FieldName entry automatically with the help of the NDOObjectID attribute:</P>
<P class=CodeBase>[NDOPersistent]<BR>class Test <BR>{&nbsp;<BR>&nbsp;&nbsp;&nbsp; [NDOObjectId]&nbsp;<BR>&nbsp;&nbsp;&nbsp; string id; // mapped to oid&nbsp;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; // ordinary persistent field&nbsp;<BR>&nbsp;&nbsp;&nbsp; string ordinaryPersistentField;&nbsp; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ... <BR>}</P>
<P class=MsoBodyText><STRONG>Important Note:</STRONG> The NDO developers recommend using the Guid id type for all classes in new projects.</P>
<P class=berschr4nichtDTH-Inhalt>Concurrency</P>
<P class=MsoBodyText>NDO makes sure that only one instance of a certain object lives in one PersistenceManager even if you query for it several times with different queries. But you should be aware that concurrent access to the same object can occur if it is used in different processes or on different machines. </P>
<P class=MsoBodyText>Since NDO is based on ADO.NET, record locking is not supported by NDO. In ADO.NET the data is read from the database into an in-memory cache called DataSet. All changes take place in this cache; the data are not written back to the database before the next update. NDO initiates the update if the Save() function of the PersistenceManager is called.</P>
<P class=MsoBodyText>NDO has a mechanism for avoiding access collisions that is based on TimeStamp-Guids. The next chapter&nbsp;covers this in detail.</P>
<P class=MsoBodyText>&nbsp;</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{15F7641D-62FC-4FB1-BE41-8241050A616A}" Name="collisiondetection" Title="Collision Detection" ContentsTitle="Collision Detection" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:16:30" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{A48825B1-305F-4C86-A80F-1C95A920B4FE}" cat="" Title="" rt="0" URL=""/>
        <r t="{972D3897-F36C-4655-8DD9-F91B178EF515}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Collision Detection</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO comes with a mechanism for detecting collisions. To use it, all you need is an additional column in the tables for which you want to establish collision detection. The column must be able to hold a Guid.</P>
<P class=MsoBodyText>All you have to do is to set the property <I>TimeStampColumn</I> in your mapping information to a name of your choice. NDO creates a Guid column for you.</P>
<P class=MsoBodyText>Along with every write operation NDO generates a new Guid and stores it in the Time Stamp Column. When reading an object, NDO reads the value of the column and uses it at the next save. NDO adds a where-clause to the update or delete command which makes sure that the Time Stamp Column remained the same in the mean time. If there occurred a concurrent change in the mean time, the value is no&nbsp;longer the same and the write operation fails, giving the developer the opportunity to react.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A48825B1-305F-4C86-A80F-1C95A920B4FE}" Name="reactingtoacollision" Title="Reacting to a Collision" ContentsTitle="Reacting to a Collision" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 11:54:27" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{50681DFD-9AE9-46AE-8E8A-3766AAA434C9}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Reacting to a Collision </H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>If a collision is detected, NDO does not store the data row in the database. Instead the PersistenceManager tries to trigger a CollisionEvent. An NDO Exception is thrown if no event handler is registered. To handle the collision event you should cancel the transaction with the function PersistenceManager.Abort(). You can then duplicate the object as a transient object (or otherwise save the object state) and load the changed state from the database. These two object versions can be displayed to the user who is then able to decide which version he wants to store in another transaction.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{972D3897-F36C-4655-8DD9-F91B178EF515}" Name="collisiondetectionasdefault" Title="Collision Detection as Default" ContentsTitle="Collision Detection as Default" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 11:54:38" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{50681DFD-9AE9-46AE-8E8A-3766AAA434C9}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Collision Detection as Default</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>If you select the option <B>Use Time Stamps</B> in the Enhancer configuration, a Time Stamp Column with the name <I>NDOTimeStamp</I> is automatically assigned to every class defined in the mapping file. This column is also included in the schema file and in the SQL scripts that generate a database.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{3A25E819-3AE0-4E4E-9ADE-63E0376029A3}" Name="objectstatesandlifecycle" Title="Object States and Life Cycle" ContentsTitle="Object States and Life Cycle" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:20:42" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Object States and Life Cycle</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Objects of persistent classes can either be transient or persistent. While being transient they behave just like normal .NET objects. An object is made persistent with the PersistenceManager function MakePersistent() and can be saved and restored afterwards. Calling MakeTransient() removes a persistent object from the management of the PersistenceManager.</P>
<P class=MsoBodyText>While managed by the PersistenceManager an object can have one of the following states: <IMG src="ImagesExt/image9_23.png" border=0></P>
<P class=MsoBodyText>&nbsp;</P>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>Transient</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Objects are transient after creation with new.</P></TD></TR>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>Created</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Objects are created after MakePersistent() was called. After that call objects are managed by NDO. But they are not being written to the database before Save() is called.</P></TD></TR>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>Persistent</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Objects are in this state if they have a presentation in the database and have not been altered.</P></TD></TR>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>Deleted</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Objects are in this state after Delete() was called. Save() finally deletes the objects from the database.</P></TD></TR>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>PersistentDirty</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Such objects have a presentation in the database and have been changed in memory so that a write operation to the database is necessary.</P></TD></TR>
<TR>
<TD vAlign=top width=96>
<P class=MsoBodyText>Hollow</P></TD>
<TD vAlign=top width=347>
<P class=MsoBodyText>Objects are in this state if only the ObjectId was loaded from the database into memory. The object data are not loaded before the first access to one of its persistent fields. If a PersistenceManager is operated in HollowMode, all objects are transferred into Hollow state after a transaction has been ended with Abort() or Save().</P></TD></TR></TBODY></TABLE>
<P class=MsoBodyText>&nbsp;</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0BD01A70-1D46-4703-8873-AAD0C6FD799F}" Name="hollowobjectsandprefetches" Title="Hollow Objects and Prefetches" ContentsTitle="Hollow Objects and Prefetches" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:17:34" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{14BE5634-CDE6-44B5-B1A8-B113CDC77758}" cat="" Title="" rt="0" URL=""/>
        <r t="{642A6959-4BC2-460D-A6FD-383EEC02DF90}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Hollow Objects and Prefetches</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In a fully transparent persistence system you have to be able to access any of your objects at any time without writing the code for loading it. To implement this effectively NDO works with the concept of hollow objects. These objects consist of the ObjectId only and don’t have data or child objects. If a field of such an object is accessed, NDO reloads the data; if the field is a relation field the child objects are loaded as hollow objects again. That way we don’t need to load a complete object tree with a query to have child objects available in memory. Objects and object data are only loaded if needed. This technique is also called »Lazy Loading« or »On-Demand Loading«.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{14BE5634-CDE6-44B5-B1A8-B113CDC77758}" Name="anexampleforhollowobjects" Title="An Example for Hollow Objects" ContentsTitle="An Example for Hollow Objects" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:17:32" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F9727735-3EFF-46C8-B2EE-F1913691CC28}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>An Example&nbsp;of Hollow Objects</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Let’s use the travel expense accounting system again with these classes: Employee, Travel, and Receipt. The employees travel around the world.&nbsp;During each trip&nbsp;they generate a certain amount of expenses. Let’s assume a company with 50 employees. In average each of them has made 50 trips and received 10 receipts per trip. If you now make a query for a certain employee, it is rather unlikely that you also need to access all his/her travels and receipts. Nevertheless without the concept of hollow objects (or lazy loading) checking a single employee object would cause loading 50 travel and 500 receipt objects.</P>
<P class=MsoBodyText>After the query the employee object is in the hollow state if the parameter hollow is not set to false at the creation of the Query object. If a field of the object is accessed, for example FirstName, then NDO loads the data – the object has the state Persistent.</P>
<P class=MsoBodyText>The first time, the field travels is used, NDO loads the Travel child objects, which have the hollow state. </P>
<P class=MsoBodyText>Let’s assume the field purpose of one of the travel objects is accessed. The object data are loaded by NDO and the object state switches from Hollow to Persistent.</P>
<P class=MsoBodyText>Touching the field expenses of a Travel object causes the child objects to be loaded as hollow objects.</P>
<P class=MsoBodyText>If a field of one of the Expense objects is accessed, for example the field text, the Receipt object is loaded.</P>
<P class=MsoBodyText>Instead of 551 only 3 complete and 6 hollow objects were loaded during the procedure up to now. That saves a lot of memory and therefore makes&nbsp;applications faster.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{642A6959-4BC2-460D-A6FD-383EEC02DF90}" Name="prefetches" Title="Prefetches" ContentsTitle="Prefetches" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:27:36" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{F9727735-3EFF-46C8-B2EE-F1913691CC28}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Prefetches</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>There are cases where the developer knows in advance that he will iterate through all child objects of a given object. In this case it is possible to load the child objects in advance:</P>
<P class=CodeBase>Employee.QueryHelper qh = new Employee.QueryHelper();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), condition, false);</P>
<P class=CodeBase>q.Prefetches.Add(qh.travels);</P>
<P class=MsoBodyText>This code loads all Travel objects together with the Employee objects matching the condition. Instead of loading each Travel object in a&nbsp;separate SQL query (which would be the default behavior) this query only needs two SQL queries. In NDO 2.0 you can prefetch a whole tree:</P>
<P class=CodeBase>q.Prefetches.Add(qh.travels.expenses);</P>
<P class=MsoBodyText>This code additionally loads all Expenses of all Travels of all Employees matching the condition.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{023AACBE-6BD0-4C97-89EA-5943E521B9AB}" Name="thepersistencemanager" Title="The PersistenceManager" ContentsTitle="The PersistenceManager" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:34:46" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>The PersistenceManager</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This class is the main interface to the NDO framework. You need it for actions like</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; making objects persistent,</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deleting objects and object trees,</P>
<P class=C1HBullet>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; querying objects in the database.</P>
<P class=MsoBodyText>The original object state of changed objects is retained in a cache. If the PersistenceManager function Abort() is called, all changes are undone.</P>
<P class=MsoBodyText>The PersistenceManager supports local transactions. Transactions always complete by calling the Save() function.</P>
<P class=MsoBodyText>For distributed transactions of the .NET Enterprise Services, the XxxTransactionRoot classes can be used to force the desired transaction behavior. Transactions have to be saved and aborted using the XxxTransactionRoot objects.</P>
<P class=MsoBodyText>The PersistenceManager can exist in several instances. The instances encapsulate their own transactions that are not visible to each other. That way several instances of a certain persistent object can exist within an AppDomain.</P>
<P class=MsoBodyText>Objects can only be managed by the PersistenceManager which created them, either with MakePersistent or with a query.</P>
<P class=MsoBodyText>You can find samples for the use of the PersistenceManager in the tutorial.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D316A3D7-7F59-4C9A-8A11-D3D041805B66}" Name="querieswithndoql" Title="Queries with NDOql" ContentsTitle="Queries with NDOql" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:35:49" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{1BD3A25B-24EF-446B-8575-53E0DE4CD37C}" cat="" Title="" rt="0" URL=""/>
        <r t="{C1749B3E-0350-45C5-8047-99F41ACD97BC}" cat="" Title="" rt="0" URL=""/>
        <r t="{366D55E8-8971-4C4E-A388-89AC5D71F085}" cat="" Title="" rt="0" URL=""/>
        <r t="{D3306A97-E0D0-4CBB-9679-DD7A8683F247}" cat="" Title="" rt="0" URL=""/>
        <r t="{AAB9471F-8670-45F6-990D-9AEAB7A1FD4F}" cat="" Title="" rt="0" URL=""/>
        <r t="{69F958BC-3B46-4BB1-8659-BFC8139589B5}" cat="" Title="" rt="0" URL=""/>
        <r t="{E75B8FA0-5623-4AFF-8906-742B8720D7C1}" cat="" Title="" rt="0" URL=""/>
        <r t="{F8BA51A3-AA03-4383-9DBA-CB1DB3F68B2E}" cat="" Title="" rt="0" URL=""/>
        <r t="{D13E2279-C702-41B2-A783-9560B8740316}" cat="" Title="" rt="0" URL=""/>
        <r t="{C3BB7950-24D7-4E21-B80D-384335AEA1ED}" cat="" Title="" rt="0" URL=""/>
        <r t="{8A4EA9FB-26CF-4B41-85D2-57F2CF8DC856}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Queries with NDOql</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDOql is the query language of NDO. You might ask why it is necessary to use a specific query language. But there is not much new to learn. NDOql resembles&nbsp;SQL. Actually NDO directly translates queries in SQL, all standard keywords of WHERE clauses remain available.</P>
<P class=MsoBodyText>The biggest advantage of NDOql is that you can make full use of IntelliSense. That means your query code is directly checked while you type it. There are no typos possible when you write names in expressions. </P>
<P class=MsoBodyText>To submit a query, an object of the Query class needs to be created. This happens with the function NewQuery() of the PersistenceManager.</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof (Employee), "lastName LIKE 'Doe'"); </P>
<P class=CodeBase>IList result = q.Execute(); </P>
<P class=CodeBase>foreach (Employee e in result) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ...;</P>
<P class=MsoBodyText>The first parameter of NewQuery() expects the type of the objects that shall be queried. The second is the filter string that is directly equivalent to the WHERE-clauses in SQL.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{1BD3A25B-24EF-446B-8575-53E0DE4CD37C}" Name="columnnames" Title="Column Names" ContentsTitle="Column Names" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:37:08" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Column Names</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The names that are used in the query conditions, like salary or lastName, are the names of persistent fields. (In NDO 2.0 you can map not only fields, but also properties. In that case you use the property name in the query.) NDO translates them automatically to the corresponding database column names. The translation is based on the mapping file.</P>
<P class=MsoBodyText>The NDO enhancer creates so called QueryHelper classes which make it possible to check the names used in the query. The QueryHelpers are described separately in the Chapter <A href="queryhelperclasses.html">QueryHelper Classes</A>. </P>
<P class=MsoBodyText>If a class uses a field name, which is identical to a WHERE clause key word (like ‘between’) NDO might throw an exception. To prevent this, put the names in square brackets.</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=CodeBase>// field name = SQL keyword name</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), "[between] LIKE 'T%'"); </P>
<P class=MsoBodyText>This has to be observed for all the following SQL keywords in a WHERE-clause, independent of upper and lower case:</P>
<P class=CodeBase>AND</P>
<P class=CodeBase>OR</P>
<P class=CodeBase>IS</P>
<P class=CodeBase>LIKE</P>
<P class=CodeBase>NULL</P>
<P class=CodeBase>NOT</P>
<P class=CodeBase>TRUE</P>
<P class=CodeBase>BETWEEN</P>
<P class=CodeBase>ESCAPE</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C1749B3E-0350-45C5-8047-99F41ACD97BC}" Name="queryhelperclasses" Title="QueryHelper Classes" ContentsTitle="QueryHelper Classes" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:39:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>QueryHelper Classes</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Let's review the example from the tutorial chapter:</P>
<P class=CodeBase>[NDOPersistent] </P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel))] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList travels; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ... </P>
<P class=CodeBase>} </P>
<P class=CodeBase>...</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), "travels.purpose LIKE 'TechEd 2006'")</P>
<P class=MsoBodyText>Here the name travels.purpose is used. Now suppose the developer changes the variable name from purpose to purpose_of_travel. Now all queries in the system using this string become invalid. Using query strings generates runtime errors. Finding all their occurrences is not easy in a big system. The solution for this problem is to somehow check the names in the query expressions during the compilation of a project. </P>
<P class=MsoBodyText>Here the QueryHelper classes come into play. These are nested classes generated for each persistent class. They allow writing the following code:</P>
<P class=CodeBase>Employee.QueryHelper qh; </P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), qh.travels.purpose + " LIKE 'TechEd 2006'");</P>
<P class=MsoBodyText>Now the statement qh.travels.purpose causes a compilation error if the field purpose is renamed. This marks all positions in the project where you have used this string in queries.</P>
<P class=MsoBodyText>Suppose you have forgotten the leading blank before the LIKE operator in the sample above. That causes the concatenation of "travels.purpose" and "LIKE …" to the string "travels.purposeLIKE …" which will cause an exception.</P>
<P class=MsoBodyText>To avoid this situation, the NDO Query class has a static public member Op. This member provides string representations for all common keywords and operators in the NDOql clauses. Thus you can write the query like this:</P>
<P class=CodeBase>Employee.QueryHelper qh; </P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), qh.travels.purpose + Query.Op.Like + "{0}");<BR>q.Parameters.Add("TechEd 2006");</P>
<P class=MsoBodyText>To make these things perfect, you can replace the literal "{0}" with the expression Query.Placeholder(0).</P>
<DIV>
<P class=Note><B>Please note:</B> The QueryHelper classes are first available after the Enhancer went over the assembly. So they are only available outside the assembly where the persistent classes are located. </P></DIV></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{366D55E8-8971-4C4E-A388-89AC5D71F085}" Name="wildcardsandbrackets" Title="Wildcards and Brackets" ContentsTitle="Wildcards and Brackets" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:39:33" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Wildcards and Brackets</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>There are about as many wildcard characters as there are databases. NDO takes care that the correct ones are selected depending on the database type.</P>
<P class=MsoBodyText>For example MS SQL Server accepts the character '%'</P>
<P class=CodeBase>SELECT * FROM Customers WHERE Name LIKE 'M%';</P>
<P class=MsoBodyText>This query returns all data rows where the data in column name starts with M. MS Access uses * as wildcard character.</P>
<P class=MsoBodyText>The same situation&nbsp;exists with brackets that are used for names with umlauts and spaces:</P>
<P class=CodeBase>SELECT * FROM [Office Desk]</P>
<P class=MsoBodyText>This query is valid for Access and SQL Server. For Oracle you have to write:</P>
<P class=CodeBase>SELECT * FROM "Office Desk"</P>
<P class=MsoBodyText>The actual characters are generated by NDO provider component. It implements the IProvider interface. There is one implementation in NDO for every supported database type. Each % or * in a string literal is replaced in the provider with the character that is defined as wildcard. NDO also sets the quotings according to the database.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D3306A97-E0D0-4CBB-9679-DD7A8683F247}" Name="sorting" Title="Sorting" ContentsTitle="Sorting" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 11:56:03" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Sorting</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>SQL allows sorting data by one or more columns in ascending or descending order. To do that, you either add a Query.AscendingOrder or a Query.DescendingOrder object to the Orderings collection of the Query object. You submit the field names as parameters by which the data set shall be sorted. NDO translates this field name into a database column name:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), ...);</P>
<P class=CodeBase>// Optionally you can use the QueryHelper </P>
<P class=CodeBase>q.Orderings.Add(new DescendingOrder("name"));</P>
<P class=CodeBase>IList l = q.Execute(); </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{AAB9471F-8670-45F6-990D-9AEAB7A1FD4F}" Name="parameters" Title="Parameters" ContentsTitle="Parameters" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:12:50" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Parameters</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO Queries provide a collection for query parameters. The query expression uses placeholders for the parameters:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), "salary &gt; {0}");</P>
<P class=CodeBase>q.Parameters.Add(50000);</P>
<P class=MsoBodyText>The expression {0} means that the first entry in the Parameters collection should be used as a parameter.</P>
<P class=MsoBodyText>There are two advantages&nbsp;resulting from the use of parameters:</P>
<P class=MsoBodyText>1.&nbsp;&nbsp; The parameters are translated to ADO.NET parameters. This helps&nbsp;to prevent&nbsp;SQL Injection attacks.</P>
<P class=MsoBodyText>2.&nbsp;&nbsp; You don’t need to convert the parameters into strings in the&nbsp;custom format according to your databases needs. Think of converting DateTime values to strings. If you use parameters, just add the DateTime value to the parameters list and let ADO.NET do the rest for you.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{69F958BC-3B46-4BB1-8659-BFC8139589B5}" Name="somesamplesforvalidqueries" Title="Some samples for valid queries" ContentsTitle="Some samples for valid queries" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="14-07-2006 11:57:27" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Some samples for valid queries</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), qh.boolVar + " = 1"); </P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), qh.boolVar + " = {0}"); <BR>q.Parameters.Add(true);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), qh.byteVar + " = " + (0x55).ToString()); </P>
<P class=CodeBase>// Better use Parameters<BR>Query q = pc.NewQuery(typeof (DataContainer), qh.dateTimeVar + " = '05/06/2003'"); // dd/mm/yyyy</P>
<P class=CodeBase>// The same query with parameters:<BR>Query q = pc.NewQuery(typeof (DataContainer), qh.dateTimeVar + " = {0}");<BR>q.Parameters.Add(dateTimeVal);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), qh.dateTimeVar + " BETWEEN {0} AND {1}");<BR>q.Parameters.Add(DateTime.Now.Date - TimeSpan.FromDays(30));<BR>q.Parameters.Add(DateTime.Now.Date);</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), qh.stringVar + " LIKE 'T%' ESCAPE '\\'"); </P>
<P class=MsoBodyText>&nbsp;</P>
<P class=CodeBase>// Sql pass-through query</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), "SELECT * FROM DataContainer where ID = 11", false, Query.Language.Sql); </P>
<P class=MsoBodyText>&nbsp;</P>
<P class=CodeBase>// field name = SQL keyword</P>
<P class=CodeBase>Query q = pc.NewQuery(typeof (DataContainer), "[between] LIKE 'T%'");</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=MsoBodyText>The query</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof (Customer), qh.orders.orderItems.product.name + " = {0}");<BR>q.Parameters.Add("Shirt");</P>
<P class=MsoBodyText>generates this SQL code (SQL server data provider)</P>
<P class=CodeBase>SELECT [Customer].* FROM [Customer], [Order_], [OrderItem], [Product] </P>
<P class=CodeBase>WHERE ([Order].[IDCustomer] = [Customer].[ID] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND [OrderItem].[IDOrder] = [Order_].[ID] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND [Product].[ID] = [OrderItem].[IDProduct]) </P>
<P class=CodeBase>AND [Product].[Name] = 'Shirt'</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E75B8FA0-5623-4AFF-8906-742B8720D7C1}" Name="sqlqueries" Title="SQL Queries" ContentsTitle="SQL Queries" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:42:55" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>SQL Queries</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>There might be situations where the described mechanisms are not sufficient. In such cases you can use ordinary SQL strings to fetch objects.&nbsp;These are called SQL pass-through queries. But the syntax is not checked and the column names are not mapped in that case. So if the name of a database column has changed, it is not sufficient to change the name in the mapping file. All SQL pass-through queries that use that column have to be changed, too. </P>
<P class=MsoBodyText>This is how you create a SQL pass-through query:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Travel), "SELECT * FROM Employee WHERE Purpose LIKE 'TechEd 2006'", true, Query.Language.SQL);</P>
<P class=MsoBodyText><B>Important:</B> The query strings must begin with SELECT *. NDO replaces the ‘*’ with the fields that belong to the respective result type (in the case of hollow queries, this is only the Id column). The rest of the query string is not changed by NDO.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{F8BA51A3-AA03-4383-9DBA-CB1DB3F68B2E}" Name="querieswithnonhollowobjects" Title="Queries with non-hollow Objects" ContentsTitle="Queries with non-hollow Objects" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 14:13:30" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Queries with non-hollow Objects</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Normally the objects returned by a query are in hollow state. See the chapter <A href="hollowobjectsandprefetches.html">Hollow Objects and Prefetches</A> for details. This can be changed with a version of NewQuery() that receives a third parameter. If you set this parameter to false the object itself is fetched with all its data:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), "FirstName LIKE 'Hans'", false);</P>
<P class=MsoBodyText>Note that child objects in this query are still loaded in hollow state. To load child objects too, use the prefetches:</P>
<P class=CodeBase>q.Prefetches.Add(qh.travels);</P>
<P class=MsoBodyText>This causes the query to load the Travel child objects as non-hollow objects.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D13E2279-C702-41B2-A783-9560B8740316}" Name="genericqueries" Title="Generic Queries" ContentsTitle="Generic Queries" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:53:32" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Generic Queries</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>.NET 2.0 supports generic containers. You can use the generics with NDO 1.2 and above. Just use the NDOQuery class instead of the Query class:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();<BR>NDOQuery&lt;Empoyee&gt; = new NDOQuery&lt;Employee&gt;(pm, condition, loadHollow);<BR>List&lt;Employee&gt; = q.Execute();</P>
<P class=MsoBodyText>Note that you don’t use the NewQuery function, but create the NDOQuery object with new. To allow the coupling of the objects to the right PersistenceManager, the pm parameter is always required.</P>
<P class=MsoBodyText>NDOQuery works just like Query, with the exception that it returns a generic List&lt;T&gt; objects.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C3BB7950-24D7-4E21-B80D-384335AEA1ED}" Name="syntax" Title="Syntax" ContentsTitle="Syntax" Status="In Progress" CreatedOn="06-07-2006 18:40:13" ModifiedOn="01-02-2007 11:54:07" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Syntax</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The following formal grammar is&nbsp;extracted from the grammar for the Where clauses of MS SQL Server. Please note that not all databases support the same set of operators. Furthermore the formats of literals are different in each database. Use parameters to avoid problems with literals. </P>
<P class=MsoBodyText>&nbsp;</P>
<P class=CodeBase>&lt; search_condition &gt; ::= </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp; [ NOT ] &lt; predicate &gt; | ( &lt; search_condition &gt; ) } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ { AND | OR } [ NOT ] { &lt; predicate &gt; | ( &lt; search_condition &gt; ) } ] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; [ ,...n ] </P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>&lt; predicate &gt; ::= </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp; expression { = | &lt; &gt; | ! = | &gt; | &gt; = | ! &gt; | &lt; | &lt; = | ! &lt; } expression </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | string_expression [ NOT ] LIKE string_expression </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ ESCAPE 'escape_character' ] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | expression [ NOT ] BETWEEN expression AND expression </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | expression IS [ NOT ] NULL </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>&lt;expression&gt; ::=</P>
<P class=CodeBase>{&nbsp; persistent_field_name</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; | parameter&nbsp;&nbsp;&nbsp; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; | constant </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; | ( expression ) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; | { unary_operator } expression </P>
<P class=CodeBase>&nbsp; &nbsp;&nbsp;| expression { binary_operator } expression </P>
<P class=CodeBase>}</P>
<P class=CodeBase>unary_operator:</P>
<P class=CodeBase>+ (Positive), - (Negative), ~ (Bitwise NOT) </P>
<P class=CodeBase></P>
<P class=CodeBase>parameter: </P>
<P class=CodeBase>{n} (n = 0 .. number of parameters - 1) </P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>binary_operator:</P>
<P class=CodeBase>* (Multiply), / (Division), % (Modulo)</P>
<P class=CodeBase>+ (Add), (+ Concatenate), - (Subtract), &amp; (Bitwise AND)</P>
<P class=CodeBase>^ (Bitwise Exclusive OR), | (Bitwise OR)</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>comparison_operator</P>
<P class=CodeBase>=,&nbsp; &gt;,&nbsp; &lt;,&nbsp; &gt;=,&nbsp; &lt;=,&nbsp; &lt;&gt;,&nbsp; !=,&nbsp; !&gt;,&nbsp; !&lt;</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{8A4EA9FB-26CF-4B41-85D2-57F2CF8DC856}" Name="relationsinqueries" Title="Relations in Queries" ContentsTitle="Relations in Queries" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 11:55:10" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C60F39B8-160B-4524-9214-85D3A6246C22}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Relations in Queries</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In the travel expense accounting example there is a 1:n relationship between the Employee and the Travel classes.</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel))] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList travels; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; ... </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Now Suppose you want to find all employees who traveled with the purpose "TechEd 2006". The NDOql query for this is</P>
<P class=CodeBase>travels.Purpose LIKE 'TechEd 2006'</P>
<P class=MsoBodyText>which is converted to the following SQL query</P>
<P class=CodeBase>SELECT Employee.* FROM Employee, Travels</P>
<P class=CodeBase>WHERE Travels.Purpose LIKE 'TechEd 2006' </P>
<P class=CodeBase>AND Employee.IDemployee = Employee.ID</P>
<P class=MsoBodyText>As you can see you don’t have to bother with Join-queries in NDOql.</P>
<P class=MsoBodyText>The keyword OID allows to specify Id-columns as names in query expressions:</P>
<P class=CodeBase>ObjectId oid = SomeObject.NDOObjectId;</P>
<P class=CodeBase>...</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof (Employee), "OID = {0}");<BR>q.Parameters.Add(oid.Id.Value);</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{5C3C1634-A385-4303-A2DF-95D8B7880DF2}" Name="storabledatatypes" Title="Storable Data Types" ContentsTitle="Storable Data Types" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:14:21" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Storable Data Types</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=CodeBase>System.Boolean</P>
<P class=CodeBase>System.Byte</P>
<P class=CodeBase>System.SByte</P>
<P class=CodeBase>System.Char</P>
<P class=CodeBase>System.Int16</P>
<P class=CodeBase>System.UInt16</P>
<P class=CodeBase>System.Int32</P>
<P class=CodeBase>System.UInt32</P>
<P class=CodeBase>System.Int64</P>
<P class=CodeBase>System.UInt64</P>
<P class=CodeBase>System.Guid (is mapped to a string for some databases)</P>
<P class=CodeBase>System.Single</P>
<P class=CodeBase>System.Double</P>
<P class=CodeBase>System.String</P>
<P class=CodeBase>System.Byte[] (not supported by all databases)</P>
<P class=CodeBase>System.Decimal</P>
<P class=CodeBase>System.DateTime</P>
<P class=MsoBodyText>Additionally, all Enum types are supported and all Nullable&lt;T&gt; types of storable value types. Note that it is not recommended to use Nullable&lt;DateTime&gt; and Nullable&lt;Guid&gt;. Never use Nullable&lt;string&gt;.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{5C27FB2B-7408-4136-BAE2-7CA6019B635F}" Name="valuetypes1" Title="ValueTypes" ContentsTitle="ValueTypes" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:26:08" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>ValueTypes</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Persistent fields can be of any ValueType. In this case NDO tries to store all public ValueType fields, as long as they are of a storable type. Public Properties are also stored if they allow both read and write access. This applies to system types and self defined types as well. The fields of ValueTypes are stored in the table of the owner class.</P>
<P class=berschr4nichtDTH-Inhalt>Dirty State Management</P>
<P class=MsoBodyText>NDO cannot detect if members of ValueTypes are changed. Only the assignment of a ValueType to a field can be detected.</P>
<P class=CodeBase>Parent.Point.X = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Is not detected<BR>Parent.Point = newPoint; // Is detected</P>
<P class=MsoBodyText>Furthermore assignments to a newly created ValueTypes cannot be detected because of the special ValueTypes conversion into the .NET Intermediate Language.</P>
<P class=CodeBase>// Is not detected <BR>Parent.Point = new System.Drawing.Point(5, Parent.Point.Y); </P>
<P class=MsoBodyText>In this situation you either need an intermediate variable or you have to explicitly declare the object status as dirty. The resulting code is:</P>
<P class=CodeBase>System.Drawing.Point newPoint = new System.Drawing.Point(5, Parent.Point.Y); </P>
<P class=CodeBase>Parent.Point = newPoint;&nbsp; // is detected</P>
<P class=MsoBodyText>or:</P>
<P class=CodeBase>Parent.Point = new System.Drawing.Point(5, Parent.Point.Y);</P>
<P class=CodeBase>ObjectHelper.MarkDirty(Parent);&nbsp; // is detected</P>
<P class=MsoBodyText>Please see the chapter <A href="objectstatesandlifecycle.html">Object States and Life Cycle</A> for details on object states.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{AC07719D-D273-4797-AFF3-97AF012ADE1E}" Name="embeddedtypes" Title="Embedded Types" ContentsTitle="Embedded Types" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:18:58" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Embedded Types</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO treats the persistent fields of all classes that are not storable types as embedded types. All fields of these types are stored in the table of the parent object (the owner) if they are storable types (otherwise they are ignored). Embedded types are primarily used to add additional logic to the storable types, for example validation functions, length tests and such things. Objects of system types can be stored as Embedded Objects too.</P>
<P class=berschr4nichtDTH-Inhalt>Dirty State Management</P>
<P class=MsoBodyText>NDO cannot detect changes of Embedded Type members. Hence it is recommended to code embedded types as so-called immutable types. Every operation that would change the state of an immutable object creates a new object. The string class in .NET is an immutable type. </P>
<P class=MsoBodyText>NDO is able to set the persistence state of the owner to Persistent.Dirty when a new object is assigned to the filed of an embedded type.</P>
<P class=MsoBodyText>If you cannot avoid changing the state of embedded objects, you directly have to set the status of the owner class to Persistent.Dirty. The ObjectHelper class of NDO is used for that:</P>
<P class=CodeBase>&nbsp; // Embedded Object is changed</P>
<P class=CodeBase>Parent.Embedded.member = newValue;</P>
<P class=CodeBase>// Set parent object to changed</P>
<P class=CodeBase>ObjectHelper.MarkDirty(Parent);</P>
<P class=MsoBodyText>Please see chapter <A href="objectstatesandlifecycle.html">Object States and Life Cycle</A> for details on object states.</P>
<P class=berschr4nichtDTH-Inhalt>Transient Fields</P>
<P class=MsoBodyText>The attribute [NDOTransient] allows defining certain fields of an embedded type as not persistent. Of course this option is only available for your custom defined types.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{B14E3234-AFD9-48D5-84BE-DFC50320DE68}" Name="genericpersistenttypes" Title="Generic Persistent Types" ContentsTitle="Generic Persistent Types" Status="In Progress" CreatedOn="13-04-2007 11:08:55" ModifiedOn="13-04-2007 17:13:51" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Generic Persistent Types</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO supports generic types in the Professional and Enterprise Editions. With the help of generics you can write the following code:</P>
<P class=CodeBase>[NDOPersistent]<BR>public class MyGenericType&lt;T&gt;<BR>{<BR>&nbsp;&nbsp;&nbsp; T myGenericField;&nbsp; // persistent field of type T<BR>&nbsp;&nbsp;&nbsp; ...<BR>}</P>
<P class=berschr4nichtDTH-Inhalt>Heterogeneous Tables</P>
<P class=MsoBodyText>This ability has some consequences for the&nbsp;mapping. The first consequence is related to the type system. .NET treats every concrete type based on MyGenericType as a unique&nbsp;type in the type system:</P>
<P class=CodeBase>Debug.Assert(typeof(MyGenericType&lt;int&gt;) != typeof(MyGenericType&lt;double&gt;));</P>
<P class=MsoBodyText>But NDO maps all concrete types (type instances) to one table. This is necessary&nbsp;for several reasons. The&nbsp;main reason is that NDO is not able to determine&nbsp;during compilation, which types will be instantiated. Since NDO maps all type instances to one table, we have to store some information about the concrete type of the stored objects along with the object data so that NDO&nbsp;is able to create&nbsp;an object&nbsp;of&nbsp;correct type during loading. NDO uses an additional string column to store the type information. The&nbsp;column name is defined&nbsp;by the TypeNameColumn element in the mapping file.</P>
<P class=CodeBase dir=ltr style="MARGIN-RIGHT: 0px">&lt;TypeNameColumn&gt;<BR>&nbsp; &lt;Column Name="NDOTypeName" NetType="System.String,mscorlib" AllowDbNull="False" /&gt;<BR>&lt;/TypeNameColumn&gt;</P>
<P class=berschr4nichtDTH-Inhalt>Storing Generic Fields</P>
<P class=MsoBodyText>The field myGenericField is of the generic type T. Since NDO doesn't&nbsp;know the&nbsp;type of T, it has to&nbsp;map the&nbsp;field&nbsp;to a general purpose string column.&nbsp;Because of that&nbsp;T must be convertible to a string and vice versa. .NET implements the IConvertible interface for all primitive types so&nbsp;you don't have to bother&nbsp;about type conversions,&nbsp;no matter whether T is a primitive type, a string or a type like Guid or DateTime. </P>
<P class=MsoBodyText>Note that NDO always uses the invariant culture to convert the objects to/from strings.</P>
<P class=MsoBodyText>If you need to use a type, which does not implement the IConvertible interface, you may want to define a TypeConverter for that type. Just mark the type with the attribute</P>
<P class=CodeBase>[TypeConverter(typeof(MyTypeConverter))]</P>
<P class=MsoBodyText>There is a sample application in the tutorial folder of&nbsp;your NDO installation. It shows how to store a user defined complex type in a generic field using the TypeConverter approach.</P>
<P class=berschr4nichtDTH-Inhalt>Querying Generic Types</P>
<P class=MsoBodyText>NDO provides two Query classes, a generic (Query) and a non-generic (NDOQuery). For querying generic types you have to use the non-generic query object. This is necessary because the query type has to be the generic type definition instead of a generic type instance:</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(MyGenericType&lt;&gt;), ....);</P>
<P class=MsoBodyText>The generic expression</P>
<P class=CodeBase>NDOQuery&lt;MyGenericType&lt;&gt;&gt;</P>
<P class=MsoBodyText>is not valid, since .NET can't instantiate the NDOQuery type using a generic type definition.</P>
<P class=MsoBodyText>&nbsp;</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{964874DF-33AE-400F-B098-6B1D75EF2B0D}" Name="relationsinndo" Title="Relations in NDO" ContentsTitle="Relations in NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 13:14:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{687651B8-A31F-48F4-B82D-0FCF96D3BAD6}" cat="" Title="" rt="0" URL=""/>
        <r t="{3E1122A8-F964-4DF2-83CE-82A28CA65722}" cat="" Title="" rt="0" URL=""/>
        <r t="{20F6454F-2007-4D99-AF2B-D8ED7F4AC9D9}" cat="" Title="" rt="0" URL=""/>
        <r t="{0ABB0B37-59E7-4FA4-9481-CD31A814C5D9}" cat="" Title="" rt="0" URL=""/>
        <r t="{EDE200C7-EC90-4438-A35D-E32B76C65C9B}" cat="" Title="" rt="0" URL=""/>
        <r t="{42A8BF37-8503-4881-876A-9A5814145A56}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Relations in NDO</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The object oriented approach models the relationships between classes in two hierarchies:</P>
<P class=MsoBodyText>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Part-of-hierarchy </P>
<P class=MsoBodyText>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kind-of-hierarchy </P>
<P class=MsoBodyText>The last one is based on inheritance. The first one contains all sorts of relations that objects of the different classes can have to each other. The relations differ from each other by these characteristics:</P>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=top width=101>
<P class=MsoBodyText><B>Cardinality:</B></P></TD>
<TD vAlign=top width=343>
<P class=MsoBodyText>Denotes the count of objects the relation targets to; possible values are 0, 1, n (often denoted as ‘*’), and value ranges like 1..n respectively. In a bidirectional relationship the cardinality is denoted for each side of the relationship.</P></TD></TR>
<TR>
<TD vAlign=top width=101>
<P class=MsoBodyText><B>Direction:</B></P></TD>
<TD vAlign=top width=343>
<P class=MsoBodyText>Relations can be unidirectional or bidirectional.</P></TD></TR>
<TR>
<TD vAlign=top width=101>
<P class=MsoBodyText><B>Type:</B></P></TD>
<TD vAlign=top width=343>
<P class=MsoBodyText>There are two relation types: <I>composition</I> and <EM>association</EM>. In a composition relation the life span of a child object is directly connected with the life span of its parent object. Child objects cannot be moved to other parent objects and they are deleted together with the parent objects. In an association relation the child objects are independent objects that can belong to several parents. The two terms are complementary antonyms: A relation is either of type composition or association</P></TD></TR>
<TR>
<TD vAlign=top width=101>
<P class=MsoBodyText><B>Role:</B></P></TD>
<TD vAlign=top width=343>
<P class=MsoBodyText>There can be more than one relation to the same target class. In that case it is important to distinguish the relations using role names.</P></TD></TR></TBODY></TABLE></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{687651B8-A31F-48F4-B82D-0FCF96D3BAD6}" Name="tablerelationsinrelationaldatabases" Title="Table Relations in Relational Databases" ContentsTitle="Table Relations in Relational Databases" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:14:33" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Table Relations in Relational Databases</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO supplies a database table for every class. Thus the different relation types between classes can be mapped to relations between tables. In relational databases such a table relation is represented with primary and foreign keys. A primary key is a special column of a table where all values are different from each other so that the rows of the table can be unambiguously distinguished. A foreign key is a column of a table that holds values matching a primary key value of another table.</P>
<P class=MsoBodyText>Three cases can be distinguished if table A has a relation with table B.</P>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=top width=93>
<P class=MsoBodyText><B>1:1 relation:</B></P></TD>
<TD vAlign=top width=351>
<P class=MsoBodyText>The foreign key is in table A and refers to a single row in table B.</P></TD></TR>
<TR>
<TD vAlign=top width=93>
<P class=MsoBodyText><B>1:n relation:</B></P></TD>
<TD vAlign=top width=351>
<P class=MsoBodyText>The foreign key is in table B and refers to a single row in table A. Thus it is possible to associate more than one row of table B to table A.</P></TD></TR>
<TR>
<TD vAlign=top width=93>
<P class=MsoBodyText><B>n:n relation:</B></P></TD>
<TD vAlign=top width=351>
<P class=MsoBodyText>An intermediate table must be created for this case in which each row holds both a foreign key to table A, and one to table B. This allows associating several rows of table B to one row of table A and vice versa.</P></TD></TR></TBODY></TABLE>
<P class=MsoBodyText>Note that 1:1 and 1:n relations can also be implemented with the help of intermediate tables. The n:1 relation that sometimes appears in literature is just a mirrored 1:n relation.</P>
<P class=MsoBodyText>Let’s review the tutorial code: The Employee table has a 1:n relation to the Travel table. Thus the travel table has a foreign key (for example IDEmployee) allowing the assignment of more than one row of the Travel table to a row of the Employee table.&nbsp; Relations in relational databases are always implicitly bidirectional. As outlined before, we can use the IDEmployee column to find all Travel rows assigned to a specific Employee row. On the other Hand, all Travel objects can use the same IDEmployee column to find their parent object, thus establishing a 1:1 relationship.</P>
<P class=MsoBodyText>To sum it all up, NDO can map a bidirectional relation between two classes with a cardinality of 1 at one side and a cardinality of n at the other side to a table relation using only one foreign key.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{3E1122A8-F964-4DF2-83CE-82A28CA65722}" Name="implementationofrelationsinndo" Title="Implementation of Relations in NDO" ContentsTitle="Implementation of Relations in NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 12:02:14" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Implementation of Relations in NDO</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO maps the abstract object oriented relation concepts to common .NET idioms. For cardinalities &gt; 1 an ArrayList is used. In .NET 2.0 optional List&lt;T&gt; can be used. That’s why we call such relations »List Relations«. For cardinality 1, a direct object reference is used. That’s why we call such relations »Element Relations«.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{20F6454F-2007-4D99-AF2B-D8ED7F4AC9D9}" Name="thendorelationattribute" Title="The NDORelation attribute" ContentsTitle="The NDORelation attribute" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 12:05:28" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>The NDORelation attribute</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This attribute is for placing information about relations in the source code that are needed by NDO.</P>
<P class=MsoBodyText>Typed list classes have not been available in NET 1.x. If you use non-generic list classes, you have to specify the type of the elements the list contains: </P>
<P class=CodeBase>class Employee<BR>{ <BR>&nbsp;&nbsp;&nbsp; // Type of object elements is unknown<BR>&nbsp;&nbsp;&nbsp; IList travels;<BR>}</P>
<P class=MsoBodyText>This is possible with the NDORelation attribute.</P>
<P class=CodeBase>class Employee<BR>{ <BR>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel))]<BR>&nbsp;&nbsp;&nbsp; // Element objects are of type Travel<BR>&nbsp;&nbsp;&nbsp; IList travels;<BR>}</P>
<P class=MsoBodyText>A relation is of type association as long as it is not explicitly defined as composition with the help of an additional parameter of type RelationInfo.</P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel), RelationInfo.Composite)] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList travels; </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>1:1-relations have to be marked with the attribute NDORelation, as shown in the following example with the class Address:</P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation] <BR>&nbsp;&nbsp;&nbsp; Address address; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel), RelationInfo.Composite)] <BR>&nbsp;&nbsp;&nbsp; IList travels;</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>Relations are managed by NDO if they are declared using an NDO attribute. This is very powerful. If an object is loaded from the database, the child objects are automatically loaded, too. But the relation management goes even further: For example, if the field of a 1:1 composite relation is overwritten with Null (Nothing in Visual Basic), NDO takes care that the previously referenced object is removed from the database. Further information about this can be found in the chapter <A href="relationmanagementinndo.html">Relation Management in NDO</A>.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0ABB0B37-59E7-4FA4-9481-CD31A814C5D9}" Name="relationsofcardinalityn" Title="Relations of Cardinality n" ContentsTitle="Relations of Cardinality n" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:43:22" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Relations of Cardinality n</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>These relations are implemented with the types IList, ArrayList, or List&lt;T&gt;.</P>
<P class=MsoBodyText>The easiest way to implement a relation is to use the <I>Add Relation</I> wizard of NDO and <I>Add Acessor</I> button to create properties and functions for adding and removing of elements.</P>
<P class=MsoBodyText>You can use your own list classes to implement List Relations. These classes have to comply with certain rules:</P>
<DIV style="MARGIN-LEFT: 2em">
<UL>
<LI>
<DIV class=C1HBullet valign="bottom">They should implement the non generic IList interface, even if they are generic types. If they are generic types they may implement the IList&lt;T&gt; interface too, as the List&lt;T&gt; class does. It’s recommended, to derive your own generic list classes from List&lt;T&gt;. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">There may not be any additional methods which cause a change of the List content, because NDO would not be able to recognize these changes. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">The classes should implement either IClonable or a constructor which accepts a list of the same type as parameter and constructs a clone of the list as result value. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">The classes should have a default constructor (a constructor without arguments). </DIV></LI></UL></DIV>
<P class=MsoBodyText>Note that NDO does not change your list classes in any way as it does not change the classes of the .NET framework. It can only detect the calls to certain methods of the list classes and intercept these calls in order to recognize any changes in the list content. If you change the semantics of the methods (for example, using the method Remove to add objects ;-) ), NDO would not be able to detect these changes.</P>
<P class=MsoBodyText><STRONG>Important:</STRONG> The Relation Management is only possible if adding and removing elements from the list happens inside the parent class. If a list is passed to the outside by a property and an element is added outside, this element cannot be stored as a child object. The same applies for the manipulation of lists via reflection. In both cases NDO cannot detect that elements are added.</P>
<DIV>
<P class=Note>In turn it works if a completely new list of child elements inside the class code is assigned to the relation field. The relation to the elements existing so far is dissolved and a relation to the new elements is constructed.</P></DIV></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{EDE200C7-EC90-4438-A35D-E32B76C65C9B}" Name="compositionandassociationrelations" Title="Composition and Association Relations" ContentsTitle="Composition and Association Relations" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:11:13" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Composition and Association Relations</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Child objects in a composition are deleted by NDO if the parent object is deleted. Hence a child object must not be included in more than a single composition relation. To make sure that this requirement is met, an object that is added to a list in the parent object must be transient. Let’s assume the class Employee contains this code:</P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel), RelationInfo.Composite)] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList travels = new ArrayList();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public void AddTravel(Travel t)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; travels.Add(t);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=CodeBase>// In your application</P>
<P class=CodeBase>...</P>
<P class=CodeBase>void foo()</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp; Employee emp = ...;</P>
<P class=CodeBase>&nbsp;&nbsp; Travel t = new Travel</P>
<P class=CodeBase>&nbsp;&nbsp; pm.MakePersistent(t);</P>
<P class=CodeBase>&nbsp;&nbsp; // causes a NDOException</P>
<P class=CodeBase>&nbsp;&nbsp; emp.AddTravel(t);</P>
<P class=CodeBase>}</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>&nbsp;</P>
<P class=MsoBodyText>The application code causes an exception since t as a persistent object could be associated to another parent object.</P>
<P class=MsoBodyText>Just the opposite situation occurs with an association (see the altered implementation of Employee below). The t object is transient, since the foo() method does n’t call MakePersistent. That would cause an exception, since t must be an independent object.</P>
<P class=CodeBase>class Employee </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Travel))] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList travels = new ArrayList();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public void AddTravel(Travel t)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; { </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; travels.Add(t);</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>}</P>
<P class=CodeBase>// In your application</P>
<P class=CodeBase>...</P>
<P class=CodeBase>void foo()</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp; Employee emp = ...;</P>
<P class=CodeBase>&nbsp;&nbsp; Travel t = new Travel</P>
<P class=CodeBase>&nbsp;&nbsp; // causes a NDOException</P>
<P class=CodeBase>&nbsp;&nbsp; emp.AddTravel(t);</P>
<P class=CodeBase>}</P>
<P class=berschr4nichtDTH-Inhalt>Deleting objects in Composite Relations</P>
<P class=MsoBodyText>Objects in composite relations cannot be deleted with the PersistenceManager function Delete(). Instead just remove these objects from the child objects list, or, in the case of a relation with cardinality 1 just set the relation field to null. Then NDO deletes the objects the next time Save()is called and makes them transient.</P>
<P class=berschr4nichtDTH-Inhalt>Deleting objects in Associations</P>
<P class=MsoBodyText>Child objects in associations are independent objects. They won't be deleted if you remove them from the child object list or null the relation field. Before you remove such objects with the PersistenceManager method Delete(), make sure that the objects are removed from all relations where they could be included. Otherwise your stored data become inconsistent (foreign keys pointing to non existing rows). There are cases, in which NDO is able to detect this situation and to throw an exeption. But this is not possible in all cases.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{42A8BF37-8503-4881-876A-9A5814145A56}" Name="relationmanagementinndo" Title="Relation Management in NDO" ContentsTitle="Relation Management in NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:25:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{A1F5277C-674A-417A-B689-2F698E370F5B}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Relation Management in NDO</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO takes care that child objects in relations are loaded automatically if the fields representing the relations are accessed. Objects included in a relation are just there from the developer's view. </P>
<P class=MsoBodyText>Relations between persistent and deleted objects are cleared by NDO.</P>
<P class=berschr4nichtDTH-Inhalt>Bidirectional Relations</P>
<P class=MsoBodyText>NDO manages bidirectional relations automatically. Let’s assume we have two classes, Conference and Participant. Each participant owns a list of conferences he already attended. If a new participant is added to the participant list of a certain conference, NDO adds the conference automatically to the conference list of the participant. </P>
<P class=MsoBodyText>This behavior can be avoided with role names (Relation Names) if it is not desirable (see below).</P>
<P class=berschr4nichtDTH-Inhalt>Relation Names</P>
<P class=MsoBodyText>In larger applications it can easily happen that there are several relations to the same target class with different meaning. The class Person can be connected with the class Car in the role Owner and Seller. To distinguish these roles the relations receive names:</P>
<P class=CodeBase>class Person </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Car), "Owner")] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;IList ownCars; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Car), "Seller")] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; IList soldCars;</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>NDO will create two foreign keys in the table Car in this situation. Each of them is assigned to one of the two roles. The default role name is an empty string, thus two reciprocal relations without Relation Names are interpreted as bidirectional relations by NDO automatically.</P>
<P class=berschr4nichtDTH-Inhalt>Polymorphic Relations</P>
<P class=MsoBodyText>It is often desirable to hold elements of different classes in a list that have a base class in common. NDO supports this with abstract base classes. You can find more about that in the chapter about polymorphic inheritance below.</P>
<P class=berschr4nichtDTH-Inhalt>Self references</P>
<P class=MsoBodyText>A class can also have a relation to itself. Here is an example:</P>
<P class=CodeBase>class Employee<BR>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDORelation] </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; Employee director; // 1:1<BR>&nbsp;&nbsp;&nbsp; [NDORelation(typeof(Employee))]<BR>&nbsp;&nbsp;&nbsp;&nbsp;IList office_staff; // 1:n<BR>&nbsp;&nbsp;&nbsp; ... </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The example shows a bidirectional relation; both sides are using the same foreign key.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{552415C5-8FAF-4F04-84AC-64FBF3B026BA}" Name="inheritance" Title="Inheritance" ContentsTitle="Inheritance" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="14-07-2006 12:38:03" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{1D990AAC-8A1B-4A3D-8050-70051EB858C3}" cat="" Title="" rt="0" URL=""/>
        <r t="{D88B48EB-2583-4DA2-8A6A-F799D5126C5C}" cat="" Title="" rt="0" URL=""/>
        <r t="{AB8063C5-AF31-4720-BAF4-089AAB5CD055}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H2>Inheritance</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO supports inheritance. Because of performance reasons two types are differentiated, polymorphic and non-polymorphic inheritance.</P>






</DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{1D990AAC-8A1B-4A3D-8050-70051EB858C3}" Name="nonpolymorphicinheritance" Title="Non-polymorphic Inheritance" ContentsTitle="Non-polymorphic Inheritance" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:20:01" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{044CD953-A0EB-4477-84F9-C779662810BC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Non-polymorphic Inheritance</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>As you will see below in the chapter <A href="polymorphicinheritance.html">Polymorphic Inheritance</A>, polymorphism costs time and has certain requirements regarding the database structure. If you don’t want to go with polymorphic concepts, you still have a "light version" of inheritance at hand. You don’t need to prepare anything to use the non-polymorphic inheritance.</P>
<P class=MsoBodyText>Subclasses inherit the persistent fields from their base classes. This means that the tables associated with subclasses provide columns to store the fields of the base classes along with the fields of the derived class. Both the manipulation of persistent fields of the base class and of the subclass cause the object status to change to Persistent.Dirty so the object will be stored with the next call to PersistenceManager.Save.</P>
<P class=MsoBodyText>Let's assume you have these classes:</P>
<P class=CodeBase>[NDOPersistent] </P>
<P class=CodeBase>public class Person </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string firstName; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string lastName; </P>
<P class=CodeBase>} </P>
<P class=CodeBase></P>
<P class=CodeBase>[NDOPersistent] </P>
<P class=CodeBase>public class Employee</P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string personalId; </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The table in the database would have three columns: FirstName, LastName and PersonalId. This method avoids collecting the object data from different tables.</P>
<P class=MsoBodyText><B>Important:</B> The inheritance chain of persistent classes must not be broken. Suppose, you have an inheritance chain A, B, C. A and C are persistent classes, B is not marked as persistent. NDO would ignore the fields of the base class A. Here is a more concrete example for this:</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class BaseClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; int baseField;</P>
<P class=CodeBase>}</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>public class IntermediateClass : BaseClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; DateTime intermediateField;</P>
<P class=CodeBase>}</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class ChildClass : IntermediateClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; string childField;</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>In this example the intermediate class IntermediateClass is not persistent. NDO cannot detect that ChildClass should inherit the field baseField. If you wish that NDO recognizes the fields of the BaseClass, the IntermediateClass also has to be marked persistent. You do not have to use it as a persistent class if you don’t wish to. Just mark the field intermediateField as NDOTransient to avoid that ChildClass inherits it as a persistent field.</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class BaseClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; int baseField;</P>
<P class=CodeBase>}</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class IntermediateClass : BaseClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; [NDOTransient]</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; DateTime intermediateField;</P>
<P class=CodeBase>}</P>
<P class=CodeBase>&nbsp;</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class ChildClass : IntermediateClass</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp; &nbsp;string childField;</P>
<P class=CodeBase>}</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D88B48EB-2583-4DA2-8A6A-F799D5126C5C}" Name="mappingmorethanoneclasstothesametable" Title="Mapping more than one class to the same table" ContentsTitle="Mapping more than one class to the same table" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 12:56:04" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{044CD953-A0EB-4477-84F9-C779662810BC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Mapping more than one class to the same table</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>With NDO you can map different classes to the same table. This way you are able to map a subset of the columns of a table to a class. If you are working with a class that has very&nbsp;many fields or fields with big data chunks you can generate different views to the stored data. You are able to define a base class which gives you sort of a preview that can be displayed in the user interface. With another query the derived class can be obtained.</P>
<P class=CodeBase>PictureHeader ph; // mapped to header data</P>
<P class=CodeBase>Picture p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // contains the picture data too</P>
<P class=CodeBase>.... </P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), "oid = {0}")</P>
<P class=CodeBase>q.parameters.Add(ph.NDOObjectId.Id.Value); </P>
<P class=CodeBase>p = (Picture) q.ExecuteSingle();</P>
<P class=MsoBodyText>An alternative would be the FindObject method:</P>
<P class=CodeBase>PictureHeader ph; // mapped to header data</P>
<P class=CodeBase>Picture p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // contains the picture data too</P>
<P class=CodeBase>.... </P>
<P class=CodeBase>p = (Picture) pm.FindObject(typeof(Picture), ph.NDOObjectId.Id.Value); // Constructs a hollow object</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{AB8063C5-AF31-4720-BAF4-089AAB5CD055}" Name="polymorphicinheritance" Title="Polymorphic Inheritance" ContentsTitle="Polymorphic Inheritance" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:24:32" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{044CD953-A0EB-4477-84F9-C779662810BC}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Polymorphic Inheritance</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Polymorphy is a concept of object oriented programming where objects of different classes act behind a façade of a base class or an interface. This allows performing the same operations in different ways.</P>
<P class=MsoBodyText>In NDO Polymorphy means that you receive objects of all classes in an inheritance tree if you perform a query to the base class. It also means that a class with a relation to a base class is at the same time related to all derived classes.</P>
<P class=berschr4nichtDTH-Inhalt>Type Codes</P>
<P class=MsoBodyText>To distinguish between different types in the database, NDO works with <I>type codes</I>. A type code is an integer value representing a data type. NDO stores the type codes in an XML file that has to be available in the exe directory of the application which is typically the <I>bin\debug</I> or <I>bin\release</I> directory. The path to the type code file can be declared in the NDO configuration. NDO automatically creates new entries in the file if necessary.</P>
<DIV>
<P class=Note><B>Important:</B> The type codes must not be changed after data has been stored in the database.&nbsp; NDO never deletes any type codes in the <I>NDOTypes.xml</I>, even if the classes are removed or renamed.</P></DIV>
<P class=berschr4nichtDTH-Inhalt>Intermediate Tables</P>
<P class=MsoBodyText>NDO uses intermediate tables for all polymorphic relations except unidirectional relations with cardinality 1. These tables include the columns for foreign keys and if needed, type codes.</P>
<P class=MsoBodyText>For the relation between Travel and Expense in the travel expense accounting system the intermediate table would have these columns:</P>
<P class=CodeBase>IDTravel </P>
<P class=CodeBase>IDExpense </P>
<P class=CodeBase>TCExpense</P>
<P class=MsoBodyText>If the Travel class, for example&nbsp;had sub classes, another column TCTravel would be included in the table.</P>
<P class=berschr4nichtDTH-Inhalt>Persistent Interfaces</P>
<P class=MsoBodyText>Currently NDO does not support persistent interfaces. You should use abstract base classes instead which you can derive from your interfaces.</P>
<P class=berschr4nichtDTH-Inhalt>Persistent Abstract Classes</P>
<P class=MsoBodyText>Abstract base classes have entries in the <I>NDOMapping.xml</I> but NDO constructs no tables in the Xsd schema or in the database structure, because abstract classes never have instances. Abstract classes can define relations that are inherited by the subclasses. The relation mapping entries for the base class and the subclasses must be identical because the relations are implemented with the same intermediate table for all subclasses. The NDO Enhancer automatically generates the mapping information according to this requirement.</P>
<P class=berschr4nichtDTH-Inhalt>Inheritance of persistent Fields</P>
<P class=MsoBodyText>Everything said about Non-polymorphic Inheritance applies for polymorphic inheritance too. The subclasses inherit all persistent fields of the base classes. A subclass is then mapped to a specific table assigned to it.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{8CE69BE4-9E7A-45F2-BBDC-A3F65A84EAA2}" Name="objecthelperclass" Title="ObjectHelper Class" ContentsTitle="ObjectHelper Class" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="14-07-2006 16:51:09" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>ObjectHelper Class</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The functionality that is added by the Enhancer during compilation is not available during development for an assembly with persistent classes. This functionality is encapsulated in the lPersistenceCapable interface. Suppose, you want to work with the ObjectId of a persistent object in the code of the respective class:</P>
<P class=CodeBase>[NDOPersistent]</P>
<P class=CodeBase>public class Employee</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public void foo()</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(this.NDOObjectId.ToString());</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>The compiler would issue an error message, because the property NDOObjectId does not exist at compile time – it is added to the assembly by NDO after compilation. </P>
<P class=MsoBodyText>In this situation the static functions of the ObjectHelper class come into play. Instead of using a term of the pattern<BR>Objectname.IPersistenceCapableMethod(&lt;parameters&gt;)<BR>you can write<BR>ObjectHelper.IPersistenceCapableMethod(&lt;object name&gt;, &lt;parameters &gt;)<BR>The compiler can translate this call without the Enhancer functionality. Normally you just need the ObjectId property from the IPersistenceCapable interface. To obtain the ObjectId of an object you’d write:</P>
<P class=MsoBodyText>ObjectId oid = ObjectHelper.GetObjectId(this);</P>
<P class=MsoBodyText>For a list of all members of this type, see ObjectHelper Members .</P>
<P class=MsoBodyText>Often a conversion is sufficient too:</P>
<P class=MsoBodyText>ObjectId oid = ((IPersistenceCapable)this).NDOObjectId;</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{214635B8-8227-47F7-B2BF-51280980D471}" Name="themappingfile" Title="The Mapping file" ContentsTitle="The Mapping file" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:25:21" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>The Mapping file</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>The NDO mapping file (per default NDOMapping.xml) is an Xml file. In this schema description elements appear <B>bold</B> and attributes appear <B><I>bold italic</I></B>. An Xsd schema of the NDO mapping file format is deployed with NDO and can be found in the NDO installation directory.</P>
<P class=MsoBodyText><STRONG>NDOMapping</STRONG></P>
<P class=MsoBodyText><STRONG>Connections</STRONG></P>
<P class=MsoBodyText><STRONG>Connection</STRONG> - Details about connection strings that are used for database connections.</P>
<P class=MsoBodyText><STRONG><I>Name</I></STRONG><EM>:</EM> The connection string</P>
<P class=MsoBodyText><STRONG><I>ID</I></STRONG><EM>:</EM> Is used to refer from the class elements to a connection. Format: C&lt;n&gt; with &lt;n&gt; being an integer number.</P>
<P class=MsoBodyText><STRONG><I>Type</I></STRONG><EM>:</EM> Name of the NDO provider to be used. The name must match the Name property of an instance of the desired provider.</P>
<P class=MsoBodyText><STRONG>Classes</STRONG></P>
<P class=MsoBodyText><STRONG>Class</STRONG>&nbsp;- Mapping information for persistent classes </P>
<P class=MsoBodyText><STRONG><I>AssemblyName</I></STRONG><EM>: </EM><EM>Module name of the assembly in which the class is defined.</EM></P>
<P class=MsoBodyText><STRONG><I>FullName</I></STRONG>: Fully qualified type name of the class.</P>
<P class=MsoBodyText><STRONG><I>TableName</I></STRONG>: Name of the table to which the class is mapped. NDO creates a name that corresponds to the class name. A qualified table name can also be used like <BR>[SCOTT].[Employee] (mandatory for Oracle databases).</P>
<P class=MsoBodyText><STRONG><I>ConnectionId</I></STRONG>: Reference to the -&gt;Connection element which denotes the database, where the table resides.</P>
<P class=MsoBodyText><STRONG><I>TimeStampColumn</I></STRONG>: Column with a Guid for collision protection. The Guids data type is used if it is supported by the database; otherwise a string column is used.</P>
<P class=MsoBodyText><STRONG>Oid</STRONG><B></B></P>
<P class=MsoBodyText><EM><B>ColumnName</B></EM>:<STRONG>Column name with the unique ID of an object; usually the primary key column.</STRONG></P>
<P class=MsoBodyText><EM><B>FieldName</B></EM>: (Optional) A normal persistent field can be used as oid column if the oid values are not generated by the database. This attribute holds the name of the field to be used as ObjectId.</P>
<P class=MsoBodyText><EM><B>ParentRelation</B></EM>: (Optional) This entry is necessary with Intermediate Class Mappings. It contains a fieldname of a relation. In the case of Intermediate Class Mappings objects don’t have&nbsp;their own ObjectId. The object identity is determined by two foreign keys which are defined in two Relations, ParentRelation and ChildRelation. The value of this attribute denotes the fieldname of an existing relation of the same class. </P>
<P class=MsoBodyText><EM><B>ChildRelation</B></EM>: (Optional) This entry is necessary with Intermediate Class Mappings. It contains a fieldname of a relation. In the case of Intermediate Class Mappings objects don’t have&nbsp;their own ObjectId. The object identity is determined by two foreign keys which are defined in two Relations, ParentRelation and ChildRelation. The value of this attribute denotes the fieldname of an existing relation of the same class.</P>
<P class=MsoBodyText><B>Fields</B></P>
<P class=MsoBodyText><STRONG>Field</STRONG></P>
<P class=MsoBodyText><EM><B>Name</B></EM>: Name of the field to be mapped.</P>
<P class=MsoBodyText><EM><B>ColumnName</B></EM>: Name of the database column, in which the field value is stored. </P>
<P class=MsoBodyText><EM><B>ColumnType</B></EM>: (Optional) Defines a database type to which the field value should be converted.</P>
<P class=MsoBodyText><STRONG><I>ColumnLength</I></STRONG>: This value is submitted as Size Property of the parameter objects of the ADO.NET command objects. If necessary this value is also used for the SQL script to generate a column of a certain length.</P>
<P class=MsoBodyText><B><I>ColumnPrecision</I></B>: (Optional) Number of digits after the decimal point. If this attribute exists, a tupel (l,p) is created in the SQL script where l is the ColumnLength and p is the ColumnPrecision.</P>
<P class=MsoBodyText><STRONG><I>IgnoreLengthInDDL</I></STRONG>: If set to ‘True’, ColumnLength and ColumnPrecision are ignored while creating the SQL script; No size information appears in the column definition in the SQL script. Set this property to True if you need a size parameter in the IDbCommand parameter, but don’t need a size definition in the SQL script.</P>
<P class=MsoBodyText><STRONG>Relations</STRONG></P>
<P class=MsoBodyText><STRONG>Relation</STRONG> - Mapping information for relation fields</P>
<P class=MsoBodyText><EM><B>FieldName</B></EM>: Name of the relation field.</P>
<P class=MsoBodyText><EM><B>ReferencedTypeName</B></EM>: Fully qualified name of the referenced type.</P>
<P class=MsoBodyText><EM><B>ForeignKeyColumnName</B></EM>: Name of the foreign key column to be used for the relation. It depends on the relation cardinality as to which table holds this column:</P>
<P class=MsoBodyText>Cardinality 1: The foreign key column is in the own table assigned to the class, containing the relation.</P>
<P class=MsoBodyText>Cardinality n: The foreign key column is in the table assigned to the referenced class.</P>
<P class=MsoBodyText>n:n relations, or polymorphic relations with cardinality n: The foreign key column is in the mapping table.</P>
<P class=MsoBodyText>Note that if a mapping table is explicitly defined for non-polymorphic relations with cardinality 1 and n, the foreign key column is in the mapping table.</P>
<P class=MsoBodyText><EM><B>ForeignKeyTypeColumnName</B></EM>: (Optional.) In the case of polymorphic classes this attribute gives the name of the column holding the type code of the stored or referenced object. </P>
<P class=MsoBodyText><EM><B>RelationName</B></EM>: (Optional) Is used to distinguish several relations to the same target class. The default value is String.Empty.</P>
<P class=MsoBodyText><STRONG>MappingTable</STRONG> (Optional) A MappingTable is needed for n:m relations or if a mapping table is explicitly defined.</P>
<P class=MsoBodyText><EM><B>TableName</B></EM>: Name of the mapping table.</P>
<P class=MsoBodyText><EM><B>ConnectionId</B></EM>: Refers to the connection under witch the table can be reached.</P>
<P class=MsoBodyText><EM><B>ChildForeignKeyColumnName</B></EM>: In case of n:n relations this attribute denotes the foreign key column pointing to rows in the table of the referenced class. The column always resides is in the mapping table.</P>
<P class=MsoBodyText><EM><B>ChildForeignKeyTypeColumnName</B></EM>: For polymorphic classes this attribute gives the name of the column that holds the type code of the referenced object. The column is always of type integer.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{05F1B4AB-F06C-4573-95A2-3C14279B95D5}" Name="transactions" Title="Transactions" ContentsTitle="Transactions" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 13:09:37" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{4CB119EF-4D03-4108-A0A6-77742834AACE}" cat="" Title="" rt="0" URL=""/>
        <r t="{8A447DDA-19D5-4F43-B45B-F4FBD5EE9586}" cat="" Title="" rt="0" URL=""/>
        <r t="{0FAE831D-8999-4C46-B191-4E3FA60C5BEB}" cat="" Title="" rt="0" URL=""/>
        <r t="{E17E56D8-73B3-4435-9D6C-A360AE2D1FD0}" cat="" Title="" rt="0" URL=""/>
        <r t="{A95C09B5-22DD-40E4-AEA8-5E5DAEAC205B}" cat="" Title="" rt="0" URL=""/>
        <r t="{CFF3FF42-4DF5-4F05-A38E-87F91DF45C01}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Transactions</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Transactions are a key concept when working with databases. You cannot avoid working with transactions as soon as concurrent data accesses occur. In a nutshell a transaction is the encapsulation of all partial operations that belong to a certain activity so that the activity appears as an atomic activity.</P>
<P class=MsoBodyText>Let’s use a simple example. Suppose, you want to create an object in a certain database and write it back to the database. In the case of autonumbered integer id’s, storing the data does not only mean that the object data is transmitted to the database. The database also creates a new id for the new data row and returns this id back to the caller. In ADO.NET this does not happen by itself. The database has to be explicitly queried for the Id, as&nbsp;shown in the following example for SQL server:</P>
<P class=CodeBase>INSERT Into Employee ......;</P>
<P class=CodeBase>SELECT Id from Employee WHERE Id = %%IDENTITY;</P>
<P class=MsoBodyText>The keyword <EM>identity</EM> instructs SQL server to return the Id of the row that was last inserted in the current transaction. If such inserts are not encapsulated in a transaction, they can get a mixed up identity:</P>
<P class=MsoBodyText>&nbsp;</P>
<P class=CodeBase>// Command from the first user</P>
<P class=CodeBase>INSERT Into Employee ......;&nbsp;</P>
<P class=CodeBase>// Command from the second user</P>
<P class=CodeBase>INSERT Into Employee ......;&nbsp;</P>
<P class=CodeBase>// The next command from first user, receives wrong Id</P>
<P class=CodeBase>SELECT * from Employee WHERE Id = %%IDENTITY;</P>
<P class=CodeBase>// Another command from second user, also receives wrong Id</P>
<P class=CodeBase>SELECT * from Employee WHERE Id = %%IDENTITY;</P>
<P class=MsoBodyText>The result is an error that is very hard to find: a wrong id is returned. So you already need a transaction for inserting a single data row. The commands belonging to a transaction run in a transaction context. That ensures that commands from other transactions cannot interfere. But what exactly does »not interfering« mean? Do we want to disallow that someone else can change data we are currently changing? Or does it also mean someone else must not change data we have read at the moment? The decision is up to you and depends on your application. You decide it by selecting a certain <I>Isolation Level</I>. ADO.NET supplies the enumeration IsolationLevel to define the Isolation Level. This enumeration is used by NDO too. How the isolation levels are implemented is up to the database that is accessed with ADO.NET.</P>
<P class=MsoBodyText>The duration of a transaction needs to be specified too. An <I>optimistic</I> transaction lasts only for the period it takes to store changes. A <I>pessimistic</I> transaction starts with the first reading of data and lasts until the data is stored.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{4CB119EF-4D03-4108-A0A6-77742834AACE}" Name="optimisticandpessimistictransactions" Title="Optimistic and Pessimistic Transactions" ContentsTitle="Optimistic and Pessimistic Transactions" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:22:15" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Optimistic and Pessimistic Transactions</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>For transactions you have the choice, how long the transaction should last. The diagram illustrates this:</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_24.jpg" border=0></P>
<P class=MsoBodyText>The pessimistic transaction includes every partial operation from reading the data until saving it. The optimistic transaction includes only the operations that are necessary to store the data back to the database.</P>
<P class=berschr4nichtDTH-Inhalt>Pessimistic Transactions</P>
<P class=MsoBodyText>If several users work with the same system and a lot of simultaneous processes access the database, you might be tempted to establish a rigid transaction protection with pessimistic transactions. But that’s not the best way to cope with this situation. Mostly, a lot of time passes between reading and saving the data, especially if user input comes into play. Pessimistic transactions together with a corresponding isolation level lock the data; the database cannot access it and raises an exception. Pessimistic transactions are very expensive in terms of processing time. Generally more data are blocked than what is really needed for the transaction. Because of that, pessimistic transactions are unsuitable for web sites or other systems where a concurrent access of many users is expected.</P>
<P class=berschr4nichtDTH-Inhalt>Optimistic Transactions</P>
<P class=MsoBodyText>Optimistic transactions only span the period of time where changes are written back to the database. This happens very fast so optimistic transactions are the method of choice for highly frequented data sources. The major drawback: The data can be loaded simultaneously by different users and the database may become inconsistent. </P>
<P class=berschr4nichtDTH-Inhalt>The solution</P>
<P class=MsoBodyText>A working solution for web sites and frequently used data sources are optimistic transactions combined with collision detection. Collision detection prevents a data row from being overwritten if it was changed by another user since the last read operation. NDO includes a mechanism for collision detection that is based on Guids. Details can be found in the chapter <A href="collisiondetection.html">Collision Detection</A>.</P>
<P class=MsoBodyText>Alternatively you can create your own locking mechanism in your application. At the application level you know exactly which data rows you need to protect and how long the protection should last. For example the starting point may be when an object is loaded and displayed in a form and the ending point when the <B>Save</B> or <B>Cancel</B> buttons are pressed. Before reading the object or object tree, you could set a lock entry in a specific table&nbsp;if the object or object tree is not already locked by another user. Checking and setting the lock can be accomplished in a separate transaction which is very fast and thus can be protected with a rigid isolation level. As soon as the lock is set the protected objects can be read and changed. Another transaction unlocks the data at the end. If it is not possible to set the lock (because another user works on the same data) a message would notify the user and ask him to try the transaction again later.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{8A447DDA-19D5-4F43-B45B-F4FBD5EE9586}" Name="localanddistributedtransactions" Title="Local and distributed Transactions" ContentsTitle="Local and distributed Transactions" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="14-07-2006 12:01:56" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[
<SCRIPT language=javascript>

<!--

if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers();

//-->

</SCRIPT>

<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>

<DIV id=_d2hTitleNavigator>
<H3>Local and distributed Transactions</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Transactions are directly executed by the database and not by data access layers like ADO.NET or OleDB. A transaction might look like this (SQL server)</P>
<P class=CodeBase>BEGIN TRANSACTION</P>
<P class=CodeBase>USE pubs;</P>
<P class=CodeBase>UPDATE titles</P>
<P class=CodeBase>SET advance = advance * 1.25</P>
<P class=CodeBase>WHERE ytd_sales &gt; 8000;</P>
<P class=CodeBase>COMMIT;</P>
<P class=MsoBodyText>Start and end of the transaction are marked by special SQL commands being sent to a certain data source; or, in other words, to a certain connection. That limits transactions to just one connection. But what can be done if partial operations of a transaction should be executed on different connections?</P>
<P class=MsoCaption>&nbsp;</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_25.png" border=0></P>
<P class=MsoCaption>Picture 1: The concept of distributed transactions</P>
<P class=MsoBodyText>For that a protocol is necessary, which is called Two-Phase-Commit. In the first phase of the commit all participating data sources are asked if they are ready to perform a commit. If this is the case for all data sources, the commit is executed for all data sources.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0FAE831D-8999-4C46-B191-4E3FA60C5BEB}" Name="netenterpriseservices" Title=".NET Enterprise Services" ContentsTitle=".NET Enterprise Services" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:12:23" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>.NET Enterprise Services</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Who takes care of these distributed transactions? In Windows it is the job of the Distributed Transaction Coordinator (DTC), which is part of the COM+ system. In .NET the .NET Enterprise services are wrapped around COM+. They allow creating objects that way that the creating context does not get the object itself, but a so-called Proxy&nbsp;that intercepts all calls into the object. Thus it is possible to put every call to the objects in a transaction context that records certain activities.</P>
<P class=MsoBodyText>The recorded activities include all calls to data layers like ADO, OleDB or ADO.NET. The DTC records not only the data access caused by the object itself but also the access of all other objects which are created by the first object. That way a complete object tree can participate&nbsp;in a transaction automatically. The root of the tree is called transaction root.</P>
<P class=MsoBodyText>The transaction root and all the objects it creates have access to the transaction context and can commit or abort a transaction using the transaction context (SetComplete(), SetAbort()) or can influence the outcome of a transaction (TransactionVote()).</P>
<P class=MsoBodyText>A transaction runs from the first recorded data access until SetComplete() or SetAbort() are called. In case of SetComplete() the two phase commit protocol is started for all connections where an access was recorded. In the case of SetAbort() an abort command is sent to all connections.</P>
<P class=MsoBodyText>NDO supports that concept and wraps the Enterprise services in own classes as described below.</P>
<P class=berschr4nichtDTH-Inhalt>Local Transactions or .NET Enterprise Services?</P>
<P class=MsoBodyText>As shown above, ADO.NET supports two transaction models: local transactions that are limited to a single data source, and distributed transactions that run with .NET enterprise services. The question is: Which one should you use?</P>
<P class=MsoBodyText>If your transaction is always limited to exactly one data source, you should use local transactions. They are faster and more flexible. You&nbsp;always have the possibility to encapsulate different activities in different transactions running against different data connections.</P>
<P class=MsoBodyText>If you can’t avoid different operations having to be enclosed in a single transaction or if you need to use certain features of the .NET Enterprise Services, you should use distributed transactions.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E17E56D8-73B3-4435-9D6C-A360AE2D1FD0}" Name="localtransactionsinndo" Title="Local Transactions in NDO" ContentsTitle="Local Transactions in NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:12:14" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Local Transactions in NDO</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Local NDO transactions are always bound to a persistence manager. The optimistic or pessimistic mode can be selected with the property TransactionMode. The enum value TransactionMode.Optimistic enables the optimistic and TransactionMode.Pessimistic the pessimistic mode.</P>
<P class=MsoBodyText>Here is an example:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>pm.TransactionMode = TransactionMode.Optimistic; </P>
<P class=CodeBase>Employee e = ....; </P>
<P class=CodeBase>pm.MakePersistent(e);&nbsp; </P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoBodyText>This starts a transaction that last only for the call of pm.Save. TransactionMode.Pessimistic would cause the start the transaction to begin at the first data access and to end when the call to pm.Save() has ended. </P>
<P class=berschr4nichtDTH-Inhalt>Isolation Level</P>
<P class=MsoBodyText>The enumeration System.Data.IsolationLevel is used for defining the Isolation Level. This enumeration has six different values. Their meaning can be found in the MSDN documentation. NDO works with the default value ReadCommitted. That means, data rows cannot be read if they were changed in another currently running transaction. But after data is read it can be changed in another transaction. This level is compatible with optimistic transactions. For pessimistic transactions the levels Serializable or RepeatableRead could be used. They prevent other users from changing data that was queried in a transaction. Beyond that, Serializable prevents the creation of phantom rows. Here the reading of a data row is impossible if this data row is part of a record set read by another concurrent transaction. Note that not all database products implement all Isolation Levels defined in the IsolationLevel enumeration.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A95C09B5-22DD-40E4-AEA8-5E5DAEAC205B}" Name="distributedtransactionsinndo" Title="Distributed Transactions in NDO" ContentsTitle="Distributed Transactions in NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 13:25:33" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Distributed Transactions in NDO </H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>In the Enterprise edition, NDO supplies three classes that can serve as transaction roots for the .NET Enterprise Services. The functionality of these classes is identical but they have different parameters for the Transaction attribute:</P>
<P class=CodeBase>RequiredTransactionRoot (TransactionOption.Required) </P>
<P class=CodeBase>RequiresNewTransactionRoot (TransactionOption.RequiresNewTransaction </P>
<P class=CodeBase>SupportedTransactionRoot (TransactionOption.Supported) </P>
<P class=MsoBodyText>You can find the description of the Transaction attribute and the TransactionOption enumeration in the MSDN documentation.</P>
<P class=MsoBodyText>The transaction roots are used as follows:</P>
<P class=CodeBase>try</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; RequiredTransactionRoot txRoot = new RequiredTransactionRoot();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; PersistenceManager pm = txRoot.PersistenceManager;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; // ... Your operations</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; txRoot.Save();</P>
<P class=CodeBase>}</P>
<P class=CodeBase>catch (Exception ex)</P>
<P class=CodeBase>{</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; txRoot.Abort();</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; // Error handling</P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>You are free to write your own Serviced Components and use them in combination with the TransactionRoot objects. In that case the attributes Required respectively Supported are recommended.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{CFF3FF42-4DF5-4F05-A38E-87F91DF45C01}" Name="endoftransaction" Title="End of Transaction" ContentsTitle="End of Transaction" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:11:37" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{70CB06CF-70C2-42CE-9A52-45E234886F31}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>End of Transaction</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Do not use instances of the PersistenceManager after calling one of the methods Abort() or Save() of the root object. Calling these methods marks the end of a transaction. Instead obtain a new PersistenceManger instance from the root object. That’s not a limitation of NDO but the operation mode of the Enterprise Services. They are automatically clearing the root object at transaction end (remember that your context only holds a proxy to the transaction root). After the end of a transaction every following function call into the Proxy of the root object generates a new root object together with a new PersistenceManger.</P>
<DIV>
<P class=Note><B>Important:</B> Existing persistent objects cannot be used with the new PersistenceManager. You have to refetch them.</P></DIV></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{F1B3AF6D-02E1-47AF-BC08-7288E00B2FC4}" Name="databindinginnet11" Title="DataBinding in .NET 1.1" ContentsTitle="DataBinding in .NET 1.1" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="25-05-2007 13:59:40" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <r t="{BADECE18-8E94-4BAB-87FD-7D8B511CD2F3}" cat="" Title="" rt="0" URL=""/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>DataBinding in .NET 1.1</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>NDO supports .NET data binding. In .NET arbitrary classes can be bound to controls, the public properties of the classes are displayed and can be manipulated. The properties created&nbsp;by the AddAccessor function can be used for that.</P>
<P class=MsoBodyText>Let’s use the following class to take a closer look at DataBinding:</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; public class Employee</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string FirstName;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string LastName;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Employee (string FirstName, string LastName)</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.FirstName = FirstName;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.LastName = LastName;</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string LastName</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return LastName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { LastName = value; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string FirstName</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return FirstName; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { FirstName = value; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; }</P>
<P class=MsoBodyText>Now you can create a DataGrid in a Windows form and bind objects to it:</P>
<P class=CodeBase>private IList EmployeeList; </P>
<P class=CodeBase>public void foo() </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; EmployeeList = new ArrayList(); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; EmployeeList.Add(new Employee("Mirko", "Matytschak"); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; EmployeeList.Add(new Employee("John", "Doe"); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; this.dataGrid1.DataSource = EmployeeList; </P>
<P class=CodeBase>}</P>
<P class=MsoBodyText>With this the Windows-Forms library displays a table with the Employee elements in the DataGrid. The library uses reflection to look for the public properties of the elements and generates corresponding columns.</P>
<P class=MsoBodyText>If you want to enforce another selection or another sort direction of the columns using TableStyles and ColumStyles, you have to set the property MappingName in the TableStyles properties to the type of the collection, in this case "ArrayList".</P>
<P class=berschr4nichtDTH-Inhalt>Disadvantages of the Binding to ArrayLists</P>
<P class=MsoBodyText>This simple solution has several drawbacks: </P>
<P class=C1HNumber><B>1.&nbsp;&nbsp; </B>If an empty list is connected to a control or a list gets empty during dynamic manipulation, an exception is thrown. This is because WindowForms derives the meta data directly from the element objects and no meta data is available in an empty list.</P>
<P class=C1HNumber><B>2.&nbsp;&nbsp; </B>You can only use one TableStyle for a control if you use only ArrayLists as a container.</P>
<P class=C1HNumber><B>3.&nbsp;&nbsp; </B>The NDO Enhancer creates some public properties for all persistent classes. Hence you always have to use TableStyles if you do not want to display these properties in the grid.</P>
<P class=MsoBodyText>.NET offers some interesting mechanisms for the adaptation of data binding that are used by NDO.</P>
<P class=berschr4nichtDTH-Inhalt>The NDO Solution</P>
<P class=MsoBodyText>NDO uses a class NDOArrayList which is derived from ArrayList. The container functionality of the NDOArrayList remains the same but it implements the ITypedList interface. This interface allows declaring meta data for the elements&nbsp;in the list. Furthermore a name can be assigned that can be used as MappingName afterwards.</P>
<P class=MsoBodyText>Now the example can be written that way:</P>
<P class=CodeBase>IList kundenListe = new NDOArrayList(typeof(Employee));</P>
<P class=MsoBodyText>This allows binding an empty customer list to a control. The additional properties the NDO enhancer generates for persistent classes are invisible. The Mapping name for use with the TableStyles is Employee. It is no problem to display different element classes in one grid.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{BADECE18-8E94-4BAB-87FD-7D8B511CD2F3}" Name="changedevents" Title="Changed Events" ContentsTitle="Changed Events" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 13:28:34" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{B3CF781C-1BB9-4E27-BF1F-761A7584D733}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Changed Events</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>Suppose you have bound a persistent object to controls on a Windows Form. Now your software changes an object property. The new property value should now be displayed in the control. But there must be a way to inform the control that the property has changed. In .NET this can be achieved by creating an event that follows a certain naming convention: The event must be of the same name as the property with the postfix "Changed". For the property FirstName in the class Employee from above it would look like this:</P>
<P class=CodeBase>public event EventHandler FirstNameChanged; </P>
<P class=CodeBase>public string FirstName </P>
<P class=CodeBase>{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; get { return FirstName; } </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; set </P>
<P class=CodeBase>&nbsp; &nbsp;&nbsp;{ </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FirstName = value; </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FirstNameChanged != null) </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FirstNameChanged(this, EventArgs.Empty); </P>
<P class=CodeBase>&nbsp;&nbsp;&nbsp; } </P>
<P class=CodeBase>} </P>
<P class=MsoBodyText>If an event like that exists, the WinForms library registers itself as a listener to the event during the creation of a binding. Your code has to take care that the event is fired in case of changes. That allows the control to notice any change of the property and change its appearence according to the new value.</P>
<P class=MsoBodyText>If you select the option <B>Generate change events with AddAccessor</B> in the NDO configuration dialog NDO generates the necessary code for you.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{25288E74-AEFA-4841-83A7-2237DDACEAF4}" Name="distributablecontainers" Title="Distributable Containers" ContentsTitle="Distributable Containers" Status="In Progress" CreatedOn="06-07-2006 18:40:14" ModifiedOn="01-02-2007 14:18:45" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Distributable Containers</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>This feature is only supported in the Enterprise Edition.</P>
<P class=berschr4nichtDTH-Inhalt>ObjectContainer and ChangeSetContainer</P>
<P class=MsoBodyText>ObjectContainers are serializable objects containing one or more root objects and their child objects. The container can be connected to another PersistenceManager. That way it is possible to transfer objects to an OfflinePersistenceManager or to another PersistenceManager which is able to save these objects again in another data store.</P>
<P class=berschr4nichtDTH-Inhalt>Communication between PersistenceManager and OfflinePersistenceManager</P>
<P class=MsoBodyText>The communication between a PersistenceManager and an OfflinePersistanceManager works like this:</P>
<P class=MsoBodyText><B>Step 1:</B></P>
<P class=MsoBodyText>The PersistenceManager supplies an ObjectContainer if the function GetObjectContainer() is called.</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), ....);</P>
<P class=CodeBase>IList l = q.Execute();</P>
<P class=CodeBase>ObjectContainer oc = pm.GetObjectContainer(l, SerializationFlags.SerializeAllRelations);</P>
<P class=MsoBodyText><B>Step 2:</B></P>
<P class=MsoBodyText>The container gets serialized.</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>oc.Serialize(...);&nbsp; // string or stream</P>
<P class=MsoBodyText><B>Step 3:</B></P>
<P class=MsoBodyText>On the client side the container is deserialized and connected to an OfflinePersistenceManager using the method MergeObjectContainer().</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>OfflinePersistenceManager opm = new OfflinePersistenceManager();</P>
<P class=CodeBase>ObjectContainer oc = new ObjectContainer();</P>
<P class=CodeBase>oc.Deserialize(...);&nbsp; // string or stream</P>
<P class=CodeBase>opm.MergeObjectContainer(oc);</P>
<P class=MsoBodyText>The steps 1..3 can be omitted if the OfflinePersistenceManager is only used to create new objects.</P>
<P class=MsoBodyText><B>Step 4:</B></P>
<P class=MsoBodyText>Now objects can be changed, deleted or created on the offline side. Changed objects can be retrieved by calling GetChangeSet().The result is a ChangeSetContainer. Like the ObjectContainer, the ChangeSetContainer is serializable too.</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>ChangeSetContainer csc = opm.GetChangeSet();</P>
<P class=CodeBase>csc.Serialize(...); // string or stream</P>
<P class=MsoBodyText><B>Step 5:</B></P>
<P class=MsoBodyText>The ChangeSetContainer can be connected to a PersistenceManager using the method MergeObjectContainer(). The data can be stored in the database&nbsp;by calling Save().</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>ChangeSetContainer csc = new ChangeSetContainer();</P>
<P class=CodeBase>csc.Deserialize(...); // string or stream</P>
<P class=CodeBase>pm.MergeObjectContainer(csc);</P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoCaption><IMG src="ImagesExt/image9_26.jpg" border=0></P>
<P class=MsoCaption>Picture 1: The complete communication cycle </P>
<P class=MsoBodyText>If .NET Remoting is used, the explicit serialization and deserialisation of the ObjectContainer and ChangeSetContainer to strings or streams is not necessary. The containers can be directly used as method parameters or return values.</P>
<P class=Formatvorlageberschr3nichtDTH-Inhalt>Communication between two PersistenceManager Instances</P>
<P class=MsoBodyText>This communication becomes necessary to store the same objects in different databases; for example in web applications.</P>
<P class=MsoBodyText>The following steps are necessary:</P>
<P class=MsoBodyText><B>Step 1:</B></P>
<P class=MsoBodyText>The PersistenceManager supplies an ObjectContainer&nbsp;by calling GetObjectContainer(). In this situation it makes sense to use the flag SerializationFlags.MarkAsTransient() as shown below. That way the object can be stored again in the target PersistenceManager.</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>Query q = pm.NewQuery(typeof(Employee), ....);</P>
<P class=CodeBase>Employee e = (Employee) q.ExecuteSingle();</P>
<P class=CodeBase>ObjectContainer oc = pm.GetObjectContainer(e, SerializationFlags.MarkAsTransient);</P>
<P class=MsoBodyText><B>Step 2:</B></P>
<P class=MsoBodyText>The container gets serialized:</P>
<P class=CodeBase>oc.Serialize(...); // string or stream.</P>
<P class=MsoBodyText><B>Step 3:</B></P>
<P class=MsoBodyText>On the client side the container is deserialized and merged to another PersistenceManager using MergeObjectContainer(). If the container contains Objects marked as transient they are made persistent and stored as new objects. Note that in Step 1 we made sure to mark our object as transient. But if an object had an oid before, the oid will be transferred along with the object. NDO tries to use that existing oid while storing the new object. That way the new object has the same id as the object&nbsp;in the original database. Reusing oids works only with client generated Id values. Guids are very well suited for that scenario.</P>
<P class=MsoBodyText>Code sample:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>ObjectContainer oc = new ObjectContainer();</P>
<P class=CodeBase>oc.Deserialize(...);&nbsp; // string or stream</P>
<P class=CodeBase>pm.MergeObjectContainer(oc);</P>
<P class=CodeBase>pm.Save();</P>
<P class=MsoBodyText><IMG src="ImagesExt/image9_27.png" border=0></P>
<P class=MsoBodyText>Picture 2: The picture shows which PersistenceManager types create which container types and which container types are accepted as parameters for the MergeObjectContainer method of a certain PersistenceManager type.</P>
<P class=berschr4nichtDTH-Inhalt>Serialization</P>
<P class=MsoBodyText>For web services it works well to use the string serialization:</P>
<P class=CodeBase>string s = oc.Serialize();</P>
<P class=CodeBase>...</P>
<P class=CodeBase>ObjectContainer oc = new ObjectContainer();</P>
<P class=CodeBase>oc.Deserialize(s);</P>
<P class=MsoBodyText>For transferring objects to files the Stream variant can be used:</P>
<P class=CodeBase>FileStream fs = new FileStream(name, FileMode.Create, FileAccess.Write);</P>
<P class=CodeBase>oc.Serialize(fs);</P>
<P class=CodeBase>...</P>
<P class=CodeBase>FileStream fs = new FileStream(name, FileMode.Open, FileAccess.Read);</P>
<P class=CodeBase>ObjectContainer oc = new ObjectContainer();</P>
<P class=CodeBase>oc.Deserialize(fs);</P>
<P class=MsoBodyText>For Remoting ObjectContainers can be submitted as parameter and result values of a method:</P>
<P class=CodeBase>PersistenceManager pm = new PersistenceManager();</P>
<P class=CodeBase>ChangeSetContainer csc = RemoteObject.DoSomething(pm.GetObjectContainer(...));</P>
<P class=CodeBase>pm.MergeChangeSet(csc);</P>
<P class=CodeBase>pm.Save();</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{C211EF2B-A518-4EB7-97E6-36EFA8FA4C77}" Name="extendingndo" Title="Extending NDO" ContentsTitle="Extending NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:15" ModifiedOn="01-02-2007 14:16:42" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Extending NDO</H2></DIV></DIV></DIV>
<P class=MsoBodyText valign="bottom">NDO has an open architecture. There are several interfaces at hand which can be used to intervene in the storage processing:</P>
<DIV style="MARGIN-LEFT: 2em">
<UL>
<LI>
<DIV class=C1HBullet valign="bottom">Callback-Interfaces<BR>If your persistent classes implement the interfaces IPersistenceNotifiable,&nbsp; they are called back <I>before</I> objects are saved and <I>after</I> they are loaded. If they implement IDeleteNotifiable,&nbsp; they are called back before an object is deleted. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">Events and Callbacks<BR>The events CollisionEvent, IDGenerationEvent and OnSavingEvent&nbsp; give a notification if certain processes in the system take place. RegisterConnectionListener allows you to create connection strings as soon as a connection is opened. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">NDO Provider<BR>NDO cooperates with all well written ADO.NET providers. The NDO provider is a small layer between NDO and the ADO.NET provider. It levels differences between SQL dialects of different database products like the quoting of column and table names and the naming of parameters. You can write an own NDO provider by implementing the IProvider&nbsp; interface or just derive a class from NDOAbstractProvider. A SQL script generator can easily be realized by deriving a class from ISqlGenerator. You just copy a new provider into the <I>Provider</I> subdirectory of your NDO installation. At the customers site you may use the <I>UserSetup.msi</I> to create a Provider directory. The UserSetup.msi can be found in the <I>UserSetup</I> directory of the NDO installation. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">NDO Persistence-Handler<BR>NDO accesses data sources with the help of ADO.NET. This can be changed with your own implementation of the interfaces IPersistenceHandler and IMappingTableHandler. You can instruct a PersistenceManager to use a handler of a certain implementation of these interfaces using the PersistenceHandlerType property. Alternatively you can use the static function NDOSetPersistenceHandler that is added by the Enhancer to every persistent class. In that case the handler is only used for that single class. Note that you have to assign the new handler (or the handler type) before the first database access of the PersistenceManager for the corresponding persistent class. This is because the PersistenceHandlers are cached. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">The NDO Mapping API<BR>This API allows reading and manipulating mapping files with the help of an object tree. More information can be found in the reference of the NDO Mapping API. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">DataSet Schema Files<BR>NDO creates schema files that allow you to create or manipulate data directly with ADO.NET and without using NDO. To do that you use the function ReadXMLSchema of the dataset class. The schema files have the ending .<I>ndo.xml</I> and are located in the <I>exe</I> directory of a project, which is typically <I>bin\debug or bin\release</I>. </DIV></LI>
<LI>
<DIV class=C1HBullet valign="bottom">SQL Pass Through<BR>You can transmit SQL queries to NDO and get objects as result. That works if the Result sets have the same columns as they are defined in the mapping file of the respective type. The combination of mapping-API and SQL Pass Through also allows you to create your own query language for NDO if you need it. </DIV></LI></UL></DIV>]]></s>
    </Topic>
    <Topic Key="{F8DC8A75-32F0-43A1-93A1-4743420F2ADE}" Name="exceptionsthrownbyndo" Title="Exceptions thrown by NDO" ContentsTitle="Exceptions thrown by NDO" Status="In Progress" CreatedOn="06-07-2006 18:40:15" ModifiedOn="21-04-2007 11:42:04" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{C5C0DFFC-DF80-4253-8AE9-2C726146A094}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H2>Exceptions thrown by NDO</H2></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<P class=MsoBodyText>NDO throws either objects of type NDOException, QueryException or InternalException. NDOException and QueryException objects both provide a Property ErrorNumber, which enables programmers to distinguish between different causes for the exception. Note that QueryException is derived from NDOException.</P>
<P class=MsoBodyText>The following two tables show all ErrorNumber values of NDOException and QueryException and their meaning.</P>
<DIV class=d2h_main_topic>
<P class=Note><B>Important:</B></P>
<P class=Note>NDO does not catch exceptions thrown by .NET library functions, like NullException. These exceptions will fall through to the user code.</P>
<P class=Note>All exceptions raised in the ADO.NET code will be caught by NDO and packed into an NDOException. The message of the caught exception will appear in the NDOException.</P>
<P class=Note>InternalExceptions shouldn’t happen at all. If they occur, they probably are sign of an NDO bug. Please report the exception text to the NDO developer support.</P></DIV>
<P class=berschr4nichtDTH-Inhalt>NDOException Error Numbers</P>
<P class=MsoBodyText>&nbsp;</P>
<DIV class=d2h_main_topic>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=1>
<TBODY>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>1 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>AddRange: container is null </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>2 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>InsertRange: container is null </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>3 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>SetRange: container is null </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>4 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>RemoveRange: container is null </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>5 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Adding related object [of type ...: ]container is null </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>6 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>DbType name ... unknown. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>7 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find mapping information for field ....... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>8 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find mapping information for relation .... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>9 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Invalid mapping: unknown field name ... in type . </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>10 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Assembly for Type ... not found. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>11 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Type.GetType for the type name ... failed; check your mapping File. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>12 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't construct update dependencies for class .. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>13 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Missing nested class MetaClass for type '...'; the assembly does not seem to be enhanced. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>14 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't convert ... into a .NET type. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>15 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find NDO dll in the registry. Please install NDO again </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>16 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find a Connection object with the ID ... in the mapping file; Check the mapping info for the class '..... '. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>17 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find mapping information for class ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>18 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Class ... has too many relations. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>19 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while attempting to create a database: .&nbsp; </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>20 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find field ....... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>21 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Polymorphic 1:n-relation w/o mapping table is not supported </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>22 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't load type: ..., ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>23 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Parent|ChildRelation Attribute missing in DualKey oid mapping. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>24 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find mapping table '...' in the schema. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>25 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Exception in dataAdapter.Fill: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>26 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Exception in dataAdapter.Update: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't convert ... into a DbType type. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>NDOOleDbProvider.GetDbType: Type ... can't be converted into an OleDbType. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>NDOOracleProvider.GetDbType: Typ name ... can't be converted into an OracleType </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>NDOOracleProvider.GetDbType: Type ... can't be converted into an OracleType. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>NDOSqlProvider.GetDbType: Type ... can't be converted into a SqlDbType. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>27 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>NDOSqlProvider.GetDbType: Type name ... can't be converted into a SqlDbType. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>28 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Relations to intermediate classes must have RelationMultiplicity.List. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>29 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't register OleDb update handler for data adapter of type .... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>30 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Persistence manager initialization error: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>31 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Parameter should implement IPersistenceCapable. Check if the type ... is enhanced. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>32 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>The provider of type ... doesn't support Autonumbered Ids. Use Self generated Ids instead. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>33 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't read autonumbered id from the database. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>34 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>There is no provider of Type ... in the NDOProviderFactory. Check if you have to add a NDO provider plug-in, or use [SqlServer|OleDb|Oracle|Access] as Connection Type </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>35 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Class '...': 'oid' is not a valid aggregation field for intermediate classes, because the oid is not mapped to a single column. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>36 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Wrong Relation: .... Relations to intermediate classes are not allowed.&nbsp; </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>37 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Exception of Type ... while updating or inserting data rows: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>38 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Exception of type ... while deleting data rows: . </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>39 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find table '...' in the schema. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>40 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Exception of type ... while executing a Query: .. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>41 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>One of the two defining relations of an intermediate class object is null - look at the documentation how to initialize intermediate class objects.&nbsp; </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>42 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Wrong argument type: MergeObjectContainer expects either an ObjectContainer or a ChangeSetContainer object as parameter. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>43 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>ObjectId.CompareTo: Can't compare with an object of type ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>44 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Connection object is null, or connection name is null or empty. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>45 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Mapping File ... doesn't exist. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>46 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Invalid PersistenceHandlerType: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>47 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Log path doesn't exist: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>48 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Script file ... doesn't exist. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>49 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't determine the path of the entry assembly - please pass a mapping file path as argument to the ctor of PersistenceManager. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>50 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while merging a ChangeSetContainer: Child . doesn't exist in relation ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>54 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>MakePersistent: Object is already persistent: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>55 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>1:n Relations with subclasses must use a mapping table: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>56 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Object is already part of another relation: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>57 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Cannot construct IList member .... Initialize the field in the default class constructor. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>58 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can only add transient objects in Composite relation ...-&gt;.... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>59 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can only add persistent objects in Assoziation .-&gt;.... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>60 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>AddRelatedObject: Related object must be assignable to type: .... Assigned object was: ... Type = ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>61 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't assign object of type ... to relation .... The parent object must be saved in an own transaction to retrieve the Id first. As an alternative you can use client generated Id's or a mapping table. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>62 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't assign object of type ... to relation .... Can't handle a polymorphic composite relation with cardinality 1 with autonumbered Id's. Use a mapping table or client generated Id's. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>63 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't assign an object of type ... to relation .. The child object must be saved in an own transaction to retrieve the Id first. As an alternative you can use client generated Id's or a mapping table. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>65 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Cannot remove transient related object ... from parent ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>67 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't remove object from the list .... The list is null. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>68 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while writing the embedded object {0} of an object of type {1}. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>69 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while writing to a field of an object of type .... Check your mapping file.... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>70 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while reading a field of an object of type .. Check your mapping file.... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>71 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while reading the embedded object {0} of an object of type {1}. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>72 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>LoadData: Object ... is not present in the database. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>73 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>LoadAndMarkDirty: Access to deleted objects is not allowed. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>74 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't clone IList of type .... ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>75 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't resolve subclass type code {0} of type {1} - check if your NDOTypes.xml exists. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>76 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Error while loading related objects: Can't find relation mapping for the field {0}.{1}. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>78 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>ReadId: Unknown type in Id Column: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>79 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>MakeTransient: Illegal state '...' for this operation </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>80 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't delete transient object: ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>82 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Cannot remove related object ... from parent .... Object must be removed through the parent. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>83 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't remove object of type ...; It is contained by an object of type ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>85 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>MakeHollow: Illegal state for this operation (...) </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>86 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>FindObject: Invalid object id. Object does not exist </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>87 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Refresh: Illegal state ... for this operation </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>88 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find foreign keys for the relations of the object ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>89 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't construct a connection object: .... Check your connection string. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>91 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't compute StDev or Var over more than one table. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>94 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>No Type Code for .... Check NDOTypes.xml </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>95 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Invalid Assembly Fullname: {0} </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>96 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>No mapping information found for relation ....... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>98 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find Oid mapping information for class ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>100 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't find Oid mapping information for class ... </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>102 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>No connection defined in class mapping for type .. Check your mapping file. </P></TD></TR>
<TR>
<TD vAlign=top width=61>
<P class=MsoBodyText>103 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Provider with type ... doesn't exist. Check your mapping file or plug-in directory</P></TD></TR>
<TR>
<TD width=61>
<P class=MsoBodyText>104 </P></TD>
<TD>
<P class=MsoBodyText>No type name column defined for generic type .... Check your <BR>mapping file</P></TD></TR>
<TR>
<TD width=61>
<P class=MsoBodyText>105 </P></TD>
<TD>
<P class=MsoBodyText>No type name column defined for generic type .... Check your <BR>mapping file</P></TD></TR>
<TR>
<TD width=61>
<P class=MsoBodyText>106</P></TD>
<TD>
<P class=MsoBodyText>Null entry in the TypeNameColumn of the type ...</P></TD></TR>
<TR>
<TD width=61>
<P class=MsoBodyText>107 </P></TD>
<TD>
<P class=MsoBodyText>Can't convert... to .... The source type has to be an IConvertible<BR>or has to provide a TypeConverter using a<BR>TypeConverterAttribute.</P></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P dir=ltr style="MARGIN-RIGHT: 0px">108</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Can't assign value of type&nbsp;... to XxxKey.Value. (This exception <BR>occurs, if you try to assign a Key value of a wrong type to a <BR>ObjectId object.)</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>109</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Wrong relation name in OidColumn definition for column .... The RelationName must denote an existing relation with RelationMultiplicity.Element.</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>110</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Count of Oid columns with relation name&nbsp;... is different from count of foreign key columns of the named relation. Expected: .... Count of OidColumns was: ....</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>111</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Invalid field type for relation .... Type: ...</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>112</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Type&nbsp;... has more than one autoincremented column. This is not supported by NDO. Check your mapping file or the OidColumn attributes in the source code.</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>113</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Wrong Oid mapping for type .... You can't mix OidColumns with and without a RelationName.</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>114</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Wrong oid index in query: '...'. Size of Oid column array of type&nbsp;... is ....</P></BLOCKQUOTE></TD></TR>
<TR>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>115</P></BLOCKQUOTE></TD>
<TD>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P>Column count between relation and Oid doesn't match. Type&nbsp;... has an oid column count of .... The Relation&nbsp;... has a foreign key column count of ....</P></BLOCKQUOTE></TD></TR></TBODY></TABLE><BR></DIV>
<DIV class=d2h_main_topic>&nbsp;</DIV>
<P class=berschr4nichtDTH-Inhalt>QueryException Error Numbers</P>
<P class=MsoBodyText>&nbsp;</P>
<DIV class=d2h_main_topic>
<TABLE class=MsoNormalTable cellSpacing=0 cellPadding=0 border=1>
<TBODY>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10001 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Empty string parameters are not allowed in Oracle. Use IS NULL instead. </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10002 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>... result objects in ExecuteSingle call </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10003 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Wrong ValueType or embedded type member name: ... </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10004 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't construct queries across different DB connections </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10005 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Wrong ValueType or embedded type member name: ... </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10006 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>Can't construct SQL condition string due to the polymorphic type ... </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10007 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>LoadRelations with wrong expression string: </P></TD></TR>
<TR>
<TD vAlign=top width=45>
<P class=MsoBodyText>10008 </P></TD>
<TD vAlign=top width=398>
<P class=MsoBodyText>FileTime or FileTimeUtc without value</P></TD></TR></TBODY></TABLE></DIV>
<P class=MsoBodyText>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{E5273F50-991B-4BEC-A26C-1E468EE82A34}" Name="deployment" Title="Deployment" ContentsTitle="Deployment" Status="In Progress" CreatedOn="10-08-2006 16:38:05" ModifiedOn="30-01-2007 13:05:38" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{33B9DA97-3F61-4F8D-A417-9FA47A791845}">
        <Notes/>
        <K Value="Set the Path Environment Variable"/>
        <s k="BodyText"><![CDATA[<DIV id=hspagebody valign="bottom">
<DIV class=d2h_main_nsbanner id=nsbanner>
<DIV class=d2h_main_titlerow id=TitleRow>
<DIV id=_d2hTitleNavigator>
<H3>Deployment</H3></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext valign="bottom">
<DIV class=d2h_main_topic>
<P class=MsoBodyText>For deploying your application with NDO, your installation program has to copy two library files <I>NDO.dll</I> and <I>NDOInterfaces.dll</I> either to the global assembly cache or to your application's directory. You can find these files in the NDO installation directory.</P>
<P class=MsoBodyText>Furthermore if your application uses a NDO provider plug-in, the corresponding dll must be copied to the user's machine. You have two options to make NDO find the plug-in:</P>
<DIV style="MARGIN-LEFT: 2em">
<OL>
<LI>
<DIV class=MsoBodyText>Installation of a NDO plug-in directory </DIV></LI>
<LI>
<DIV class=MsoBodyText>Manually registering the plug-in </DIV></LI></OL></DIV>
<P class=MsoBodyText>If the plug-in resides in the plug-in directory, NDO can find it automatically. NDO finds the plug-in directory under the following registry key:</P>
<P class=MsoBodyText>HKEY_LOCAL_MACHINE\Software\Text &amp; Talk GmbH\NDO\1.1</P>
<P class=MsoBodyText>Its default string value has to be set to the plug-in directory. You might use the <EM>UserSetup.msi</EM> file to install the directory and the registry key. This file can be found in <EM>&lt;NDOInstallationDirectory&gt;\UserSetup.</EM></P>
<P class=MsoBodyText>If you would like to avoid installing the registry key, you can directly reference the dll, create an instance of the provider, and register it at the NDOProviderFactory:</P>
<P class=CodeBase>// Needs an assembly reference to MySqlProvider.dll</P>
<P class=CodeBase>NDO.MySqlProvider.Provider p = new NDO.MySqlProvider();</P>
<P class=CodeBase>NDOProviderFactory.Instance["MySql"] = p;</P>
<P class=MsoBodyText>The string must match the Type attribute of the connection in the <I>NDOMapping.xml</I>:</P>
<P class=MsoBodyText><IMG alt="" src="ImagesExt/MySqlSettings.gif" border=0></P></DIV></DIV></DIV>]]></s>
    </Topic>
    <GlossaryItems/>
    <Nodes>
        <n key="{BD1636CD-3049-4ED2-ABF0-BFDA99852F81}" nt="0" ct="2" c="NDO Users Guide" i="-1" cfn="" tid="" url="">
            <n key="{65EE204D-4E4A-490C-BE51-71DF77FB287F}" nt="1" ct="1" c="About NDO" i="-1" cfn="" tid="{A64AF16C-7A8A-4D25-8D4D-549F21DC1D6D}" url="">
                <n key="{1422E8DF-380D-47EF-BAEA-D7335E2B027C}" nt="1" ct="1" c="Motivation" i="-1" cfn="" tid="{97E54BD9-31FB-49F7-B24C-20E242B4F48B}" url="">
                    <n key="{77DEA750-B291-4C74-854A-CAEFF0BBAFC7}" nt="1" ct="1" c="NDO makes Persistence simple" i="-1" cfn="" tid="{B0ACA8A6-BE86-451A-A387-0D185F8186AA}" url=""/>
                    <n key="{44EE92CC-D013-4AD1-AE76-0A9580084042}" nt="1" ct="1" c="NDO supports distributed applications" i="-1" cfn="" tid="{81CD2675-546B-4FB2-982E-4E14A9A3BD60}" url=""/>
                    <n key="{CF6FEA12-1607-4E69-90AF-3E497713F294}" nt="1" ct="1" c="SQL queries are replaced by a simple query language and syntax checking" i="-1" cfn="" tid="{8A2C15DC-27CA-4C87-BA49-03FF28B4AC07}" url=""/>
                    <n key="{E0BEBB02-6B8F-4EDF-AAF0-D566C12EC4AD}" nt="1" ct="1" c="NDO allows you to store objects in relational databases" i="-1" cfn="" tid="{FA4D23ED-0B97-411C-88D8-1F0169D549EA}" url=""/>
                    <n key="{04847EF5-5C43-4409-B828-7C6D27160775}" nt="1" ct="1" c="Persistence seems to have low Priority for Microsoft" i="-1" cfn="" tid="{DA210BBB-5061-49BD-A0FA-8C59E371532F}" url=""/>
                </n>
                <n key="{6EF96C28-23EC-437A-89CE-9BD90D23C47D}" nt="1" ct="1" c="How this Document is organized" i="-1" cfn="" tid="{983EB61B-95A5-4A5E-A772-0EEAE387E9B6}" url=""/>
                <n key="{C75CB792-4171-4FAC-A009-ED309F9BCF88}" nt="1" ct="1" c="Conventions in this document" i="-1" cfn="" tid="{0C5D5106-9C65-4080-974E-7F0D456F502F}" url=""/>
                <n key="{F00428CD-BBD4-415B-B8DB-E314DB72C531}" nt="1" ct="1" c="System Requirements" i="-1" cfn="" tid="{9CCCE3B5-9C1E-4F42-9C3B-9D5650CBBEA8}" url=""/>
                <n key="{2EB7B79F-1BC3-4B37-89F9-C908E25ECC19}" nt="1" ct="1" c="Trademarks" i="-1" cfn="" tid="{C3849DE4-CBE0-4011-A289-704A9581D65B}" url=""/>
                <n key="{3A139B84-2285-4E32-A815-70FF0E7E67B0}" nt="1" ct="1" c="Important Issues" i="-1" cfn="" tid="{5104EA05-E848-4115-96C6-ED07807F14F5}" url="">
                    <n key="{CC8BB2D0-C08C-4971-ACA1-02CDCAF54775}" nt="1" ct="1" c="Set the Path Environment Variable" i="-1" cfn="" tid="{6A2038E2-EF08-4274-A9A6-A5A00976525C}" url=""/>
                    <n key="{2CB641CA-31AB-4B21-A871-B3B58B3B157A}" nt="1" ct="1" c="Check the Installation" i="-1" cfn="" tid="{3EFB59E3-0B72-448B-9728-25543E2AE962}" url=""/>
                    <n key="{396EEE6B-95A6-4D17-98E9-723BCD654010}" nt="1" ct="1" c="Always Initialize Persistent Fields" i="-1" cfn="" tid="{2511F58D-C193-4186-A704-F7DF3000E008}" url=""/>
                    <n key="{AEF40478-3AC5-4BB0-8B5C-C639F79F9EDA}" nt="1" ct="1" c="Create Persistent Classes in Separated Assemblies" i="-1" cfn="" tid="{E8BD3373-1D1E-4951-BA05-D83661E6C3C7}" url=""/>
                    <n key="{B3083526-E1B2-4B05-B3EB-D8A8F0214B2E}" nt="1" ct="1" c="Deployment" i="-1" cfn="" tid="{E5273F50-991B-4BEC-A26C-1E468EE82A34}" url=""/>
                </n>
            </n>
            <n key="{4FECD332-8EB3-4A45-945C-94CEC36BE555}" nt="1" ct="1" c="Tutorial" i="-1" cfn="" tid="{3E1262B0-1825-491B-A941-FB9EA951AF80}" url="">
                <n key="{00D69BAD-AE35-4F8C-9E8A-CC509CA796EF}" nt="1" ct="1" c="Creating a persistent Class" i="-1" cfn="" tid="{47D30916-7B76-43D5-8C8C-19D99CCA9B4D}" url="">
                    <n key="{0C5EE568-C123-40A3-9F32-5DD57DA83D73}" nt="1" ct="1" c="Creating a new C# Solution" i="-1" cfn="" tid="{C26A992A-F3DA-4837-9FC7-3945652D84D4}" url=""/>
                    <n key="{1CB54449-3681-464D-87B3-67FB8584674B}" nt="1" ct="1" c="" i="-1" cfn="" tid="{0CB4A5F9-F875-437A-843D-C715583D50A5}" url=""/>
                    <n key="{35AEC33C-55AC-4893-9C92-A860928349AF}" nt="1" ct="1" c="The NDOPersistent Attribute" i="-1" cfn="" tid="{94A3D7CE-7824-4D7C-84D9-C12C36F6BA39}" url=""/>
                    <n key="{875E33F6-AC5D-42F5-8F38-549CA36B9D8C}" nt="1" ct="1" c="Activating the Enhancer" i="-1" cfn="" tid="{7DDA8A89-C01B-482A-BFB6-7BA5E9536FBF}" url=""/>
                    <n key="{664A9F6A-18AA-4954-8CBD-1368FD0FC5D7}" nt="1" ct="1" c="Creating the Client" i="-1" cfn="" tid="{A232FB56-868D-4D04-B80E-D2AB851189B6}" url=""/>
                    <n key="{CE1393B4-35DB-4CD0-85DC-BDB239C5AEAF}" nt="1" ct="1" c="First Build and Test Cycle" i="-1" cfn="" tid="{D239DA4A-98D5-4B58-894D-B3B1FC58C335}" url=""/>
                    <n key="{A376CD06-3280-415B-BC22-F0756D7842A5}" nt="1" ct="1" c="Querying Saved Data" i="-1" cfn="" tid="{607CFB17-7FBF-4E64-908E-E3F5CA33F62A}" url=""/>
                    <n key="{7617FF7D-CBBF-4655-8FA9-7A3C5D8F246C}" nt="1" ct="1" c="Deleting Objects" i="-1" cfn="" tid="{D3BD4891-0E58-4F79-AFCE-BEE9835F5DDD}" url=""/>
                </n>
                <n key="{05293E60-4B0F-4BF5-ADCB-2BB8DD4FDAC8}" nt="1" ct="1" c="Value Types as Members of persistent Classes" i="-1" cfn="" tid="{E5747C42-813B-4C53-A569-0AF6622EE5D0}" url="">
                    <n key="{5AF425FC-5025-4740-BD20-B3D607D4EEB6}" nt="1" ct="1" c="Handling Value Types" i="-1" cfn="" tid="{A47E5E17-5F69-44A6-83BD-6AD7116AD301}" url=""/>
                </n>
                <n key="{2C56F82A-F3BB-4CD6-8205-1D084B952158}" nt="1" ct="1" c="1:1 Relation" i="-1" cfn="" tid="{4EB139AB-AD0B-4CE8-B121-60C046117303}" url="">
                    <n key="{B2813A57-C95E-4C48-8A3A-24347652C283}" nt="1" ct="1" c="Creating the Address Class" i="-1" cfn="" tid="{07B40D19-D7A6-4144-8DDA-BC3639F6A976}" url=""/>
                    <n key="{A4C89447-D8F1-4274-8B4D-C4E7740F4E97}" nt="1" ct="1" c="Referencing an Address in the Employee Table" i="-1" cfn="" tid="{6CAD4D24-EBC5-489D-B01E-F07A637A04A9}" url=""/>
                    <n key="{AA38E02E-CDEA-4FC6-AD2E-6D641C5C47D0}" nt="1" ct="1" c="Creating the Client Application" i="-1" cfn="" tid="{083F1180-BE6A-46FC-BD2F-FD2B9C70F9B7}" url=""/>
                    <n key="{B5FDFB3F-8E7C-4A49-B6DC-7C5125BAA8A7}" nt="1" ct="1" c="Querying the saved Data" i="-1" cfn="" tid="{443EA5E7-23D9-40A5-B214-B3825F0A59C1}" url=""/>
                </n>
                <n key="{1993FD0B-90E7-46C6-82D8-67327DD223D2}" nt="1" ct="1" c="1:n Relation" i="-1" cfn="" tid="{41B3C2A1-2593-4C05-BFB5-0A393C2EAB67}" url="">
                    <n key="{2E1B0B2D-1C16-407C-8F26-E5592943A670}" nt="1" ct="1" c="Create the Class Travel" i="-1" cfn="" tid="{90BFA9B4-5D2E-47BA-8A37-0C60789BE24A}" url=""/>
                    <n key="{CF584CCF-18A0-403E-B8AA-5504125A34A9}" nt="1" ct="1" c="Creating the Client Application" i="-1" cfn="" tid="{9C8C2AC0-7DCB-4DA5-B712-66D8B19D3646}" url=""/>
                    <n key="{0BDDE139-45D9-402A-8D9B-195960D025C7}" nt="1" ct="1" c="Querying the saved Data" i="-1" cfn="" tid="{B153BB03-6A55-40D3-B294-61615684A0DE}" url=""/>
                </n>
                <n key="{F0201EC9-AFAD-44A2-B4A7-6B81416D2176}" nt="1" ct="1" c="n:n Relations" i="-1" cfn="" tid="{C4AF0CEB-4401-4290-910A-D2D8C05CEB99}" url="">
                    <n key="{C3FA442D-EF5A-482D-BF6A-41515D8C7BB1}" nt="1" ct="1" c="Creating the Country Class" i="-1" cfn="" tid="{4A3F7A4A-E752-48B2-B0D2-5C3AF7FB22FB}" url=""/>
                    <n key="{C34A7B7C-90CB-4D37-BB28-FDA7A83F2557}" nt="1" ct="1" c="Relation to the Country Class in the Travel Class" i="-1" cfn="" tid="{F88A3441-8BCC-4516-9824-5B2836E6BE69}" url=""/>
                    <n key="{6EA16787-1C6F-45B3-8C43-BBB26B739232}" nt="1" ct="1" c="Creating the Client Application" i="-1" cfn="" tid="{C1F0B7DA-2770-4703-BFE2-CD75D477D350}" url=""/>
                    <n key="{4B42D426-7491-4A55-AD94-9CDB9DEDCCAE}" nt="1" ct="1" c="Playing around with Queries" i="-1" cfn="" tid="{3E790B88-2B8A-406C-8CB7-D67638CD90F2}" url=""/>
                </n>
                <n key="{C9EC5D73-668A-45E5-A597-DFCD738A9075}" nt="1" ct="1" c="Inheritance without Polymorphy" i="-1" cfn="" tid="{A95CCE4D-9CF5-4846-A541-58209A9E4988}" url="">
                    <n key="{CC83AE13-E980-4562-8AB8-12D0D55F5020}" nt="1" ct="1" c="Creating the Class PictureHeader" i="-1" cfn="" tid="{E3E77222-7B8E-4508-8B33-982183F60B22}" url=""/>
                    <n key="{0494A3B7-336B-4200-B929-58DC48AE157F}" nt="1" ct="1" c="Creating the Class Picture" i="-1" cfn="" tid="{0CE2B9BB-179B-464B-80B6-0FCC50C40784}" url=""/>
                    <n key="{BCEF8C31-0A6C-400F-B244-7A644698C0F3}" nt="1" ct="1" c="Storing a Picture" i="-1" cfn="" tid="{7D1B406F-9E25-470B-8367-FA42D3E7CA39}" url=""/>
                    <n key="{56F228F9-E736-4C29-AD0D-628FAD3BE4C1}" nt="1" ct="1" c="Querying Header and Picture Data" i="-1" cfn="" tid="{EB990F72-8E03-4B41-AE5E-0302B1407EF7}" url=""/>
                </n>
                <n key="{5CA38004-EC54-468D-9CA5-9AD4ED2E2D72}" nt="1" ct="1" c="Polymorphy" i="-1" cfn="" tid="{E718119F-E71C-431F-B85C-0D525523EBD8}" url="">
                    <n key="{B642BBAB-1FD6-48D8-BE1D-968930471B48}" nt="1" ct="1" c="Activating Polymorphy" i="-1" cfn="" tid="{383B0965-7929-4D43-8E0F-1D5A90215D3A}" url=""/>
                    <n key="{2623C89E-43CC-4E5C-91B4-7514B5061306}" nt="1" ct="1" c="Creating the class Expense" i="-1" cfn="" tid="{385E8981-F662-4200-AE03-E162E086B051}" url=""/>
                    <n key="{D85389C6-4565-4507-A2C6-63E7CE78FF3E}" nt="1" ct="1" c="Creating the Classes Receipt, MileageAllowance and PerDiemAllowance" i="-1" cfn="" tid="{C6ECFBC9-DB12-46F6-B3C9-AC7B9BE66E00}" url=""/>
                    <n key="{0AD82E4C-42DF-4088-A88F-4A89E9E50A9B}" nt="1" ct="1" c="Relation of Travel to Expense" i="-1" cfn="" tid="{40499301-F09D-4B05-A858-F22DAE2E9CB3}" url=""/>
                    <n key="{D4108867-84AB-44DA-915A-0249AA200C8A}" nt="1" ct="1" c="A Factory for Expense Items" i="-1" cfn="" tid="{96F95DA7-5F68-4971-8600-4058ED63E08B}" url=""/>
                    <n key="{C236D057-C146-4403-B7FD-1EC6C646C93E}" nt="1" ct="1" c="Using the Factory" i="-1" cfn="" tid="{D80D6EBB-5F7D-430C-A06F-6464A6442FE6}" url=""/>
                    <n key="{0E0E12CD-D43B-47CB-8424-CD7EAC40B369}" nt="1" ct="1" c="Generating Data for Testing" i="-1" cfn="" tid="{1770BFC2-D76D-4AE9-8761-EDBAF788FF68}" url=""/>
                    <n key="{B4017B81-1114-41DD-9E3C-77F2B4E45D74}" nt="1" ct="1" c="Quering the data" i="-1" cfn="" tid="{ABFEB38D-5612-4439-B7A6-F7F115891BFF}" url=""/>
                    <n key="{216704BE-EE1D-488E-9BFE-7E830AAC9B82}" nt="1" ct="1" c="Unleashing the Business Logic" i="-1" cfn="" tid="{94AD1DF1-BB1B-493E-8C51-D0D9207101CF}" url=""/>
                </n>
            </n>
            <n key="{46E32B0B-33CD-4CF7-93AB-41B5FC08388B}" nt="1" ct="1" c="Concepts" i="-1" cfn="" tid="{7CCE3975-EFDD-48CD-8920-4BFE044214AD}" url="">
                <n key="{C0F51D6C-2252-43C6-8E58-746F86FAFD33}" nt="1" ct="1" c="What is NDO?" i="-1" cfn="" tid="{1A86CE48-472B-4AD6-96C0-6EEA7EB99B30}" url=""/>
                <n key="{4A6B7A32-0765-4D92-BFB0-E0665AFBB392}" nt="1" ct="1" c="An Example" i="-1" cfn="" tid="{C8BABDEF-652D-4460-901A-FE26327BEE4E}" url="">
                    <n key="{FBE49AEF-C11F-4BB9-B5E5-13253546C44A}" nt="1" ct="1" c="A Travel Expense Accounting System" i="-1" cfn="" tid="{0FB5CC69-6E64-4FEE-A8B8-954D939EE1F4}" url=""/>
                    <n key="{2DB1D873-CE29-4A10-9534-092E85486107}" nt="1" ct="1" c="How to implement a Business Rule?" i="-1" cfn="" tid="{87D9AD44-46DA-4602-8572-B0CD1AD9B4BC}" url=""/>
                    <n key="{A35E085D-BF6C-49A0-B487-D2E116F9A597}" nt="1" ct="1" c="Problems with Object Systems" i="-1" cfn="" tid="{DF5DAAFC-E2EB-414D-8E7C-B7112661A999}" url=""/>
                    <n key="{8FCDA574-FEE9-4057-981E-9E21B6F3F48F}" nt="1" ct="1" c="Transparent Object Persistence" i="-1" cfn="" tid="{A6C46484-BCB1-4FD7-9997-BA5EC6D567A6}" url=""/>
                    <n key="{1EBE5BBB-0D90-4420-AC77-6E3964271EA2}" nt="1" ct="1" c="Conclusion" i="-1" cfn="" tid="{F908E9C6-DD33-4EE5-8A31-31FDEFC7FA57}" url=""/>
                </n>
                <n key="{BA27FB2D-6B51-43AB-80F7-DA7A42DE415D}" nt="1" ct="1" c="Architecture" i="-1" cfn="" tid="{734884AE-34C0-4CAD-B0C2-62F5D22B7987}" url=""/>
                <n key="{E5D25DD3-4F82-4FE4-9F05-E9BBC0D83C30}" nt="1" ct="1" c="The NDO Toolbar" i="-1" cfn="" tid="{BD56E54D-CF18-4666-9282-917B385C7D1D}" url=""/>
                <n key="{2DDDE35E-5032-4065-8F11-DBB936A340B2}" nt="1" ct="1" c="The NDO Components" i="-1" cfn="" tid="{C1ED5BB7-6527-4678-ACA1-3A828ED8BA69}" url=""/>
                <n key="{94DD5AA3-D309-49EB-A06E-9DD4467BD7C8}" nt="1" ct="1" c="The Enhancer" i="-1" cfn="" tid="{0BFAB05F-38B6-488A-84DB-457471E69F0A}" url="">
                    <n key="{0D36C7A8-02FA-4964-9AE7-569BF8BA48F7}" nt="1" ct="1" c="Mapping file and schema file" i="-1" cfn="" tid="{AA1BDEEF-EBCD-4225-AD6F-29A0A2EC687D}" url=""/>
                    <n key="{24891671-1D87-429D-BF6E-AC38DB4E54A8}" nt="1" ct="1" c="The Enhancer Configuration Dialog" i="-1" cfn="" tid="{90EB6B22-92B1-450F-B69B-6EA13347A699}" url=""/>
                    <n key="{816579E2-C498-40AD-B22A-2EDEFEF2D82D}" nt="1" ct="1" c="The Command Line Enhancer" i="-1" cfn="" tid="{EA447247-AD07-441D-B802-5CD280ED0DC9}" url=""/>
                </n>
                <n key="{89F484CD-06E7-42AE-AABF-01EB2675C2B2}" nt="1" ct="1" c="Objects and Object Identity" i="-1" cfn="" tid="{D5BBDD16-A5EF-41B2-A528-0CADE31FCEBC}" url=""/>
                <n key="{70DC84E8-40A9-4E88-B5C5-E48F9BAD6258}" nt="1" ct="1" c="Collision Detection" i="-1" cfn="" tid="{15F7641D-62FC-4FB1-BE41-8241050A616A}" url="">
                    <n key="{BBB28B37-8830-495D-8632-7A344BBD2CD1}" nt="1" ct="1" c="Reacting to a Collision" i="-1" cfn="" tid="{A48825B1-305F-4C86-A80F-1C95A920B4FE}" url=""/>
                    <n key="{C906C663-4B11-4B5D-973F-6B4310E3015D}" nt="1" ct="1" c="Collision Detection as Default" i="-1" cfn="" tid="{972D3897-F36C-4655-8DD9-F91B178EF515}" url=""/>
                </n>
                <n key="{BF75A581-9F14-4D01-8A08-90126A771BE2}" nt="1" ct="1" c="Object States and Life Cycle" i="-1" cfn="" tid="{3A25E819-3AE0-4E4E-9ADE-63E0376029A3}" url=""/>
                <n key="{947A902B-56A5-488B-9016-D4C4D66EB0A1}" nt="1" ct="1" c="Hollow Objects and Prefetches" i="-1" cfn="" tid="{0BD01A70-1D46-4703-8873-AAD0C6FD799F}" url="">
                    <n key="{A77C8911-76FA-4E95-9135-97B8E8BB56BF}" nt="1" ct="1" c="An Example for Hollow Objects" i="-1" cfn="" tid="{14BE5634-CDE6-44B5-B1A8-B113CDC77758}" url=""/>
                    <n key="{7BBD3F6E-5360-43B8-883E-BC0D9D0099A3}" nt="1" ct="1" c="Prefetches" i="-1" cfn="" tid="{642A6959-4BC2-460D-A6FD-383EEC02DF90}" url=""/>
                </n>
                <n key="{2C8B7995-1CF2-4FC7-B99B-E4DC14CC5947}" nt="1" ct="1" c="The PersistenceManager" i="-1" cfn="" tid="{023AACBE-6BD0-4C97-89EA-5943E521B9AB}" url=""/>
                <n key="{5FB2C2D6-5843-45CC-834A-290B5674269D}" nt="1" ct="1" c="Queries with NDOql" i="-1" cfn="" tid="{D316A3D7-7F59-4C9A-8A11-D3D041805B66}" url="">
                    <n key="{908A3154-CCBC-4EE6-B702-AF65072DB343}" nt="1" ct="1" c="Column Names" i="-1" cfn="" tid="{1BD3A25B-24EF-446B-8575-53E0DE4CD37C}" url=""/>
                    <n key="{38A4C428-BBAE-4B6F-BAD2-90B304EF0FC3}" nt="1" ct="1" c="QueryHelper Classes" i="-1" cfn="" tid="{C1749B3E-0350-45C5-8047-99F41ACD97BC}" url=""/>
                    <n key="{B52A0D78-C738-4ACA-BA39-D7C0BB967E8B}" nt="1" ct="1" c="Wildcards and Brackets" i="-1" cfn="" tid="{366D55E8-8971-4C4E-A388-89AC5D71F085}" url=""/>
                    <n key="{B3462DEF-453F-49AC-98CF-AE48CE23CEF6}" nt="1" ct="1" c="Sorting" i="-1" cfn="" tid="{D3306A97-E0D0-4CBB-9679-DD7A8683F247}" url=""/>
                    <n key="{501FA585-8246-42FF-83C2-A8AA17A30B4C}" nt="1" ct="1" c="Parameters" i="-1" cfn="" tid="{AAB9471F-8670-45F6-990D-9AEAB7A1FD4F}" url=""/>
                    <n key="{82ADAC3E-755B-4832-A1B3-9F0F5967D133}" nt="1" ct="1" c="Some samples for valid queries:" i="-1" cfn="" tid="{69F958BC-3B46-4BB1-8659-BFC8139589B5}" url=""/>
                    <n key="{5F86600E-2106-4F61-B7FD-101E568BEA02}" nt="1" ct="1" c="SQL Queries" i="-1" cfn="" tid="{E75B8FA0-5623-4AFF-8906-742B8720D7C1}" url=""/>
                    <n key="{8D289896-D26B-4382-8D54-5B56ADFC14A8}" nt="1" ct="1" c="Queries with non-hollow Objects" i="-1" cfn="" tid="{F8BA51A3-AA03-4383-9DBA-CB1DB3F68B2E}" url=""/>
                    <n key="{06900BCB-DDF3-411B-A3E1-52A7373F5365}" nt="1" ct="1" c="Generic Queries" i="-1" cfn="" tid="{D13E2279-C702-41B2-A783-9560B8740316}" url=""/>
                    <n key="{DED49F73-41BE-44EE-88C7-2CA30AA8A166}" nt="1" ct="1" c="Syntax" i="-1" cfn="" tid="{C3BB7950-24D7-4E21-B80D-384335AEA1ED}" url=""/>
                    <n key="{CCA11FA1-4CD0-41D7-AAE4-1B63DEEA2675}" nt="1" ct="1" c="Relations in Queries" i="-1" cfn="" tid="{8A4EA9FB-26CF-4B41-85D2-57F2CF8DC856}" url=""/>
                </n>
                <n key="{E6D8765B-F160-4540-BFC7-32456CC68AE3}" nt="1" ct="1" c="Storable Data Types" i="-1" cfn="" tid="{5C3C1634-A385-4303-A2DF-95D8B7880DF2}" url=""/>
                <n key="{7F3CA2E3-F0CE-46CA-9B4D-FEF497B954BA}" nt="1" ct="1" c="ValueTypes" i="-1" cfn="" tid="{5C27FB2B-7408-4136-BAE2-7CA6019B635F}" url=""/>
                <n key="{38D70336-262E-4FB9-B623-193ADCCE9ED6}" nt="1" ct="1" c="Embedded Types" i="-1" cfn="" tid="{AC07719D-D273-4797-AFF3-97AF012ADE1E}" url=""/>
                <n key="{7E16E7F9-7EDC-4564-84B1-D3807EB7015A}" nt="1" ct="1" c="Generic Types" i="-1" cfn="" tid="{B14E3234-AFD9-48D5-84BE-DFC50320DE68}" url=""/>
                <n key="{AA11418C-CCFA-47F4-BFC0-978D173BD8D3}" nt="1" ct="1" c="Relations in NDO" i="-1" cfn="" tid="{964874DF-33AE-400F-B098-6B1D75EF2B0D}" url="">
                    <n key="{7BA8CBBF-417B-4071-8B1C-D28E6C12FD7A}" nt="1" ct="1" c="Table Relations in Relational Databases" i="-1" cfn="" tid="{687651B8-A31F-48F4-B82D-0FCF96D3BAD6}" url=""/>
                    <n key="{107DE822-4C63-4A0B-BC42-A008A73A0007}" nt="1" ct="1" c="Implementation of Relations in NDO" i="-1" cfn="" tid="{3E1122A8-F964-4DF2-83CE-82A28CA65722}" url=""/>
                    <n key="{B124138B-80B8-45DD-A757-DE645D5A05E0}" nt="1" ct="1" c="The NDORelation attribute" i="-1" cfn="" tid="{20F6454F-2007-4D99-AF2B-D8ED7F4AC9D9}" url=""/>
                    <n key="{C3219610-4727-4A87-A1FC-88826504E4DA}" nt="1" ct="1" c="Relations of Cardinality n" i="-1" cfn="" tid="{0ABB0B37-59E7-4FA4-9481-CD31A814C5D9}" url=""/>
                    <n key="{07260C3D-AB77-40E2-9E2F-2EEB1B3B71DF}" nt="1" ct="1" c="Composition and Association Relations" i="-1" cfn="" tid="{EDE200C7-EC90-4438-A35D-E32B76C65C9B}" url=""/>
                    <n key="{ADBBB34A-DC4F-4B95-941E-ED1E45E692D1}" nt="1" ct="1" c="Relation Management in NDO" i="-1" cfn="" tid="{42A8BF37-8503-4881-876A-9A5814145A56}" url=""/>
                </n>
                <n key="{202419C2-B4F0-456C-83FB-20CEFBD8D95C}" nt="1" ct="1" c="Inheritance" i="-1" cfn="" tid="{552415C5-8FAF-4F04-84AC-64FBF3B026BA}" url="">
                    <n key="{E5D37486-9C58-4754-8218-0FC674B452E3}" nt="1" ct="1" c="Non-polymorphic Inheritance" i="-1" cfn="" tid="{1D990AAC-8A1B-4A3D-8050-70051EB858C3}" url=""/>
                    <n key="{6E7B03A5-5563-46BB-80E6-71C016146FB8}" nt="1" ct="1" c="Mapping more than one class to the same table" i="-1" cfn="" tid="{D88B48EB-2583-4DA2-8A6A-F799D5126C5C}" url=""/>
                    <n key="{50F37385-3B7F-4586-B0A9-C80052DE6FAA}" nt="1" ct="1" c="Polymorphic Inheritance" i="-1" cfn="" tid="{AB8063C5-AF31-4720-BAF4-089AAB5CD055}" url=""/>
                </n>
                <n key="{7AB0696E-E284-4134-90DA-FD147320F611}" nt="1" ct="1" c="ObjectHelper Class" i="-1" cfn="" tid="{8CE69BE4-9E7A-45F2-BBDC-A3F65A84EAA2}" url=""/>
                <n key="{0C783774-A751-442A-B9A5-A796D71345C3}" nt="1" ct="1" c="The Mapping file" i="-1" cfn="" tid="{214635B8-8227-47F7-B2BF-51280980D471}" url=""/>
                <n key="{4BEBE21B-6810-42FC-8B2C-546E8725E4AB}" nt="1" ct="1" c="Transactions" i="-1" cfn="" tid="{05F1B4AB-F06C-4573-95A2-3C14279B95D5}" url="">
                    <n key="{906FCF9B-BFE1-4262-BE18-263E7C645886}" nt="1" ct="1" c="Optimistic and Pessimistic Transactions" i="-1" cfn="" tid="{4CB119EF-4D03-4108-A0A6-77742834AACE}" url=""/>
                    <n key="{6D1F3E8D-5EB6-4DA6-87E9-833406901165}" nt="1" ct="1" c="Local and distributed Transactions" i="-1" cfn="" tid="{8A447DDA-19D5-4F43-B45B-F4FBD5EE9586}" url=""/>
                    <n key="{9A5A4FB4-DF6A-4C38-A739-6192F68BC9EB}" nt="1" ct="1" c=".NET Enterprise Services" i="-1" cfn="" tid="{0FAE831D-8999-4C46-B191-4E3FA60C5BEB}" url=""/>
                    <n key="{D104D1ED-130A-4895-9643-385EC136B3F6}" nt="1" ct="1" c="Local Transactions in NDO" i="-1" cfn="" tid="{E17E56D8-73B3-4435-9D6C-A360AE2D1FD0}" url=""/>
                    <n key="{FB3B1EBA-178E-4370-A49B-BA7FFDF84990}" nt="1" ct="1" c="Distributed Transactions in NDO" i="-1" cfn="" tid="{A95C09B5-22DD-40E4-AEA8-5E5DAEAC205B}" url=""/>
                    <n key="{011A9780-23A4-49FB-B854-9F9E49FDBC49}" nt="1" ct="1" c="End of Transaction" i="-1" cfn="" tid="{CFF3FF42-4DF5-4F05-A38E-87F91DF45C01}" url=""/>
                </n>
                <n key="{32657307-7B00-488E-B9C5-293095831B69}" nt="1" ct="1" c="DataBinding in .NET 1.1" i="-1" cfn="" tid="{F1B3AF6D-02E1-47AF-BC08-7288E00B2FC4}" url="">
                    <n key="{78F0BFFE-2DF6-45CD-95CD-DA60A5BA1FA3}" nt="1" ct="1" c="Changed Events" i="-1" cfn="" tid="{BADECE18-8E94-4BAB-87FD-7D8B511CD2F3}" url=""/>
                </n>
                <n key="{04C37461-915B-4069-8408-C5B2CC1D50B4}" nt="1" ct="1" c="Distributable Containers" i="-1" cfn="" tid="{25288E74-AEFA-4841-83A7-2237DDACEAF4}" url=""/>
                <n key="{7C94001A-463E-4A7C-BDD4-A86612416E3D}" nt="1" ct="1" c="Extending NDO" i="-1" cfn="" tid="{C211EF2B-A518-4EB7-97E6-36EFA8FA4C77}" url=""/>
                <n key="{0C81ACE1-8808-4C1E-91EB-BD76072886B1}" nt="1" ct="1" c="Exceptions thrown by NDO" i="-1" cfn="" tid="{F8DC8A75-32F0-43A1-93A1-4743420F2ADE}" url=""/>
            </n>
        </n>
    </Nodes>
    <Tasks>
        <Task Key="{89139C6E-5851-41A5-968F-78218DDC16AB}" Priority="2" Title="" AssignedTo="" TopicID="" Status="Not Started" CreatedOn="06-07-2006 18:40:17" CreatedBy="Import" ModifiedOn="06-07-2006 18:40:17" ModifiedBy="Oertwig"><![CDATA[The import detected 238 broken links, and 360 broken images. It is recommended that you run the 'Project Verify Links...' command before attempting to build your project.]]></Task>
    </Tasks>
    <BuildProfiles>
        <BuildProfile ID="{4470589E-5B02-47A7-98C1-EDC525A59797}" Name="NDO" OutputDirectory="Output\" CompileHelpFile="True" HTMLHelpVersion="2" H2Namespace="HoT.NDOUsersGuide" H2FileID="NDOUsersGuide" H2PlugIn="MS.VSIPCC.v80" HelpFileName="Output\NDOUsersGuide.hxs" UseBuildFlags="False" ProjectTitle="NDO Users Guide" RemoveOutputFiles="True" BuildFlags="" IncludeInBuild="True" DefaultTopicID="" LocaleID="0"/>
    </BuildProfiles>
    <ProjectProperties/>
</HSProject>

