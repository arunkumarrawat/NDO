//
// Copyright (C) 2002-2008 HoT - House of Tools Development GmbH 
// (www.netdataobjects.com)
//
// Author: Mirko Matytschak
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License (v3) as published by
// the Free Software Foundation.
//
// If you distribute copies of this program, whether gratis or for 
// a fee, you must pass on to the recipients the same freedoms that 
// you received.
//
// Commercial Licence:
// For those, who want to develop software with help of this program 
// and need to distribute their work with a more restrictive licence, 
// there is a commercial licence available at www.netdataobjects.com.
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//


using System;
using System.Reflection;
using System.Diagnostics;
using System.Collections;
using NDO;
using NDO.Mapping;
using NUnit.Framework;
using RelationTestClasses;

namespace RelationUnitTests
{

public class PmFactory
{
	static PersistenceManager pm;
	public static PersistenceManager NewPersistenceManager()
	{
		if (pm == null)
		{
			pm = new PersistenceManager(@"C:\Projekte\NDO\UnitTestGenerator\UnitTests\bin\Debug\NDOMapping.xml");
			pm.LogPath = @"C:\Projekte\NDO\UnitTestGenerator";
		}
		else
		{
			pm.UnloadCache();
		}
		return pm;
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwNgnOtNgnAuto
{
	AgrDir1NoTblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1NoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwNgnOtNgnAuto
{
	AgrDir1TblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwNgnOtNgnAuto
{
	AgrBi11NoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwNgnOtNgnAuto
{
	AgrBi11TblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwNgnOtNgnAuto
{
	AgrDirnNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrDirnNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDirnNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwNgnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnNoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDirnNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwNgnOtNgnAuto
{
	AgrDirnTblOwNgnOtNgnAutoLeft ownVar;
	AgrDirnTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDirnTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDirnTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwNgnOtNgnAuto
{
	AgrBin1NoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBin1NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBin1NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwNgnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1NoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBin1NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwNgnOtNgnAuto
{
	AgrBin1TblOwNgnOtNgnAutoLeft ownVar;
	AgrBin1TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBin1TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBin1TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwNgnOtNgnAuto
{
	AgrBi1nNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBi1nNoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi1nNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwNgnOtNgnAuto
{
	AgrBi1nTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi1nTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwNgnOtNgnAuto
{
	AgrBinnTblOwNgnOtNgnAutoLeft ownVar;
	AgrBinnTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBinnTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBinnTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBinnTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwNgnOtNgnAuto
{
	CmpDir1NoTblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1NoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwNgnOtNgnAuto
{
	CmpDir1TblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwNgnOtNgnAuto
{
	CmpBi11NoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwNgnOtNgnAuto
{
	CmpBi11TblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwNgnOtNgnAuto
{
	CmpDirnNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpDirnNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDirnNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwNgnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnNoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDirnNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwNgnOtNgnAuto
{
	CmpDirnTblOwNgnOtNgnAutoLeft ownVar;
	CmpDirnTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDirnTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDirnTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwNgnOtNgnAuto
{
	CmpBin1NoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBin1NoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBin1NoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwNgnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1NoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBin1NoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1NoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwNgnOtNgnAuto
{
	CmpBin1TblOwNgnOtNgnAutoLeft ownVar;
	CmpBin1TblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBin1TblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBin1TblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1TblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwNgnOtNgnAuto
{
	CmpBi1nNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBi1nNoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi1nNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwNgnOtNgnAuto
{
	CmpBi1nTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi1nTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwNgnOtNgnAuto
{
	CmpBinnTblOwNgnOtNgnAutoLeft ownVar;
	CmpBinnTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBinnTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBinnTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBinnTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwNgnOtNgnAuto
{
	AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwNgnOtNgnAuto
{
	AgrDir1OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwNgnOtNgnAuto
{
	AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwNgnOtNgnAuto
{
	AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwNgnOtNgnAuto
{
	AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwNgnOtNgnAuto
{
	AgrDirnOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwNgnOtNgnAuto
{
	AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwNgnOtNgnAuto
{
	AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwNgnOtNgnAuto
{
	AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi1nOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwNgnOtNgnAuto
{
	AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBinnOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwNgnOtNgnAuto
{
	CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwNgnOtNgnAuto
{
	CmpDir1OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwNgnOtNgnAuto
{
	CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwNgnOtNgnAuto
{
	CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwNgnOtNgnAuto
{
	CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwNgnOtNgnAuto
{
	CmpDirnOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwNgnOtNgnAuto
{
	CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpconNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwNgnOtNgnAuto
{
	CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwNgnOtNgnAuto
{
	CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi1nOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwNgnOtNgnAuto
{
	CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpconTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBinnOwnpconTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwNgnOtNgnAuto
{
	AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwNgnOtNgnAuto
{
	AgrDir1OthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwNgnOtNgnAuto
{
	AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwNgnOtNgnAuto
{
	AgrBi11OthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwNgnOtNgnAuto
{
	AgrDirnOthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrDirnOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDirnOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDirnOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDirnOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwNgnOtNgnAuto
{
	AgrBin1OthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrBin1OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBin1OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBin1OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBin1OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwNgnOtNgnAuto
{
	AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwNgnOtNgnAuto
{
	AgrBi1nOthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwNgnOtNgnAuto
{
	AgrBinnOthpconTblOwNgnOtNgnAutoLeft ownVar;
	AgrBinnOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBinnOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBinnOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBinnOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwNgnOtNgnAuto
{
	CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1OthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwNgnOtNgnAuto
{
	CmpDir1OthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwNgnOtNgnAuto
{
	CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11OthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwNgnOtNgnAuto
{
	CmpBi11OthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwNgnOtNgnAuto
{
	CmpDirnOthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpDirnOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDirnOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDirnOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDirnOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwNgnOtNgnAuto
{
	CmpBin1OthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpBin1OthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBin1OthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBin1OthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBin1OthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwNgnOtNgnAuto
{
	CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpconNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwNgnOtNgnAuto
{
	CmpBi1nOthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwNgnOtNgnAuto
{
	CmpBinnOthpconTblOwNgnOtNgnAutoLeft ownVar;
	CmpBinnOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBinnOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBinnOthpconTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBinnOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwNgnOtNgnAuto
{
	AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwNgnOtNgnAuto
{
	AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwNgnOtNgnAuto
{
	AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwNgnOtNgnAuto
{
	CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwNgnOtNgnAuto
{
	CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwNgnOtNgnAuto
{
	CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwNgnOtNgnGuid
{
	AgrDir1NoTblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwNgnOtNgnGuid
{
	AgrDir1TblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwNgnOtNgnGuid
{
	AgrBi11NoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwNgnOtNgnGuid
{
	AgrBi11TblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwNgnOtNgnGuid
{
	AgrDirnNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrDirnNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDirnNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDirnNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwNgnOtNgnGuid
{
	AgrDirnTblOwNgnOtNgnGuidLeft ownVar;
	AgrDirnTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDirnTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDirnTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwNgnOtNgnGuid
{
	AgrBin1NoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBin1NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBin1NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBin1NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwNgnOtNgnGuid
{
	AgrBin1TblOwNgnOtNgnGuidLeft ownVar;
	AgrBin1TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBin1TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBin1TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwNgnOtNgnGuid
{
	AgrBi1nNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi1nNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwNgnOtNgnGuid
{
	AgrBi1nTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi1nTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwNgnOtNgnGuid
{
	AgrBinnTblOwNgnOtNgnGuidLeft ownVar;
	AgrBinnTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBinnTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBinnTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBinnTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwNgnOtNgnGuid
{
	CmpDir1NoTblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwNgnOtNgnGuid
{
	CmpDir1TblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwNgnOtNgnGuid
{
	CmpBi11NoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwNgnOtNgnGuid
{
	CmpBi11TblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwNgnOtNgnGuid
{
	CmpDirnNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpDirnNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDirnNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDirnNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwNgnOtNgnGuid
{
	CmpDirnTblOwNgnOtNgnGuidLeft ownVar;
	CmpDirnTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDirnTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDirnTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwNgnOtNgnGuid
{
	CmpBin1NoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBin1NoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBin1NoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBin1NoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1NoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwNgnOtNgnGuid
{
	CmpBin1TblOwNgnOtNgnGuidLeft ownVar;
	CmpBin1TblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBin1TblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBin1TblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1TblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwNgnOtNgnGuid
{
	CmpBi1nNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi1nNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwNgnOtNgnGuid
{
	CmpBi1nTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi1nTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwNgnOtNgnGuid
{
	CmpBinnTblOwNgnOtNgnGuidLeft ownVar;
	CmpBinnTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBinnTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBinnTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBinnTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwNgnOtNgnGuid
{
	AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwNgnOtNgnGuid
{
	AgrDir1OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwNgnOtNgnGuid
{
	AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwNgnOtNgnGuid
{
	AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwNgnOtNgnGuid
{
	AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwNgnOtNgnGuid
{
	AgrDirnOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwNgnOtNgnGuid
{
	AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwNgnOtNgnGuid
{
	AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwNgnOtNgnGuid
{
	AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi1nOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwNgnOtNgnGuid
{
	AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBinnOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwNgnOtNgnGuid
{
	CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwNgnOtNgnGuid
{
	CmpDir1OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwNgnOtNgnGuid
{
	CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwNgnOtNgnGuid
{
	CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwNgnOtNgnGuid
{
	CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwNgnOtNgnGuid
{
	CmpDirnOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwNgnOtNgnGuid
{
	CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpconNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwNgnOtNgnGuid
{
	CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwNgnOtNgnGuid
{
	CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi1nOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwNgnOtNgnGuid
{
	CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpconTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBinnOwnpconTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwNgnOtNgnGuid
{
	AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1OthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwNgnOtNgnGuid
{
	AgrDir1OthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwNgnOtNgnGuid
{
	AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwNgnOtNgnGuid
{
	AgrBi11OthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwNgnOtNgnGuid
{
	AgrDirnOthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrDirnOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDirnOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDirnOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDirnOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwNgnOtNgnGuid
{
	AgrBin1OthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrBin1OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBin1OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBin1OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBin1OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwNgnOtNgnGuid
{
	AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwNgnOtNgnGuid
{
	AgrBi1nOthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwNgnOtNgnGuid
{
	AgrBinnOthpconTblOwNgnOtNgnGuidLeft ownVar;
	AgrBinnOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBinnOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBinnOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBinnOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwNgnOtNgnGuid
{
	CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1OthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwNgnOtNgnGuid
{
	CmpDir1OthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwNgnOtNgnGuid
{
	CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11OthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwNgnOtNgnGuid
{
	CmpBi11OthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwNgnOtNgnGuid
{
	CmpDirnOthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpDirnOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDirnOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDirnOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDirnOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwNgnOtNgnGuid
{
	CmpBin1OthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpBin1OthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBin1OthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBin1OthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBin1OthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwNgnOtNgnGuid
{
	CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpconNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwNgnOtNgnGuid
{
	CmpBi1nOthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwNgnOtNgnGuid
{
	CmpBinnOthpconTblOwNgnOtNgnGuidLeft ownVar;
	CmpBinnOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBinnOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBinnOthpconTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBinnOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuid
{
	AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuid
{
	AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwNgnOtNgnGuid
{
	AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuid
{
	CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuid
{
	CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwNgnOtNgnGuid
{
	CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwGnOtNgnAuto
{
	AgrDir1NoTblOwGnOtNgnAutoLeft ownVar;
	AgrDir1NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1NoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwGnOtNgnAuto
{
	AgrDir1TblOwGnOtNgnAutoLeft ownVar;
	AgrDir1TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwGnOtNgnAuto
{
	AgrBi11NoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi11NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwGnOtNgnAuto
{
	AgrBi11TblOwGnOtNgnAutoLeft ownVar;
	AgrBi11TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwGnOtNgnAuto
{
	AgrDirnNoTblOwGnOtNgnAutoLeft ownVar;
	AgrDirnNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDirnNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwGnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnNoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDirnNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwGnOtNgnAuto
{
	AgrDirnTblOwGnOtNgnAutoLeft ownVar;
	AgrDirnTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDirnTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDirnTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwGnOtNgnAuto
{
	AgrBin1NoTblOwGnOtNgnAutoLeft ownVar;
	AgrBin1NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBin1NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwGnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1NoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBin1NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwGnOtNgnAuto
{
	AgrBin1TblOwGnOtNgnAutoLeft ownVar;
	AgrBin1TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwGnOtNgnAutoLeft();
		otherVar = new AgrBin1TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoLeft));
		ownVar = (AgrBin1TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwGnOtNgnAuto
{
	AgrBi1nNoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBi1nNoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi1nNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwGnOtNgnAuto
{
	AgrBi1nTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi1nTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwGnOtNgnAuto
{
	AgrBinnTblOwGnOtNgnAutoLeft ownVar;
	AgrBinnTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBinnTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBinnTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnAutoRight));
		otherVar = (AgrBinnTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwGnOtNgnAuto
{
	CmpDir1NoTblOwGnOtNgnAutoLeft ownVar;
	CmpDir1NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1NoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwGnOtNgnAuto
{
	CmpDir1TblOwGnOtNgnAutoLeft ownVar;
	CmpDir1TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwGnOtNgnAuto
{
	CmpBi11NoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi11NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwGnOtNgnAuto
{
	CmpBi11TblOwGnOtNgnAutoLeft ownVar;
	CmpBi11TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwGnOtNgnAuto
{
	CmpDirnNoTblOwGnOtNgnAutoLeft ownVar;
	CmpDirnNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDirnNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwGnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnNoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDirnNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwGnOtNgnAuto
{
	CmpDirnTblOwGnOtNgnAutoLeft ownVar;
	CmpDirnTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDirnTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDirnTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwGnOtNgnAuto
{
	CmpBin1NoTblOwGnOtNgnAutoLeft ownVar;
	CmpBin1NoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBin1NoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwGnOtNgnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1NoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBin1NoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1NoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwGnOtNgnAuto
{
	CmpBin1TblOwGnOtNgnAutoLeft ownVar;
	CmpBin1TblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwGnOtNgnAutoLeft();
		otherVar = new CmpBin1TblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnAutoLeft));
		ownVar = (CmpBin1TblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1TblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwGnOtNgnAuto
{
	CmpBi1nNoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBi1nNoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi1nNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwGnOtNgnAuto
{
	CmpBi1nTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi1nTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwGnOtNgnAuto
{
	CmpBinnTblOwGnOtNgnAutoLeft ownVar;
	CmpBinnTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBinnTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBinnTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnAutoRight));
		otherVar = (CmpBinnTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwGnOtNgnAuto
{
	AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwGnOtNgnAuto
{
	AgrDir1OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwGnOtNgnAuto
{
	AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwGnOtNgnAuto
{
	AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwGnOtNgnAuto
{
	AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwGnOtNgnAuto
{
	AgrDirnOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwGnOtNgnAuto
{
	AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwGnOtNgnAuto
{
	AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwGnOtNgnAuto
{
	AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi1nOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwGnOtNgnAuto
{
	AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (AgrBinnOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwGnOtNgnAuto
{
	CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwGnOtNgnAuto
{
	CmpDir1OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwGnOtNgnAuto
{
	CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwGnOtNgnAuto
{
	CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwGnOtNgnAuto
{
	CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwGnOtNgnAuto
{
	CmpDirnOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwGnOtNgnAuto
{
	CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpconNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwGnOtNgnAuto
{
	CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwGnOtNgnAuto
{
	CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi1nOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwGnOtNgnAuto
{
	CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpconTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnAutoRight));
		otherVar = (CmpBinnOwnpconTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwGnOtNgnAuto
{
	AgrDir1OthpconNoTblOwGnOtNgnAutoLeft ownVar;
	AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpconNoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwGnOtNgnAuto
{
	AgrDir1OthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrDir1OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwGnOtNgnAuto
{
	AgrBi11OthpconNoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwGnOtNgnAuto
{
	AgrBi11OthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrBi11OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwGnOtNgnAuto
{
	AgrDirnOthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrDirnOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDirnOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDirnOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDirnOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwGnOtNgnAuto
{
	AgrBin1OthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrBin1OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBin1OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBin1OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBin1OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwGnOtNgnAuto
{
	AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwGnOtNgnAuto
{
	AgrBi1nOthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwGnOtNgnAuto
{
	AgrBinnOthpconTblOwGnOtNgnAutoLeft ownVar;
	AgrBinnOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBinnOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBinnOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBinnOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwGnOtNgnAuto
{
	CmpDir1OthpconNoTblOwGnOtNgnAutoLeft ownVar;
	CmpDir1OthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwGnOtNgnAuto
{
	CmpDir1OthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpDir1OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwGnOtNgnAuto
{
	CmpBi11OthpconNoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi11OthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwGnOtNgnAuto
{
	CmpBi11OthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpBi11OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwGnOtNgnAuto
{
	CmpDirnOthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpDirnOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDirnOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDirnOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDirnOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwGnOtNgnAuto
{
	CmpBin1OthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpBin1OthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBin1OthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBin1OthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBin1OthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwGnOtNgnAuto
{
	CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpconNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwGnOtNgnAuto
{
	CmpBi1nOthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwGnOtNgnAuto
{
	CmpBinnOthpconTblOwGnOtNgnAutoLeft ownVar;
	CmpBinnOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBinnOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBinnOthpconTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBinnOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwGnOtNgnAuto
{
	AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwGnOtNgnAuto
{
	AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwGnOtNgnAuto
{
	AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwGnOtNgnAuto
{
	AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwGnOtNgnAuto
{
	AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwGnOtNgnAuto
{
	AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwGnOtNgnAuto
{
	AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwGnOtNgnAuto
{
	AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwGnOtNgnAuto
{
	CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwGnOtNgnAuto
{
	CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwGnOtNgnAuto
{
	CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwGnOtNgnAuto
{
	CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwGnOtNgnAuto
{
	CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwGnOtNgnAuto
{
	CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwGnOtNgnAuto
{
	CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwGnOtNgnAuto
{
	CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwGnOtNgnGuid
{
	AgrDir1NoTblOwGnOtNgnGuidLeft ownVar;
	AgrDir1NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwGnOtNgnGuid
{
	AgrDir1TblOwGnOtNgnGuidLeft ownVar;
	AgrDir1TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwGnOtNgnGuid
{
	AgrBi11NoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi11NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwGnOtNgnGuid
{
	AgrBi11TblOwGnOtNgnGuidLeft ownVar;
	AgrBi11TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwGnOtNgnGuid
{
	AgrDirnNoTblOwGnOtNgnGuidLeft ownVar;
	AgrDirnNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDirnNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDirnNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwGnOtNgnGuid
{
	AgrDirnTblOwGnOtNgnGuidLeft ownVar;
	AgrDirnTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDirnTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDirnTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwGnOtNgnGuid
{
	AgrBin1NoTblOwGnOtNgnGuidLeft ownVar;
	AgrBin1NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBin1NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBin1NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwGnOtNgnGuid
{
	AgrBin1TblOwGnOtNgnGuidLeft ownVar;
	AgrBin1TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwGnOtNgnGuidLeft();
		otherVar = new AgrBin1TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidLeft));
		ownVar = (AgrBin1TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwGnOtNgnGuid
{
	AgrBi1nNoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi1nNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwGnOtNgnGuid
{
	AgrBi1nTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi1nTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwGnOtNgnGuid
{
	AgrBinnTblOwGnOtNgnGuidLeft ownVar;
	AgrBinnTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBinnTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBinnTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtNgnGuidRight));
		otherVar = (AgrBinnTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwGnOtNgnGuid
{
	CmpDir1NoTblOwGnOtNgnGuidLeft ownVar;
	CmpDir1NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwGnOtNgnGuid
{
	CmpDir1TblOwGnOtNgnGuidLeft ownVar;
	CmpDir1TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwGnOtNgnGuid
{
	CmpBi11NoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi11NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwGnOtNgnGuid
{
	CmpBi11TblOwGnOtNgnGuidLeft ownVar;
	CmpBi11TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwGnOtNgnGuid
{
	CmpDirnNoTblOwGnOtNgnGuidLeft ownVar;
	CmpDirnNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDirnNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDirnNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwGnOtNgnGuid
{
	CmpDirnTblOwGnOtNgnGuidLeft ownVar;
	CmpDirnTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDirnTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDirnTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwGnOtNgnGuid
{
	CmpBin1NoTblOwGnOtNgnGuidLeft ownVar;
	CmpBin1NoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBin1NoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBin1NoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1NoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwGnOtNgnGuid
{
	CmpBin1TblOwGnOtNgnGuidLeft ownVar;
	CmpBin1TblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwGnOtNgnGuidLeft();
		otherVar = new CmpBin1TblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnGuidLeft));
		ownVar = (CmpBin1TblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1TblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwGnOtNgnGuid
{
	CmpBi1nNoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi1nNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwGnOtNgnGuid
{
	CmpBi1nTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi1nTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwGnOtNgnGuid
{
	CmpBinnTblOwGnOtNgnGuidLeft ownVar;
	CmpBinnTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBinnTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBinnTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtNgnGuidRight));
		otherVar = (CmpBinnTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwGnOtNgnGuid
{
	AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwGnOtNgnGuid
{
	AgrDir1OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwGnOtNgnGuid
{
	AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwGnOtNgnGuid
{
	AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwGnOtNgnGuid
{
	AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwGnOtNgnGuid
{
	AgrDirnOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwGnOtNgnGuid
{
	AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwGnOtNgnGuid
{
	AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwGnOtNgnGuid
{
	AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi1nOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwGnOtNgnGuid
{
	AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (AgrBinnOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwGnOtNgnGuid
{
	CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwGnOtNgnGuid
{
	CmpDir1OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwGnOtNgnGuid
{
	CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwGnOtNgnGuid
{
	CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwGnOtNgnGuid
{
	CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwGnOtNgnGuid
{
	CmpDirnOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwGnOtNgnGuid
{
	CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpconNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwGnOtNgnGuid
{
	CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwGnOtNgnGuid
{
	CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi1nOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwGnOtNgnGuid
{
	CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpconTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtNgnGuidRight));
		otherVar = (CmpBinnOwnpconTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwGnOtNgnGuid
{
	AgrDir1OthpconNoTblOwGnOtNgnGuidLeft ownVar;
	AgrDir1OthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwGnOtNgnGuid
{
	AgrDir1OthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrDir1OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwGnOtNgnGuid
{
	AgrBi11OthpconNoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwGnOtNgnGuid
{
	AgrBi11OthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrBi11OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwGnOtNgnGuid
{
	AgrDirnOthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrDirnOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDirnOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDirnOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDirnOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwGnOtNgnGuid
{
	AgrBin1OthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrBin1OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBin1OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBin1OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBin1OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwGnOtNgnGuid
{
	AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwGnOtNgnGuid
{
	AgrBi1nOthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwGnOtNgnGuid
{
	AgrBinnOthpconTblOwGnOtNgnGuidLeft ownVar;
	AgrBinnOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBinnOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBinnOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBinnOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwGnOtNgnGuid
{
	CmpDir1OthpconNoTblOwGnOtNgnGuidLeft ownVar;
	CmpDir1OthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwGnOtNgnGuid
{
	CmpDir1OthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpDir1OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwGnOtNgnGuid
{
	CmpBi11OthpconNoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi11OthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwGnOtNgnGuid
{
	CmpBi11OthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpBi11OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwGnOtNgnGuid
{
	CmpDirnOthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpDirnOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDirnOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDirnOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDirnOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwGnOtNgnGuid
{
	CmpBin1OthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpBin1OthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBin1OthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBin1OthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBin1OthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwGnOtNgnGuid
{
	CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpconNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwGnOtNgnGuid
{
	CmpBi1nOthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwGnOtNgnGuid
{
	CmpBinnOthpconTblOwGnOtNgnGuidLeft ownVar;
	CmpBinnOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBinnOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBinnOthpconTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBinnOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwGnOtNgnGuid
{
	AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwGnOtNgnGuid
{
	AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwGnOtNgnGuid
{
	AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwGnOtNgnGuid
{
	AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwGnOtNgnGuid
{
	AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwGnOtNgnGuid
{
	AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwGnOtNgnGuid
{
	AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwGnOtNgnGuid
{
	AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwGnOtNgnGuid
{
	CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwGnOtNgnGuid
{
	CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwGnOtNgnGuid
{
	CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwGnOtNgnGuid
{
	CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwGnOtNgnGuid
{
	CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwGnOtNgnGuid
{
	CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwGnOtNgnGuid
{
	CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwGnOtNgnGuid
{
	CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwNgnOtGnAuto
{
	AgrDir1NoTblOwNgnOtGnAutoLeft ownVar;
	AgrDir1NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1NoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwNgnOtGnAuto
{
	AgrDir1TblOwNgnOtGnAutoLeft ownVar;
	AgrDir1TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwNgnOtGnAuto
{
	AgrBi11NoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi11NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwNgnOtGnAuto
{
	AgrBi11TblOwNgnOtGnAutoLeft ownVar;
	AgrBi11TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwNgnOtGnAuto
{
	AgrDirnNoTblOwNgnOtGnAutoLeft ownVar;
	AgrDirnNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDirnNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwNgnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnNoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDirnNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwNgnOtGnAuto
{
	AgrDirnTblOwNgnOtGnAutoLeft ownVar;
	AgrDirnTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDirnTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDirnTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwNgnOtGnAuto
{
	AgrBin1NoTblOwNgnOtGnAutoLeft ownVar;
	AgrBin1NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBin1NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwNgnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1NoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBin1NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwNgnOtGnAuto
{
	AgrBin1TblOwNgnOtGnAutoLeft ownVar;
	AgrBin1TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwNgnOtGnAutoLeft();
		otherVar = new AgrBin1TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoLeft));
		ownVar = (AgrBin1TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwNgnOtGnAuto
{
	AgrBi1nNoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrBi1nNoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi1nNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwNgnOtGnAuto
{
	AgrBi1nTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi1nTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwNgnOtGnAuto
{
	AgrBinnTblOwNgnOtGnAutoLeft ownVar;
	AgrBinnTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBinnTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBinnTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnAutoRight));
		otherVar = (AgrBinnTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwNgnOtGnAuto
{
	CmpDir1NoTblOwNgnOtGnAutoLeft ownVar;
	CmpDir1NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1NoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwNgnOtGnAuto
{
	CmpDir1TblOwNgnOtGnAutoLeft ownVar;
	CmpDir1TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwNgnOtGnAuto
{
	CmpBi11NoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi11NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwNgnOtGnAuto
{
	CmpBi11TblOwNgnOtGnAutoLeft ownVar;
	CmpBi11TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwNgnOtGnAuto
{
	CmpDirnNoTblOwNgnOtGnAutoLeft ownVar;
	CmpDirnNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDirnNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwNgnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnNoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDirnNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwNgnOtGnAuto
{
	CmpDirnTblOwNgnOtGnAutoLeft ownVar;
	CmpDirnTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDirnTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDirnTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwNgnOtGnAuto
{
	CmpBin1NoTblOwNgnOtGnAutoLeft ownVar;
	CmpBin1NoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBin1NoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwNgnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1NoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBin1NoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1NoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwNgnOtGnAuto
{
	CmpBin1TblOwNgnOtGnAutoLeft ownVar;
	CmpBin1TblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwNgnOtGnAutoLeft();
		otherVar = new CmpBin1TblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnAutoLeft));
		ownVar = (CmpBin1TblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1TblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwNgnOtGnAuto
{
	CmpBi1nNoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpBi1nNoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi1nNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwNgnOtGnAuto
{
	CmpBi1nTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi1nTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwNgnOtGnAuto
{
	CmpBinnTblOwNgnOtGnAutoLeft ownVar;
	CmpBinnTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBinnTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBinnTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnAutoRight));
		otherVar = (CmpBinnTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwNgnOtGnAuto
{
	AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwNgnOtGnAuto
{
	AgrDir1OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwNgnOtGnAuto
{
	AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwNgnOtGnAuto
{
	AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwNgnOtGnAuto
{
	AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnOwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwNgnOtGnAuto
{
	AgrDirnOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwNgnOtGnAuto
{
	AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwNgnOtGnAuto
{
	AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwNgnOtGnAuto
{
	AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi1nOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwNgnOtGnAuto
{
	AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (AgrBinnOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwNgnOtGnAuto
{
	CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwNgnOtGnAuto
{
	CmpDir1OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwNgnOtGnAuto
{
	CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwNgnOtGnAuto
{
	CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwNgnOtGnAuto
{
	CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnOwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwNgnOtGnAuto
{
	CmpDirnOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwNgnOtGnAuto
{
	CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1OwnpconNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwNgnOtGnAuto
{
	CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1OwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwNgnOtGnAuto
{
	CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi1nOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwNgnOtGnAuto
{
	CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpconTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnAutoRight));
		otherVar = (CmpBinnOwnpconTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwNgnOtGnAuto
{
	AgrDir1OthpconNoTblOwNgnOtGnAutoLeft ownVar;
	AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1OthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpconNoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1OthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwNgnOtGnAuto
{
	AgrDir1OthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrDir1OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwNgnOtGnAuto
{
	AgrBi11OthpconNoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11OthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11OthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwNgnOtGnAuto
{
	AgrBi11OthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrBi11OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwNgnOtGnAuto
{
	AgrDirnOthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrDirnOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDirnOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDirnOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDirnOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwNgnOtGnAuto
{
	AgrBin1OthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrBin1OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBin1OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBin1OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBin1OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwNgnOtGnAuto
{
	AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwNgnOtGnAuto
{
	AgrBi1nOthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwNgnOtGnAuto
{
	AgrBinnOthpconTblOwNgnOtGnAutoLeft ownVar;
	AgrBinnOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBinnOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBinnOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBinnOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwNgnOtGnAuto
{
	CmpDir1OthpconNoTblOwNgnOtGnAutoLeft ownVar;
	CmpDir1OthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1OthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1OthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwNgnOtGnAuto
{
	CmpDir1OthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpDir1OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwNgnOtGnAuto
{
	CmpBi11OthpconNoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi11OthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11OthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11OthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwNgnOtGnAuto
{
	CmpBi11OthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpBi11OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwNgnOtGnAuto
{
	CmpDirnOthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpDirnOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDirnOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDirnOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDirnOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwNgnOtGnAuto
{
	CmpBin1OthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpBin1OthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBin1OthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBin1OthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBin1OthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwNgnOtGnAuto
{
	CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpconNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwNgnOtGnAuto
{
	CmpBi1nOthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwNgnOtGnAuto
{
	CmpBinnOthpconTblOwNgnOtGnAutoLeft ownVar;
	CmpBinnOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBinnOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBinnOthpconTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBinnOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwNgnOtGnAuto
{
	AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwNgnOtGnAuto
{
	AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwNgnOtGnAuto
{
	AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwNgnOtGnAuto
{
	AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwNgnOtGnAuto
{
	AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwNgnOtGnAuto
{
	AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwNgnOtGnAuto
{
	AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwNgnOtGnAuto
{
	AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwNgnOtGnAuto
{
	CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwNgnOtGnAuto
{
	CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwNgnOtGnAuto
{
	CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwNgnOtGnAuto
{
	CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwNgnOtGnAuto
{
	CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwNgnOtGnAuto
{
	CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwNgnOtGnAuto
{
	CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwNgnOtGnAuto
{
	CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwNgnOtGnGuid
{
	AgrDir1NoTblOwNgnOtGnGuidLeft ownVar;
	AgrDir1NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwNgnOtGnGuid
{
	AgrDir1TblOwNgnOtGnGuidLeft ownVar;
	AgrDir1TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwNgnOtGnGuid
{
	AgrBi11NoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi11NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwNgnOtGnGuid
{
	AgrBi11TblOwNgnOtGnGuidLeft ownVar;
	AgrBi11TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwNgnOtGnGuid
{
	AgrDirnNoTblOwNgnOtGnGuidLeft ownVar;
	AgrDirnNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDirnNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDirnNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwNgnOtGnGuid
{
	AgrDirnTblOwNgnOtGnGuidLeft ownVar;
	AgrDirnTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDirnTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDirnTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwNgnOtGnGuid
{
	AgrBin1NoTblOwNgnOtGnGuidLeft ownVar;
	AgrBin1NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBin1NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBin1NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwNgnOtGnGuid
{
	AgrBin1TblOwNgnOtGnGuidLeft ownVar;
	AgrBin1TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwNgnOtGnGuidLeft();
		otherVar = new AgrBin1TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidLeft));
		ownVar = (AgrBin1TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwNgnOtGnGuid
{
	AgrBi1nNoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi1nNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwNgnOtGnGuid
{
	AgrBi1nTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi1nTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwNgnOtGnGuid
{
	AgrBinnTblOwNgnOtGnGuidLeft ownVar;
	AgrBinnTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBinnTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBinnTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwNgnOtGnGuidRight));
		otherVar = (AgrBinnTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwNgnOtGnGuid
{
	CmpDir1NoTblOwNgnOtGnGuidLeft ownVar;
	CmpDir1NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwNgnOtGnGuid
{
	CmpDir1TblOwNgnOtGnGuidLeft ownVar;
	CmpDir1TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwNgnOtGnGuid
{
	CmpBi11NoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi11NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwNgnOtGnGuid
{
	CmpBi11TblOwNgnOtGnGuidLeft ownVar;
	CmpBi11TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwNgnOtGnGuid
{
	CmpDirnNoTblOwNgnOtGnGuidLeft ownVar;
	CmpDirnNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDirnNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDirnNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwNgnOtGnGuid
{
	CmpDirnTblOwNgnOtGnGuidLeft ownVar;
	CmpDirnTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDirnTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDirnTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwNgnOtGnGuid
{
	CmpBin1NoTblOwNgnOtGnGuidLeft ownVar;
	CmpBin1NoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBin1NoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBin1NoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1NoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwNgnOtGnGuid
{
	CmpBin1TblOwNgnOtGnGuidLeft ownVar;
	CmpBin1TblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwNgnOtGnGuidLeft();
		otherVar = new CmpBin1TblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnGuidLeft));
		ownVar = (CmpBin1TblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1TblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwNgnOtGnGuid
{
	CmpBi1nNoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi1nNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwNgnOtGnGuid
{
	CmpBi1nTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi1nTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwNgnOtGnGuid
{
	CmpBinnTblOwNgnOtGnGuidLeft ownVar;
	CmpBinnTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBinnTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBinnTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwNgnOtGnGuidRight));
		otherVar = (CmpBinnTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwNgnOtGnGuid
{
	AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwNgnOtGnGuid
{
	AgrDir1OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwNgnOtGnGuid
{
	AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwNgnOtGnGuid
{
	AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwNgnOtGnGuid
{
	AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnOwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwNgnOtGnGuid
{
	AgrDirnOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwNgnOtGnGuid
{
	AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwNgnOtGnGuid
{
	AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwNgnOtGnGuid
{
	AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi1nOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwNgnOtGnGuid
{
	AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (AgrBinnOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwNgnOtGnGuid
{
	CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwNgnOtGnGuid
{
	CmpDir1OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwNgnOtGnGuid
{
	CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwNgnOtGnGuid
{
	CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwNgnOtGnGuid
{
	CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnOwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwNgnOtGnGuid
{
	CmpDirnOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwNgnOtGnGuid
{
	CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1OwnpconNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwNgnOtGnGuid
{
	CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1OwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwNgnOtGnGuid
{
	CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi1nOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwNgnOtGnGuid
{
	CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpconTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwNgnOtGnGuidRight));
		otherVar = (CmpBinnOwnpconTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwNgnOtGnGuid
{
	AgrDir1OthpconNoTblOwNgnOtGnGuidLeft ownVar;
	AgrDir1OthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1OthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1OthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwNgnOtGnGuid
{
	AgrDir1OthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrDir1OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwNgnOtGnGuid
{
	AgrBi11OthpconNoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11OthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11OthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwNgnOtGnGuid
{
	AgrBi11OthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrBi11OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwNgnOtGnGuid
{
	AgrDirnOthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrDirnOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDirnOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDirnOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDirnOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwNgnOtGnGuid
{
	AgrBin1OthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrBin1OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBin1OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBin1OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBin1OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwNgnOtGnGuid
{
	AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwNgnOtGnGuid
{
	AgrBi1nOthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwNgnOtGnGuid
{
	AgrBinnOthpconTblOwNgnOtGnGuidLeft ownVar;
	AgrBinnOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBinnOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBinnOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBinnOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwNgnOtGnGuid
{
	CmpDir1OthpconNoTblOwNgnOtGnGuidLeft ownVar;
	CmpDir1OthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1OthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1OthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwNgnOtGnGuid
{
	CmpDir1OthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpDir1OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwNgnOtGnGuid
{
	CmpBi11OthpconNoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi11OthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11OthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11OthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwNgnOtGnGuid
{
	CmpBi11OthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpBi11OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwNgnOtGnGuid
{
	CmpDirnOthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpDirnOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDirnOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDirnOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDirnOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwNgnOtGnGuid
{
	CmpBin1OthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpBin1OthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBin1OthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBin1OthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBin1OthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwNgnOtGnGuid
{
	CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpconNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwNgnOtGnGuid
{
	CmpBi1nOthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwNgnOtGnGuid
{
	CmpBinnOthpconTblOwNgnOtGnGuidLeft ownVar;
	CmpBinnOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBinnOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBinnOthpconTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBinnOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwNgnOtGnGuid
{
	AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwNgnOtGnGuid
{
	AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwNgnOtGnGuid
{
	AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwNgnOtGnGuid
{
	AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwNgnOtGnGuid
{
	AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwNgnOtGnGuid
{
	AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwNgnOtGnGuid
{
	AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwNgnOtGnGuid
{
	AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwNgnOtGnGuid
{
	CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwNgnOtGnGuid
{
	CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwNgnOtGnGuid
{
	CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwNgnOtGnGuid
{
	CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwNgnOtGnGuid
{
	CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwNgnOtGnGuid
{
	CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwNgnOtGnGuid
{
	CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwNgnOtGnGuid
{
	CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwGnOtGnAuto
{
	AgrDir1NoTblOwGnOtGnAutoLeft ownVar;
	AgrDir1NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1NoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1NoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnAutoRight));
		otherVar = (AgrDir1NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwGnOtGnAuto
{
	AgrDir1TblOwGnOtGnAutoLeft ownVar;
	AgrDir1TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnAutoRight));
		otherVar = (AgrDir1TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwGnOtGnAuto
{
	AgrBi11NoTblOwGnOtGnAutoLeft ownVar;
	AgrBi11NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnAutoRight));
		otherVar = (AgrBi11NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwGnOtGnAuto
{
	AgrBi11TblOwGnOtGnAutoLeft ownVar;
	AgrBi11TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnAutoRight));
		otherVar = (AgrBi11TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwGnOtGnAuto
{
	AgrDirnNoTblOwGnOtGnAutoLeft ownVar;
	AgrDirnNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrDirnNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwGnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnNoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrDirnNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwGnOtGnAuto
{
	AgrDirnTblOwGnOtGnAutoLeft ownVar;
	AgrDirnTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwGnOtGnAutoLeft();
		otherVar = new AgrDirnTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoLeft));
		ownVar = (AgrDirnTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwGnOtGnAuto
{
	AgrBin1NoTblOwGnOtGnAutoLeft ownVar;
	AgrBin1NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBin1NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwGnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1NoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1NoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBin1NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnAutoRight));
		otherVar = (AgrBin1NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwGnOtGnAuto
{
	AgrBin1TblOwGnOtGnAutoLeft ownVar;
	AgrBin1TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwGnOtGnAutoLeft();
		otherVar = new AgrBin1TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoLeft));
		ownVar = (AgrBin1TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnAutoRight));
		otherVar = (AgrBin1TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwGnOtGnAuto
{
	AgrBi1nNoTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrBi1nNoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnAutoRight));
		otherVar = (AgrBi1nNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwGnOtGnAuto
{
	AgrBi1nTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnAutoRight));
		otherVar = (AgrBi1nTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwGnOtGnAuto
{
	AgrBinnTblOwGnOtGnAutoLeft ownVar;
	AgrBinnTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwGnOtGnAutoLeft();
		otherVar = new AgrBinnTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoLeft));
		ownVar = (AgrBinnTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnAutoRight));
		otherVar = (AgrBinnTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwGnOtGnAuto
{
	CmpDir1NoTblOwGnOtGnAutoLeft ownVar;
	CmpDir1NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1NoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1NoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnAutoRight));
		otherVar = (CmpDir1NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwGnOtGnAuto
{
	CmpDir1TblOwGnOtGnAutoLeft ownVar;
	CmpDir1TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnAutoRight));
		otherVar = (CmpDir1TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwGnOtGnAuto
{
	CmpBi11NoTblOwGnOtGnAutoLeft ownVar;
	CmpBi11NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnAutoRight));
		otherVar = (CmpBi11NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwGnOtGnAuto
{
	CmpBi11TblOwGnOtGnAutoLeft ownVar;
	CmpBi11TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnAutoRight));
		otherVar = (CmpBi11TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwGnOtGnAuto
{
	CmpDirnNoTblOwGnOtGnAutoLeft ownVar;
	CmpDirnNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpDirnNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwGnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnNoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpDirnNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwGnOtGnAuto
{
	CmpDirnTblOwGnOtGnAutoLeft ownVar;
	CmpDirnTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwGnOtGnAutoLeft();
		otherVar = new CmpDirnTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnAutoLeft));
		ownVar = (CmpDirnTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwGnOtGnAuto
{
	CmpBin1NoTblOwGnOtGnAutoLeft ownVar;
	CmpBin1NoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBin1NoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwGnOtGnAutoLeft)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1NoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1NoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBin1NoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnAutoRight));
		otherVar = (CmpBin1NoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwGnOtGnAuto
{
	CmpBin1TblOwGnOtGnAutoLeft ownVar;
	CmpBin1TblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwGnOtGnAutoLeft();
		otherVar = new CmpBin1TblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnAutoLeft));
		ownVar = (CmpBin1TblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnAutoRight));
		otherVar = (CmpBin1TblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwGnOtGnAuto
{
	CmpBi1nNoTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpBi1nNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpBi1nNoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnAutoRight));
		otherVar = (CmpBi1nNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwGnOtGnAuto
{
	CmpBi1nTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnAutoRight));
		otherVar = (CmpBi1nTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwGnOtGnAuto
{
	CmpBinnTblOwGnOtGnAutoLeft ownVar;
	CmpBinnTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwGnOtGnAutoLeft();
		otherVar = new CmpBinnTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnAutoLeft));
		ownVar = (CmpBinnTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnAutoRight));
		otherVar = (CmpBinnTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwGnOtGnAuto
{
	AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (AgrDir1OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwGnOtGnAuto
{
	AgrDir1OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrDir1OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwGnOtGnAuto
{
	AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (AgrBi11OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwGnOtGnAuto
{
	AgrBi11OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrBi11OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwGnOtGnAuto
{
	AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnOwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwGnOtGnAuto
{
	AgrDirnOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwGnOtGnAuto
{
	AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (AgrBin1OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwGnOtGnAuto
{
	AgrBin1OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrBin1OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwGnOtGnAuto
{
	AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrBi1nOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwGnOtGnAuto
{
	AgrBinnOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnAutoRight));
		otherVar = (AgrBinnOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwGnOtGnAuto
{
	CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (CmpDir1OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwGnOtGnAuto
{
	CmpDir1OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpDir1OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwGnOtGnAuto
{
	CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (CmpBi11OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwGnOtGnAuto
{
	CmpBi11OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpBi11OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwGnOtGnAuto
{
	CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnOwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwGnOtGnAuto
{
	CmpDirnOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwGnOtGnAuto
{
	CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoRight)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnAutoRight));
		otherVar = (CmpBin1OwnpconNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwGnOtGnAuto
{
	CmpBin1OwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpBin1OwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwGnOtGnAuto
{
	CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpBi1nOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwGnOtGnAuto
{
	CmpBinnOwnpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpconTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnAutoRight));
		otherVar = (CmpBinnOwnpconTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwGnOtGnAuto
{
	AgrDir1OthpconNoTblOwGnOtGnAutoLeft ownVar;
	AgrDir1OthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1OthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpconNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpconNoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1OthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwGnOtGnAuto
{
	AgrDir1OthpconTblOwGnOtGnAutoLeft ownVar;
	AgrDir1OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwGnOtGnAuto
{
	AgrBi11OthpconNoTblOwGnOtGnAutoLeft ownVar;
	AgrBi11OthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11OthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11OthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwGnOtGnAuto
{
	AgrBi11OthpconTblOwGnOtGnAutoLeft ownVar;
	AgrBi11OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwGnOtGnAuto
{
	AgrDirnOthpconTblOwGnOtGnAutoLeft ownVar;
	AgrDirnOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrDirnOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrDirnOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDirnOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwGnOtGnAuto
{
	AgrBin1OthpconTblOwGnOtGnAutoLeft ownVar;
	AgrBin1OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrBin1OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrBin1OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBin1OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwGnOtGnAuto
{
	AgrBi1nOthpconNoTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpconNoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwGnOtGnAuto
{
	AgrBi1nOthpconTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwGnOtGnAuto
{
	AgrBinnOthpconTblOwGnOtGnAutoLeft ownVar;
	AgrBinnOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwGnOtGnAutoLeft();
		otherVar = new AgrBinnOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoLeft));
		ownVar = (AgrBinnOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBinnOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwGnOtGnAuto
{
	CmpDir1OthpconNoTblOwGnOtGnAutoLeft ownVar;
	CmpDir1OthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1OthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1OthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwGnOtGnAuto
{
	CmpDir1OthpconTblOwGnOtGnAutoLeft ownVar;
	CmpDir1OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwGnOtGnAuto
{
	CmpBi11OthpconNoTblOwGnOtGnAutoLeft ownVar;
	CmpBi11OthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11OthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11OthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwGnOtGnAuto
{
	CmpBi11OthpconTblOwGnOtGnAutoLeft ownVar;
	CmpBi11OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwGnOtGnAuto
{
	CmpDirnOthpconTblOwGnOtGnAutoLeft ownVar;
	CmpDirnOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpDirnOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpDirnOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDirnOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwGnOtGnAuto
{
	CmpBin1OthpconTblOwGnOtGnAutoLeft ownVar;
	CmpBin1OthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpBin1OthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpBin1OthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBin1OthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwGnOtGnAuto
{
	CmpBi1nOthpconNoTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpconNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwGnOtGnAuto
{
	CmpBi1nOthpconTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwGnOtGnAuto
{
	CmpBinnOthpconTblOwGnOtGnAutoLeft ownVar;
	CmpBinnOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwGnOtGnAutoLeft();
		otherVar = new CmpBinnOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnAutoLeft));
		ownVar = (CmpBinnOthpconTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBinnOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwGnOtGnAuto
{
	AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #1", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase)})));
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwGnOtGnAuto
{
	AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwGnOtGnAuto
{
	AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwGnOtGnAuto
{
	AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwGnOtGnAuto
{
	AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwGnOtGnAuto
{
	AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwGnOtGnAuto
{
	AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwGnOtGnAuto
{
	AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwGnOtGnAuto
{
	CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwGnOtGnAuto
{
	CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwGnOtGnAuto
{
	CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwGnOtGnAuto
{
	CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwGnOtGnAuto
{
	CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwGnOtGnAuto
{
	CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwGnOtGnAuto
{
	CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwGnOtGnAuto
{
	CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1NoTblOwGnOtGnGuid
{
	AgrDir1NoTblOwGnOtGnGuidLeft ownVar;
	AgrDir1NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1NoTblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1NoTblOwGnOtGnGuidRight));
		otherVar = (AgrDir1NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1TblOwGnOtGnGuid
{
	AgrDir1TblOwGnOtGnGuidLeft ownVar;
	AgrDir1TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1TblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1TblOwGnOtGnGuidRight));
		otherVar = (AgrDir1TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11NoTblOwGnOtGnGuid
{
	AgrBi11NoTblOwGnOtGnGuidLeft ownVar;
	AgrBi11NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11NoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11NoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11NoTblOwGnOtGnGuidRight));
		otherVar = (AgrBi11NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11TblOwGnOtGnGuid
{
	AgrBi11TblOwGnOtGnGuidLeft ownVar;
	AgrBi11TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11TblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11TblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11TblOwGnOtGnGuidRight));
		otherVar = (AgrBi11TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnNoTblOwGnOtGnGuid
{
	AgrDirnNoTblOwGnOtGnGuidLeft ownVar;
	AgrDirnNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrDirnNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrDirnNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnNoTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnTblOwGnOtGnGuid
{
	AgrDirnTblOwGnOtGnGuidLeft ownVar;
	AgrDirnTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnTblOwGnOtGnGuidLeft();
		otherVar = new AgrDirnTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidLeft));
		ownVar = (AgrDirnTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1NoTblOwGnOtGnGuid
{
	AgrBin1NoTblOwGnOtGnGuidLeft ownVar;
	AgrBin1NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1NoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBin1NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1NoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBin1NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1NoTblOwGnOtGnGuidRight));
		otherVar = (AgrBin1NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1TblOwGnOtGnGuid
{
	AgrBin1TblOwGnOtGnGuidLeft ownVar;
	AgrBin1TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1TblOwGnOtGnGuidLeft();
		otherVar = new AgrBin1TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1TblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidLeft));
		ownVar = (AgrBin1TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1TblOwGnOtGnGuidRight));
		otherVar = (AgrBin1TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nNoTblOwGnOtGnGuid
{
	AgrBi1nNoTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nNoTblOwGnOtGnGuidRight));
		otherVar = (AgrBi1nNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nTblOwGnOtGnGuid
{
	AgrBi1nTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nTblOwGnOtGnGuidRight));
		otherVar = (AgrBi1nTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnTblOwGnOtGnGuid
{
	AgrBinnTblOwGnOtGnGuidLeft ownVar;
	AgrBinnTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnTblOwGnOtGnGuidLeft();
		otherVar = new AgrBinnTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidLeft));
		ownVar = (AgrBinnTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnTblOwGnOtGnGuidRight));
		otherVar = (AgrBinnTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1NoTblOwGnOtGnGuid
{
	CmpDir1NoTblOwGnOtGnGuidLeft ownVar;
	CmpDir1NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1NoTblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1NoTblOwGnOtGnGuidRight));
		otherVar = (CmpDir1NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1TblOwGnOtGnGuid
{
	CmpDir1TblOwGnOtGnGuidLeft ownVar;
	CmpDir1TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1TblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1TblOwGnOtGnGuidRight));
		otherVar = (CmpDir1TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11NoTblOwGnOtGnGuid
{
	CmpBi11NoTblOwGnOtGnGuidLeft ownVar;
	CmpBi11NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11NoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11NoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11NoTblOwGnOtGnGuidRight));
		otherVar = (CmpBi11NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11TblOwGnOtGnGuid
{
	CmpBi11TblOwGnOtGnGuidLeft ownVar;
	CmpBi11TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11TblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11TblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11TblOwGnOtGnGuidRight));
		otherVar = (CmpBi11TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnNoTblOwGnOtGnGuid
{
	CmpDirnNoTblOwGnOtGnGuidLeft ownVar;
	CmpDirnNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpDirnNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpDirnNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnNoTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnTblOwGnOtGnGuid
{
	CmpDirnTblOwGnOtGnGuidLeft ownVar;
	CmpDirnTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnTblOwGnOtGnGuidLeft();
		otherVar = new CmpDirnTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnGuidLeft));
		ownVar = (CmpDirnTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1NoTblOwGnOtGnGuid
{
	CmpBin1NoTblOwGnOtGnGuidLeft ownVar;
	CmpBin1NoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1NoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBin1NoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1NoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBin1NoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1NoTblOwGnOtGnGuidRight));
		otherVar = (CmpBin1NoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1TblOwGnOtGnGuid
{
	CmpBin1TblOwGnOtGnGuidLeft ownVar;
	CmpBin1TblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1TblOwGnOtGnGuidLeft();
		otherVar = new CmpBin1TblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1TblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnGuidLeft));
		ownVar = (CmpBin1TblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1TblOwGnOtGnGuidRight));
		otherVar = (CmpBin1TblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nNoTblOwGnOtGnGuid
{
	CmpBi1nNoTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nNoTblOwGnOtGnGuidRight));
		otherVar = (CmpBi1nNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nTblOwGnOtGnGuid
{
	CmpBi1nTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nTblOwGnOtGnGuidRight));
		otherVar = (CmpBi1nTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnTblOwGnOtGnGuid
{
	CmpBinnTblOwGnOtGnGuidLeft ownVar;
	CmpBinnTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnTblOwGnOtGnGuidLeft();
		otherVar = new CmpBinnTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnGuidLeft));
		ownVar = (CmpBinnTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnTblOwGnOtGnGuidRight));
		otherVar = (CmpBinnTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconNoTblOwGnOtGnGuid
{
	AgrDir1OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (AgrDir1OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconTblOwGnOtGnGuid
{
	AgrDir1OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrDir1OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconNoTblOwGnOtGnGuid
{
	AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (AgrBi11OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconTblOwGnOtGnGuid
{
	AgrBi11OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrBi11OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconNoTblOwGnOtGnGuid
{
	AgrDirnOwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnOwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconTblOwGnOtGnGuid
{
	AgrDirnOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconNoTblOwGnOtGnGuid
{
	AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (AgrBin1OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconTblOwGnOtGnGuid
{
	AgrBin1OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrBin1OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconTblOwGnOtGnGuid
{
	AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrBi1nOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconTblOwGnOtGnGuid
{
	AgrBinnOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconTblOwGnOtGnGuidRight));
		otherVar = (AgrBinnOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconNoTblOwGnOtGnGuid
{
	CmpDir1OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (CmpDir1OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconTblOwGnOtGnGuid
{
	CmpDir1OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpDir1OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconNoTblOwGnOtGnGuid
{
	CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (CmpBi11OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconTblOwGnOtGnGuid
{
	CmpBi11OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpBi11OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconNoTblOwGnOtGnGuid
{
	CmpDirnOwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnOwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconTblOwGnOtGnGuid
{
	CmpDirnOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconNoTblOwGnOtGnGuid
{
	CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconNoTblOwGnOtGnGuidRight));
		otherVar = (CmpBin1OwnpconNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconTblOwGnOtGnGuid
{
	CmpBin1OwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpBin1OwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconTblOwGnOtGnGuid
{
	CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpBi1nOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconTblOwGnOtGnGuid
{
	CmpBinnOwnpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpconTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconTblOwGnOtGnGuidRight));
		otherVar = (CmpBinnOwnpconTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconNoTblOwGnOtGnGuid
{
	AgrDir1OthpconNoTblOwGnOtGnGuidLeft ownVar;
	AgrDir1OthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1OthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1OthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpconTblOwGnOtGnGuid
{
	AgrDir1OthpconTblOwGnOtGnGuidLeft ownVar;
	AgrDir1OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconNoTblOwGnOtGnGuid
{
	AgrBi11OthpconNoTblOwGnOtGnGuidLeft ownVar;
	AgrBi11OthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11OthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11OthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpconTblOwGnOtGnGuid
{
	AgrBi11OthpconTblOwGnOtGnGuidLeft ownVar;
	AgrBi11OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpconTblOwGnOtGnGuid
{
	AgrDirnOthpconTblOwGnOtGnGuidLeft ownVar;
	AgrDirnOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrDirnOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrDirnOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDirnOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpconTblOwGnOtGnGuid
{
	AgrBin1OthpconTblOwGnOtGnGuidLeft ownVar;
	AgrBin1OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrBin1OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrBin1OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBin1OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconNoTblOwGnOtGnGuid
{
	AgrBi1nOthpconNoTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpconTblOwGnOtGnGuid
{
	AgrBi1nOthpconTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpconTblOwGnOtGnGuid
{
	AgrBinnOthpconTblOwGnOtGnGuidLeft ownVar;
	AgrBinnOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpconTblOwGnOtGnGuidLeft();
		otherVar = new AgrBinnOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidLeft));
		ownVar = (AgrBinnOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBinnOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconNoTblOwGnOtGnGuid
{
	CmpDir1OthpconNoTblOwGnOtGnGuidLeft ownVar;
	CmpDir1OthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1OthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1OthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpconTblOwGnOtGnGuid
{
	CmpDir1OthpconTblOwGnOtGnGuidLeft ownVar;
	CmpDir1OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconNoTblOwGnOtGnGuid
{
	CmpBi11OthpconNoTblOwGnOtGnGuidLeft ownVar;
	CmpBi11OthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11OthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11OthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpconTblOwGnOtGnGuid
{
	CmpBi11OthpconTblOwGnOtGnGuidLeft ownVar;
	CmpBi11OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpconTblOwGnOtGnGuid
{
	CmpDirnOthpconTblOwGnOtGnGuidLeft ownVar;
	CmpDirnOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpDirnOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpDirnOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDirnOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpconTblOwGnOtGnGuid
{
	CmpBin1OthpconTblOwGnOtGnGuidLeft ownVar;
	CmpBin1OthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpBin1OthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpBin1OthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBin1OthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconNoTblOwGnOtGnGuid
{
	CmpBi1nOthpconNoTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpconNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpconTblOwGnOtGnGuid
{
	CmpBi1nOthpconTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpconTblOwGnOtGnGuid
{
	CmpBinnOthpconTblOwGnOtGnGuidLeft ownVar;
	CmpBinnOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpconTblOwGnOtGnGuidLeft();
		otherVar = new CmpBinnOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnGuidLeft));
		ownVar = (CmpBinnOthpconTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBinnOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconNoTblOwGnOtGnGuid
{
	AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpconOthpconTblOwGnOtGnGuid
{
	AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconNoTblOwGnOtGnGuid
{
	AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpconOthpconTblOwGnOtGnGuid
{
	AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpconOthpconTblOwGnOtGnGuid
{
	AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDirnOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpconOthpconTblOwGnOtGnGuid
{
	AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBin1OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpconOthpconTblOwGnOtGnGuid
{
	AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpconOthpconTblOwGnOtGnGuid
{
	AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBinnOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconNoTblOwGnOtGnGuid
{
	CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpconOthpconTblOwGnOtGnGuid
{
	CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconNoTblOwGnOtGnGuid
{
	CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpconOthpconTblOwGnOtGnGuid
{
	CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpconOthpconTblOwGnOtGnGuid
{
	CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDirnOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpconOthpconTblOwGnOtGnGuid
{
	CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBin1OwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpconOthpconTblOwGnOtGnGuid
{
	CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpconOthpconTblOwGnOtGnGuid
{
	CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpconOthpconTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBinnOwnpconOthpconTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwNgnOtNgnAuto
{
	AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwNgnOtNgnAuto
{
	AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwNgnOtNgnAuto
{
	AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwNgnOtNgnAuto
{
	AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwNgnOtNgnAuto
{
	AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwNgnOtNgnAuto
{
	AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwNgnOtNgnAuto
{
	AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwNgnOtNgnAuto
{
	AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwNgnOtNgnAuto
{
	AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBi1nOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwNgnOtNgnAuto
{
	AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (AgrBinnOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwNgnOtNgnAuto
{
	CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwNgnOtNgnAuto
{
	CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwNgnOtNgnAuto
{
	CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwNgnOtNgnAuto
{
	CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwNgnOtNgnAuto
{
	CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwNgnOtNgnAuto
{
	CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwNgnOtNgnAuto
{
	CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpabsNoTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwNgnOtNgnAuto
{
	CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwNgnOtNgnAuto
{
	CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBi1nOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwNgnOtNgnAuto
{
	CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpabsTblOwNgnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwNgnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnAutoRight));
		otherVar = (CmpBinnOwnpabsTblOwNgnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwNgnOtNgnAuto
{
	AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwNgnOtNgnAuto
{
	AgrDir1OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrDir1OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwNgnOtNgnAuto
{
	AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwNgnOtNgnAuto
{
	AgrBi11OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwNgnOtNgnAuto
{
	AgrDirnOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrDirnOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrDirnOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrDirnOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDirnOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwNgnOtNgnAuto
{
	AgrBin1OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBin1OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBin1OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBin1OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwNgnOtNgnAuto
{
	AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwNgnOtNgnAuto
{
	AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwNgnOtNgnAuto
{
	AgrBinnOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new AgrBinnOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (AgrBinnOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBinnOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwNgnOtNgnAuto
{
	CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1OthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwNgnOtNgnAuto
{
	CmpDir1OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpDir1OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwNgnOtNgnAuto
{
	CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwNgnOtNgnAuto
{
	CmpBi11OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi11OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwNgnOtNgnAuto
{
	CmpDirnOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpDirnOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpDirnOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpDirnOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDirnOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwNgnOtNgnAuto
{
	CmpBin1OthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpBin1OthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBin1OthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBin1OthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBin1OthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwNgnOtNgnAuto
{
	CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwNgnOtNgnAuto
{
	CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpBi1nOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwNgnOtNgnAuto
{
	CmpBinnOthpabsTblOwNgnOtNgnAutoLeft ownVar;
	CmpBinnOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwNgnOtNgnAutoLeft();
		otherVar = new CmpBinnOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoLeft));
		ownVar = (CmpBinnOthpabsTblOwNgnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBinnOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAuto
{
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAuto
{
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAuto
{
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAuto
{
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwNgnOtNgnAuto
{
	CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwNgnOtNgnGuid
{
	AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwNgnOtNgnGuid
{
	AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwNgnOtNgnGuid
{
	AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwNgnOtNgnGuid
{
	AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwNgnOtNgnGuid
{
	AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwNgnOtNgnGuid
{
	AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwNgnOtNgnGuid
{
	AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwNgnOtNgnGuid
{
	AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwNgnOtNgnGuid
{
	AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBi1nOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwNgnOtNgnGuid
{
	AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (AgrBinnOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwNgnOtNgnGuid
{
	CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwNgnOtNgnGuid
{
	CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwNgnOtNgnGuid
{
	CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwNgnOtNgnGuid
{
	CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwNgnOtNgnGuid
{
	CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwNgnOtNgnGuid
{
	CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwNgnOtNgnGuid
{
	CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpabsNoTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwNgnOtNgnGuid
{
	CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwNgnOtNgnGuid
{
	CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBi1nOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwNgnOtNgnGuid
{
	CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpabsTblOwNgnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwNgnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtNgnGuidRight));
		otherVar = (CmpBinnOwnpabsTblOwNgnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwNgnOtNgnGuid
{
	AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwNgnOtNgnGuid
{
	AgrDir1OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrDir1OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwNgnOtNgnGuid
{
	AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwNgnOtNgnGuid
{
	AgrBi11OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwNgnOtNgnGuid
{
	AgrDirnOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrDirnOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrDirnOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrDirnOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDirnOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwNgnOtNgnGuid
{
	AgrBin1OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBin1OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBin1OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBin1OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwNgnOtNgnGuid
{
	AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwNgnOtNgnGuid
{
	AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwNgnOtNgnGuid
{
	AgrBinnOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new AgrBinnOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (AgrBinnOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBinnOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwNgnOtNgnGuid
{
	CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1OthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwNgnOtNgnGuid
{
	CmpDir1OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpDir1OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwNgnOtNgnGuid
{
	CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwNgnOtNgnGuid
{
	CmpBi11OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi11OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwNgnOtNgnGuid
{
	CmpDirnOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpDirnOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpDirnOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpDirnOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDirnOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwNgnOtNgnGuid
{
	CmpBin1OthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpBin1OthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBin1OthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBin1OthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBin1OthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwNgnOtNgnGuid
{
	CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwNgnOtNgnGuid
{
	CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpBi1nOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwNgnOtNgnGuid
{
	CmpBinnOthpabsTblOwNgnOtNgnGuidLeft ownVar;
	CmpBinnOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwNgnOtNgnGuidLeft();
		otherVar = new CmpBinnOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidLeft));
		ownVar = (CmpBinnOthpabsTblOwNgnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBinnOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuid
{
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuid
{
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuid
{
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuid
{
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuid
{
	CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwGnOtNgnAuto
{
	AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwGnOtNgnAuto
{
	AgrDir1OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrDir1OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwGnOtNgnAuto
{
	AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwGnOtNgnAuto
{
	AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi11OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwGnOtNgnAuto
{
	AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwGnOtNgnAuto
{
	AgrDirnOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrDirnOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwGnOtNgnAuto
{
	AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwGnOtNgnAuto
{
	AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrBin1OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwGnOtNgnAuto
{
	AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrBi1nOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwGnOtNgnAuto
{
	AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (AgrBinnOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwGnOtNgnAuto
{
	CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwGnOtNgnAuto
{
	CmpDir1OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpDir1OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwGnOtNgnAuto
{
	CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwGnOtNgnAuto
{
	CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi11OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwGnOtNgnAuto
{
	CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwGnOtNgnAuto
{
	CmpDirnOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpDirnOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwGnOtNgnAuto
{
	CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpabsNoTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwGnOtNgnAuto
{
	CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpBin1OwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwGnOtNgnAuto
{
	CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpBi1nOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwGnOtNgnAuto
{
	CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpabsTblOwGnOtNgnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwGnOtNgnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnAutoRight));
		otherVar = (CmpBinnOwnpabsTblOwGnOtNgnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwGnOtNgnAuto
{
	AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	AgrDir1OthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwGnOtNgnAuto
{
	AgrDir1OthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrDir1OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDir1OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDir1OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwGnOtNgnAuto
{
	AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwGnOtNgnAuto
{
	AgrBi11OthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrBi11OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi11OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi11OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwGnOtNgnAuto
{
	AgrDirnOthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrDirnOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrDirnOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrDirnOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDirnOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwGnOtNgnAuto
{
	AgrBin1OthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrBin1OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBin1OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBin1OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBin1OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwGnOtNgnAuto
{
	AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwGnOtNgnAuto
{
	AgrBi1nOthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBi1nOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBi1nOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwGnOtNgnAuto
{
	AgrBinnOthpabsTblOwGnOtNgnAutoLeft ownVar;
	AgrBinnOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new AgrBinnOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (AgrBinnOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBinnOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwGnOtNgnAuto
{
	CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	CmpDir1OthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwGnOtNgnAuto
{
	CmpDir1OthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpDir1OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDir1OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDir1OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwGnOtNgnAuto
{
	CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi11OthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwGnOtNgnAuto
{
	CmpBi11OthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpBi11OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi11OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi11OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwGnOtNgnAuto
{
	CmpDirnOthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpDirnOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpDirnOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpDirnOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDirnOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwGnOtNgnAuto
{
	CmpBin1OthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpBin1OthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBin1OthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBin1OthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBin1OthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwGnOtNgnAuto
{
	CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwGnOtNgnAuto
{
	CmpBi1nOthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpBi1nOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBi1nOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBi1nOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwGnOtNgnAuto
{
	CmpBinnOthpabsTblOwGnOtNgnAutoLeft ownVar;
	CmpBinnOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwGnOtNgnAutoLeft();
		otherVar = new CmpBinnOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoLeft));
		ownVar = (CmpBinnOthpabsTblOwGnOtNgnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBinnOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAuto
{
	AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAuto
{
	AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwGnOtNgnAuto
{
	AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAuto
{
	CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAuto
{
	CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwGnOtNgnAuto
{
	CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwGnOtNgnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwGnOtNgnGuid
{
	AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwGnOtNgnGuid
{
	AgrDir1OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrDir1OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwGnOtNgnGuid
{
	AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwGnOtNgnGuid
{
	AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi11OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwGnOtNgnGuid
{
	AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwGnOtNgnGuid
{
	AgrDirnOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrDirnOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwGnOtNgnGuid
{
	AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwGnOtNgnGuid
{
	AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrBin1OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwGnOtNgnGuid
{
	AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrBi1nOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwGnOtNgnGuid
{
	AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (AgrBinnOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwGnOtNgnGuid
{
	CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwGnOtNgnGuid
{
	CmpDir1OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpDir1OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwGnOtNgnGuid
{
	CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwGnOtNgnGuid
{
	CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi11OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwGnOtNgnGuid
{
	CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwGnOtNgnGuid
{
	CmpDirnOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpDirnOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwGnOtNgnGuid
{
	CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpabsNoTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwGnOtNgnGuid
{
	CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpBin1OwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwGnOtNgnGuid
{
	CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpBi1nOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwGnOtNgnGuid
{
	CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpabsTblOwGnOtNgnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwGnOtNgnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtNgnGuidRight));
		otherVar = (CmpBinnOwnpabsTblOwGnOtNgnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwGnOtNgnGuid
{
	AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	AgrDir1OthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwGnOtNgnGuid
{
	AgrDir1OthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrDir1OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDir1OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDir1OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwGnOtNgnGuid
{
	AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwGnOtNgnGuid
{
	AgrBi11OthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrBi11OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi11OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi11OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwGnOtNgnGuid
{
	AgrDirnOthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrDirnOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrDirnOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrDirnOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDirnOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwGnOtNgnGuid
{
	AgrBin1OthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrBin1OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBin1OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBin1OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBin1OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwGnOtNgnGuid
{
	AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwGnOtNgnGuid
{
	AgrBi1nOthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBi1nOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBi1nOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwGnOtNgnGuid
{
	AgrBinnOthpabsTblOwGnOtNgnGuidLeft ownVar;
	AgrBinnOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new AgrBinnOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (AgrBinnOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBinnOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwGnOtNgnGuid
{
	CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	CmpDir1OthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwGnOtNgnGuid
{
	CmpDir1OthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpDir1OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDir1OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDir1OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwGnOtNgnGuid
{
	CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi11OthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwGnOtNgnGuid
{
	CmpBi11OthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpBi11OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi11OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi11OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwGnOtNgnGuid
{
	CmpDirnOthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpDirnOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpDirnOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpDirnOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDirnOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwGnOtNgnGuid
{
	CmpBin1OthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpBin1OthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBin1OthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBin1OthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBin1OthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwGnOtNgnGuid
{
	CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwGnOtNgnGuid
{
	CmpBi1nOthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpBi1nOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBi1nOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBi1nOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwGnOtNgnGuid
{
	CmpBinnOthpabsTblOwGnOtNgnGuidLeft ownVar;
	CmpBinnOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwGnOtNgnGuidLeft();
		otherVar = new CmpBinnOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidLeft));
		ownVar = (CmpBinnOthpabsTblOwGnOtNgnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBinnOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuid
{
	AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuid
{
	AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwGnOtNgnGuid
{
	AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuid
{
	CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuid
{
	CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwGnOtNgnGuid
{
	CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwGnOtNgnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwNgnOtGnAuto
{
	AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwNgnOtGnAuto
{
	AgrDir1OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrDir1OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwNgnOtGnAuto
{
	AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwNgnOtGnAuto
{
	AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi11OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwNgnOtGnAuto
{
	AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnOwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwNgnOtGnAuto
{
	AgrDirnOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrDirnOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwNgnOtGnAuto
{
	AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwNgnOtGnAuto
{
	AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrBin1OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwNgnOtGnAuto
{
	AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrBi1nOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwNgnOtGnAuto
{
	AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (AgrBinnOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwNgnOtGnAuto
{
	CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwNgnOtGnAuto
{
	CmpDir1OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpDir1OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwNgnOtGnAuto
{
	CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwNgnOtGnAuto
{
	CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi11OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwNgnOtGnAuto
{
	CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnOwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwNgnOtGnAuto
{
	CmpDirnOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpDirnOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwNgnOtGnAuto
{
	CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1OwnpabsNoTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwNgnOtGnAuto
{
	CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpBin1OwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwNgnOtGnAuto
{
	CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpBi1nOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwNgnOtGnAuto
{
	CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpabsTblOwNgnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwNgnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnAutoRight));
		otherVar = (CmpBinnOwnpabsTblOwNgnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwNgnOtGnAuto
{
	AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	AgrDir1OthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1OthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1OthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwNgnOtGnAuto
{
	AgrDir1OthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrDir1OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDir1OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDir1OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwNgnOtGnAuto
{
	AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11OthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11OthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwNgnOtGnAuto
{
	AgrBi11OthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrBi11OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi11OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi11OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwNgnOtGnAuto
{
	AgrDirnOthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrDirnOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrDirnOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrDirnOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDirnOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwNgnOtGnAuto
{
	AgrBin1OthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrBin1OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBin1OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBin1OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBin1OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwNgnOtGnAuto
{
	AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwNgnOtGnAuto
{
	AgrBi1nOthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwNgnOtGnAuto
{
	AgrBinnOthpabsTblOwNgnOtGnAutoLeft ownVar;
	AgrBinnOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new AgrBinnOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (AgrBinnOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBinnOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwNgnOtGnAuto
{
	CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	CmpDir1OthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1OthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1OthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwNgnOtGnAuto
{
	CmpDir1OthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpDir1OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDir1OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDir1OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwNgnOtGnAuto
{
	CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi11OthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11OthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11OthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwNgnOtGnAuto
{
	CmpBi11OthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpBi11OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi11OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi11OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwNgnOtGnAuto
{
	CmpDirnOthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpDirnOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpDirnOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpDirnOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDirnOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwNgnOtGnAuto
{
	CmpBin1OthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpBin1OthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBin1OthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBin1OthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBin1OthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwNgnOtGnAuto
{
	CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwNgnOtGnAuto
{
	CmpBi1nOthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpBi1nOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwNgnOtGnAuto
{
	CmpBinnOthpabsTblOwNgnOtGnAutoLeft ownVar;
	CmpBinnOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwNgnOtGnAutoLeft();
		otherVar = new CmpBinnOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoLeft));
		ownVar = (CmpBinnOthpabsTblOwNgnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBinnOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAuto
{
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAuto
{
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwNgnOtGnAuto
{
	AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAuto
{
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAuto
{
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwNgnOtGnAuto
{
	CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwNgnOtGnGuid
{
	AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwNgnOtGnGuid
{
	AgrDir1OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrDir1OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwNgnOtGnGuid
{
	AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwNgnOtGnGuid
{
	AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi11OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwNgnOtGnGuid
{
	AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnOwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwNgnOtGnGuid
{
	AgrDirnOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrDirnOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwNgnOtGnGuid
{
	AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwNgnOtGnGuid
{
	AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrBin1OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwNgnOtGnGuid
{
	AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrBi1nOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwNgnOtGnGuid
{
	AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (AgrBinnOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwNgnOtGnGuid
{
	CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwNgnOtGnGuid
{
	CmpDir1OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpDir1OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwNgnOtGnGuid
{
	CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwNgnOtGnGuid
{
	CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi11OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwNgnOtGnGuid
{
	CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnOwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwNgnOtGnGuid
{
	CmpDirnOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpDirnOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwNgnOtGnGuid
{
	CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1OwnpabsNoTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwNgnOtGnGuid
{
	CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpBin1OwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwNgnOtGnGuid
{
	CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpBi1nOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwNgnOtGnGuid
{
	CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpabsTblOwNgnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwNgnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwNgnOtGnGuidRight));
		otherVar = (CmpBinnOwnpabsTblOwNgnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwNgnOtGnGuid
{
	AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	AgrDir1OthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1OthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1OthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwNgnOtGnGuid
{
	AgrDir1OthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrDir1OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDir1OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDir1OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwNgnOtGnGuid
{
	AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11OthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11OthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwNgnOtGnGuid
{
	AgrBi11OthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrBi11OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi11OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi11OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwNgnOtGnGuid
{
	AgrDirnOthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrDirnOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrDirnOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrDirnOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDirnOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwNgnOtGnGuid
{
	AgrBin1OthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrBin1OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBin1OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBin1OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBin1OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwNgnOtGnGuid
{
	AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwNgnOtGnGuid
{
	AgrBi1nOthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwNgnOtGnGuid
{
	AgrBinnOthpabsTblOwNgnOtGnGuidLeft ownVar;
	AgrBinnOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new AgrBinnOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (AgrBinnOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBinnOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwNgnOtGnGuid
{
	CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	CmpDir1OthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1OthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1OthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwNgnOtGnGuid
{
	CmpDir1OthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpDir1OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDir1OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDir1OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwNgnOtGnGuid
{
	CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi11OthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11OthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11OthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwNgnOtGnGuid
{
	CmpBi11OthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpBi11OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi11OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi11OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwNgnOtGnGuid
{
	CmpDirnOthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpDirnOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpDirnOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpDirnOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDirnOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwNgnOtGnGuid
{
	CmpBin1OthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpBin1OthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBin1OthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBin1OthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBin1OthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwNgnOtGnGuid
{
	CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwNgnOtGnGuid
{
	CmpBi1nOthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpBi1nOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwNgnOtGnGuid
{
	CmpBinnOthpabsTblOwNgnOtGnGuidLeft ownVar;
	CmpBinnOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwNgnOtGnGuidLeft();
		otherVar = new CmpBinnOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidLeft));
		ownVar = (CmpBinnOthpabsTblOwNgnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBinnOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuid
{
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuid
{
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwNgnOtGnGuid
{
	AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuid
{
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuid
{
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwNgnOtGnGuid
{
	CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwNgnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwGnOtGnAuto
{
	AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (AgrDir1OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwGnOtGnAuto
{
	AgrDir1OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrDir1OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwGnOtGnAuto
{
	AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (AgrBi11OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwGnOtGnAuto
{
	AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrBi11OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwGnOtGnAuto
{
	AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnOwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwGnOtGnAuto
{
	AgrDirnOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrDirnOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwGnOtGnAuto
{
	AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (AgrBin1OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwGnOtGnAuto
{
	AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrBin1OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwGnOtGnAuto
{
	AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrBi1nOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwGnOtGnAuto
{
	AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (AgrBinnOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwGnOtGnAuto
{
	CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (CmpDir1OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwGnOtGnAuto
{
	CmpDir1OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpDir1OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwGnOtGnAuto
{
	CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (CmpBi11OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwGnOtGnAuto
{
	CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpBi11OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwGnOtGnAuto
{
	CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnOwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwGnOtGnAuto
{
	CmpDirnOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpDirnOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwGnOtGnAuto
{
	CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				< ((int)mi.Invoke(mapping, new object[]{typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoRight)})));
		Debug.WriteLine("CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnAutoRight));
		otherVar = (CmpBin1OwnpabsNoTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwGnOtGnAuto
{
	CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpBin1OwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwGnOtGnAuto
{
	CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpBi1nOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwGnOtGnAuto
{
	CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpabsTblOwGnOtGnAutoRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwGnOtGnAutoRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnAutoRight));
		otherVar = (CmpBinnOwnpabsTblOwGnOtGnAutoRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwGnOtGnAuto
{
	AgrDir1OthpabsNoTblOwGnOtGnAutoLeft ownVar;
	AgrDir1OthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1OthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OthpabsNoTblOwGnOtGnAutoLeft");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1OthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwGnOtGnAuto
{
	AgrDir1OthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrDir1OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrDir1OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrDir1OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwGnOtGnAuto
{
	AgrBi11OthpabsNoTblOwGnOtGnAutoLeft ownVar;
	AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11OthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11OthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwGnOtGnAuto
{
	AgrBi11OthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrBi11OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi11OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi11OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwGnOtGnAuto
{
	AgrDirnOthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrDirnOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrDirnOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrDirnOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDirnOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwGnOtGnAuto
{
	AgrBin1OthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrBin1OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrBin1OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrBin1OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBin1OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwGnOtGnAuto
{
	AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft");
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwGnOtGnAuto
{
	AgrBi1nOthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrBi1nOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrBi1nOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrBi1nOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwGnOtGnAuto
{
	AgrBinnOthpabsTblOwGnOtGnAutoLeft ownVar;
	AgrBinnOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new AgrBinnOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (AgrBinnOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBinnOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwGnOtGnAuto
{
	CmpDir1OthpabsNoTblOwGnOtGnAutoLeft ownVar;
	CmpDir1OthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1OthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1OthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwGnOtGnAuto
{
	CmpDir1OthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpDir1OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpDir1OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpDir1OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwGnOtGnAuto
{
	CmpBi11OthpabsNoTblOwGnOtGnAutoLeft ownVar;
	CmpBi11OthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11OthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11OthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwGnOtGnAuto
{
	CmpBi11OthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpBi11OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi11OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi11OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwGnOtGnAuto
{
	CmpDirnOthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpDirnOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpDirnOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpDirnOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDirnOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwGnOtGnAuto
{
	CmpBin1OthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpBin1OthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpBin1OthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpBin1OthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBin1OthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwGnOtGnAuto
{
	CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwGnOtGnAuto
{
	CmpBi1nOthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpBi1nOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpBi1nOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpBi1nOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwGnOtGnAuto
{
	CmpBinnOthpabsTblOwGnOtGnAutoLeft ownVar;
	CmpBinnOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwGnOtGnAutoLeft();
		otherVar = new CmpBinnOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnAutoLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnAutoLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnAutoLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnAutoLeft));
		ownVar = (CmpBinnOthpabsTblOwGnOtGnAutoLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBinnOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwGnOtGnAuto
{
	AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestUpdateOrder()
	{
		NDO.Mapping.NDOMapping mapping = pm.NDOMapping;
		MethodInfo mi = mapping.GetType().GetMethod("GetUpdateOrder");
		Assertion.Assert("Wrong order #2", ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived)})) 
				> ((int)mi.Invoke(mapping, new object[]{typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived)})));
		Debug.WriteLine("AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase");
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwGnOtGnAuto
{
	AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		pm.MakePersistent(otherVar);
		pm.Save();
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwGnOtGnAuto
{
	AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwGnOtGnAuto
{
	CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwGnOtGnAuto
{
	CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test, ExpectedException(typeof(NDOException))]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.Save();
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwGnOtGnAuto
{
	CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwGnOtGnAutoRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsNoTblOwGnOtGnGuid
{
	AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (AgrDir1OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsTblOwGnOtGnGuid
{
	AgrDir1OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrDir1OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsNoTblOwGnOtGnGuid
{
	AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (AgrBi11OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsTblOwGnOtGnGuid
{
	AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrBi11OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsNoTblOwGnOtGnGuid
{
	AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnOwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsTblOwGnOtGnGuid
{
	AgrDirnOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrDirnOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsNoTblOwGnOtGnGuid
{
	AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (AgrBin1OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsTblOwGnOtGnGuid
{
	AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrBin1OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsTblOwGnOtGnGuid
{
	AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrBi1nOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsTblOwGnOtGnGuid
{
	AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidRight)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (AgrBinnOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsNoTblOwGnOtGnGuid
{
	CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (CmpDir1OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsTblOwGnOtGnGuid
{
	CmpDir1OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpDir1OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsNoTblOwGnOtGnGuid
{
	CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (CmpBi11OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsTblOwGnOtGnGuid
{
	CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpBi11OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsNoTblOwGnOtGnGuid
{
	CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnOwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsTblOwGnOtGnGuid
{
	CmpDirnOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpDirnOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsNoTblOwGnOtGnGuid
{
	CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsNoTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsNoTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsNoTblOwGnOtGnGuidRight));
		otherVar = (CmpBin1OwnpabsNoTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsTblOwGnOtGnGuid
{
	CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpBin1OwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsTblOwGnOtGnGuid
{
	CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpBi1nOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsTblOwGnOtGnGuid
{
	CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpabsTblOwGnOtGnGuidRight otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsTblOwGnOtGnGuidRight();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidRight)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidRight));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsTblOwGnOtGnGuidRight));
		otherVar = (CmpBinnOwnpabsTblOwGnOtGnGuidRight) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsNoTblOwGnOtGnGuid
{
	AgrDir1OthpabsNoTblOwGnOtGnGuidLeft ownVar;
	AgrDir1OthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1OthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1OthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OthpabsTblOwGnOtGnGuid
{
	AgrDir1OthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrDir1OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrDir1OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrDir1OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsNoTblOwGnOtGnGuid
{
	AgrBi11OthpabsNoTblOwGnOtGnGuidLeft ownVar;
	AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11OthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11OthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OthpabsTblOwGnOtGnGuid
{
	AgrBi11OthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrBi11OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi11OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi11OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOthpabsTblOwGnOtGnGuid
{
	AgrDirnOthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrDirnOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrDirnOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrDirnOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDirnOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OthpabsTblOwGnOtGnGuid
{
	AgrBin1OthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrBin1OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrBin1OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrBin1OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBin1OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsNoTblOwGnOtGnGuid
{
	AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOthpabsTblOwGnOtGnGuid
{
	AgrBi1nOthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrBi1nOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrBi1nOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrBi1nOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOthpabsTblOwGnOtGnGuid
{
	AgrBinnOthpabsTblOwGnOtGnGuidLeft ownVar;
	AgrBinnOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new AgrBinnOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (AgrBinnOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBinnOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsNoTblOwGnOtGnGuid
{
	CmpDir1OthpabsNoTblOwGnOtGnGuidLeft ownVar;
	CmpDir1OthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1OthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1OthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OthpabsTblOwGnOtGnGuid
{
	CmpDir1OthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpDir1OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpDir1OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpDir1OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsNoTblOwGnOtGnGuid
{
	CmpBi11OthpabsNoTblOwGnOtGnGuidLeft ownVar;
	CmpBi11OthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11OthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11OthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OthpabsTblOwGnOtGnGuid
{
	CmpBi11OthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpBi11OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi11OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi11OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOthpabsTblOwGnOtGnGuid
{
	CmpDirnOthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpDirnOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpDirnOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpDirnOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDirnOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OthpabsTblOwGnOtGnGuid
{
	CmpBin1OthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpBin1OthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpBin1OthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpBin1OthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBin1OthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsNoTblOwGnOtGnGuid
{
	CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpabsNoTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOthpabsTblOwGnOtGnGuid
{
	CmpBi1nOthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpBi1nOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpBi1nOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpBi1nOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOthpabsTblOwGnOtGnGuid
{
	CmpBinnOthpabsTblOwGnOtGnGuidLeft ownVar;
	CmpBinnOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOthpabsTblOwGnOtGnGuidLeft();
		otherVar = new CmpBinnOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnGuidLeft)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnGuidLeft)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnGuidLeft));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnGuidLeft));
		ownVar = (CmpBinnOthpabsTblOwGnOtGnGuidLeft) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBinnOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuid
{
	AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDir1OwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuid
{
	AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi11OwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrDirnOwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBin1OwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBi1nOwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestAgrBinnOwnpabsOthpabsTblOwGnOtGnGuid
{
	AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		l = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		pm.MakePersistent(otherVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (AgrBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuid
{
	CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDir1OwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDir1OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuid
{
	CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsNoTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi11OwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi11OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpDirnOwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpDirnOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBin1OwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestChangeKeyHolderRight()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		int x = otherVar.RelField.Dummy;
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderRightNoTouch()
	{
		CreateObjects();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
		otherVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOther();
		Assertion.AssertNotNull("No Query Result", otherVar);
		Assertion.AssertNotNull("Wrong value", otherVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", otherVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBin1OwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBi1nOwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.RelField = null;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNull("There should be no object", ownVar.RelField);
	}
	[Test]
	void TestSaveReloadRemove()
	{
	}
	[Test]
	public void TestChangeKeyHolderLeft()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		int x = ownVar.RelField.Dummy;
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestChangeKeyHolderLeftNoTouch()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
		ownVar.Dummy = 4711;
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertNotNull("Wrong value", ownVar.Dummy == 4711);
		Assertion.AssertNotNull("No related object", ownVar.RelField);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBi1nOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}


[TestFixture]
public class TestCmpBinnOwnpabsOthpabsTblOwGnOtGnGuid
{
	CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase ownVar;
	CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase otherVar;
	PersistenceManager pm;
	[SetUp]
	public void Setup()
	{
		pm = PmFactory.NewPersistenceManager();
		ownVar = new CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived();
		otherVar = new CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived();
	}
	[TearDown]
	public void TearDown()
	{
		pm.UnloadCache();
		IList l;
		l = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).Execute();
		pm.Delete(l);
		pm.Save();
		pm.UnloadCache();
		decimal count;
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #1", 0, count);
		count = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase)).ExecuteAggregate("dummy", Query.AggregateType.Count);
		Assertion.AssertEquals("Count wrong #2", 0, count);
	}
	[Test]
	public void TestSaveReload()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadNull()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RelField = new ArrayList();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestSaveReloadRemove()
	{
		CreateObjects();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 1, ownVar.RelField.Count);
		ownVar.RemoveRelatedObject();
		pm.Save();
		pm.UnloadCache();
		QueryOwn();
		Assertion.AssertNotNull("No Query Result", ownVar);
		Assertion.AssertEquals("Count wrong", 0, ownVar.RelField.Count);
	}
	[Test]
	public void TestRelationHash()
	{
		Class clbaseLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		Relation relbaseLeft = clbaseLeft.FindRelation("relField");
		Class clbaseRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		Relation relbaseRight = clbaseRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #1", relbaseRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #2", relbaseLeft.Equals(relbaseRight));
		Class clderLeft = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftDerived));
		Relation relderLeft = clderLeft.FindRelation("relField");
		Assertion.Assert("Relation should be equal #3", relderLeft.Equals(relbaseRight));
		Assertion.Assert("Relation should be equal #4", relbaseRight.Equals(relderLeft));
		Class clderRight = pm.NDOMapping.FindClass(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightDerived));
		Relation relderRight = clderRight.FindRelation("relField");
		Assertion.Assert("Relation should be equal #5", relbaseLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #6", relderRight.Equals(relbaseLeft));
		Assertion.Assert("Relation should be equal #7", relderLeft.Equals(relderRight));
		Assertion.Assert("Relation should be equal #8", relderRight.Equals(relderLeft));
	}
	void CreateObjects()
	{
		pm.MakePersistent(ownVar);
		ownVar.AssignRelation(otherVar);
		pm.Save();
		pm.UnloadCache();
	}
	void QueryOwn()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase));
		ownVar = (CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidLeftBase) q.ExecuteSingle();
	}
	void QueryOther()
	{
		Query q = pm.NewQuery(typeof(CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase));
		otherVar = (CmpBinnOwnpabsOthpabsTblOwGnOtGnGuidRightBase) q.ExecuteSingle();
	}
}



}
